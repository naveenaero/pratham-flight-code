
nominal2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  0000604e  000060e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000604e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000037c  008001da  008001da  000061bc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000061bc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003c8  00000000  00000000  00006218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005bda  00000000  00000000  000065e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000016c8  00000000  00000000  0000c1ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000027d5  00000000  00000000  0000d882  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ee4  00000000  00000000  00010058  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b6b  00000000  00000000  00010f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004540  00000000  00000000  00011aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002e0  00000000  00000000  00015fe7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	da c3       	rjmp	.+1972   	; 0x7b6 <__ctors_end>
       2:	00 00       	nop
       4:	f7 c3       	rjmp	.+2030   	; 0x7f4 <__bad_interrupt>
       6:	00 00       	nop
       8:	f5 c3       	rjmp	.+2026   	; 0x7f4 <__bad_interrupt>
       a:	00 00       	nop
       c:	f3 c3       	rjmp	.+2022   	; 0x7f4 <__bad_interrupt>
       e:	00 00       	nop
      10:	f1 c3       	rjmp	.+2018   	; 0x7f4 <__bad_interrupt>
      12:	00 00       	nop
      14:	ef c3       	rjmp	.+2014   	; 0x7f4 <__bad_interrupt>
      16:	00 00       	nop
      18:	ed c3       	rjmp	.+2010   	; 0x7f4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	eb c3       	rjmp	.+2006   	; 0x7f4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	e9 c3       	rjmp	.+2002   	; 0x7f4 <__bad_interrupt>
      22:	00 00       	nop
      24:	e7 c3       	rjmp	.+1998   	; 0x7f4 <__bad_interrupt>
      26:	00 00       	nop
      28:	e5 c3       	rjmp	.+1994   	; 0x7f4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e3 c3       	rjmp	.+1990   	; 0x7f4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e1 c3       	rjmp	.+1986   	; 0x7f4 <__bad_interrupt>
      32:	00 00       	nop
      34:	df c3       	rjmp	.+1982   	; 0x7f4 <__bad_interrupt>
      36:	00 00       	nop
      38:	dd c3       	rjmp	.+1978   	; 0x7f4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	db c3       	rjmp	.+1974   	; 0x7f4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d9 c3       	rjmp	.+1970   	; 0x7f4 <__bad_interrupt>
      42:	00 00       	nop
      44:	d7 c3       	rjmp	.+1966   	; 0x7f4 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 37 11 	jmp	0x226e	; 0x226e <__vector_18>
      4c:	d3 c3       	rjmp	.+1958   	; 0x7f4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d1 c3       	rjmp	.+1954   	; 0x7f4 <__bad_interrupt>
      52:	00 00       	nop
      54:	cf c3       	rjmp	.+1950   	; 0x7f4 <__bad_interrupt>
      56:	00 00       	nop
      58:	cd c3       	rjmp	.+1946   	; 0x7f4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	cb c3       	rjmp	.+1942   	; 0x7f4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c9 c3       	rjmp	.+1938   	; 0x7f4 <__bad_interrupt>
      62:	00 00       	nop
      64:	c7 c3       	rjmp	.+1934   	; 0x7f4 <__bad_interrupt>
      66:	00 00       	nop
      68:	c5 c3       	rjmp	.+1930   	; 0x7f4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	c3 c3       	rjmp	.+1926   	; 0x7f4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c1 c3       	rjmp	.+1922   	; 0x7f4 <__bad_interrupt>
      72:	00 00       	nop
      74:	bf c3       	rjmp	.+1918   	; 0x7f4 <__bad_interrupt>
      76:	00 00       	nop
      78:	bd c3       	rjmp	.+1914   	; 0x7f4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	bb c3       	rjmp	.+1910   	; 0x7f4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b9 c3       	rjmp	.+1906   	; 0x7f4 <__bad_interrupt>
      82:	00 00       	nop
      84:	b7 c3       	rjmp	.+1902   	; 0x7f4 <__bad_interrupt>
      86:	00 00       	nop
      88:	b5 c3       	rjmp	.+1898   	; 0x7f4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	03 6e       	ori	r16, 0xE3	; 227
      8e:	db 36       	cpi	r29, 0x6B	; 107
      90:	3d 9a       	sbi	0x07, 5	; 7
      92:	99 99       	sbic	0x13, 1	; 19
      94:	99 3d       	cpi	r25, 0xD9	; 217
      96:	ab aa       	std	Y+51, r10	; 0x33
      98:	aa 2a       	or	r10, r26
      9a:	3e 00       	.word	0x003e	; ????
      9c:	00 00       	nop
      9e:	80 3f       	cpi	r24, 0xF0	; 240
      a0:	08 4a       	sbci	r16, 0xA8	; 168
      a2:	d7 3b       	cpi	r29, 0xB7	; 183
      a4:	3b ce       	rjmp	.-906    	; 0xfffffd1c <__eeprom_end+0xff7efd1c>
      a6:	01 6e       	ori	r16, 0xE1	; 225
      a8:	84 bc       	out	0x24, r8	; 36
      aa:	bf fd       	.word	0xfdbf	; ????
      ac:	c1 2f       	mov	r28, r17
      ae:	3d 6c       	ori	r19, 0xCD	; 205
      b0:	74 31       	cpi	r23, 0x14	; 20
      b2:	9a bd       	out	0x2a, r25	; 42
      b4:	56 83       	std	Z+6, r21	; 0x06
      b6:	3d da       	rcall	.-2950   	; 0xfffff532 <__eeprom_end+0xff7ef532>
      b8:	3d 00       	.word	0x003d	; ????
      ba:	c7 7f       	andi	r28, 0xF7	; 247
      bc:	11 be       	out	0x31, r1	; 49
      be:	d9 e4       	ldi	r29, 0x49	; 73
      c0:	bb 4c       	sbci	r27, 0xCB	; 203
      c2:	3e 91       	ld	r19, -X
      c4:	6b aa       	std	Y+51, r6	; 0x33
      c6:	aa be       	out	0x3a, r10	; 58
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	3f 07       	cpc	r19, r31
      ce:	2c 7a       	andi	r18, 0xAC	; 172
      d0:	a5 ba       	out	0x15, r10	; 21
      d2:	6c c5       	rjmp	.+2776   	; 0xbac <nominal+0x1ce>
      d4:	90 da       	rcall	.-2784   	; 0xfffff5f6 <__eeprom_end+0xff7ef5f6>
      d6:	3b 93       	.word	0x933b	; ????
      d8:	65 fc       	sbrc	r6, 5
      da:	8b bc       	out	0x2b, r8	; 43
      dc:	53 f8       	bld	r5, 3
      de:	10 fd       	sbrc	r17, 0
      e0:	3c 56       	subi	r19, 0x6C	; 108
      e2:	92 83       	std	Z+2, r25	; 0x02
      e4:	4d bd       	out	0x2d, r20	; 45
      e6:	87 9d       	mul	r24, r7
      e8:	3a b6       	in	r3, 0x3a	; 58
      ea:	3d cb       	rjmp	.-2438   	; 0xfffff766 <__eeprom_end+0xff7ef766>
      ec:	c9 bf       	out	0x39, r28	; 57
      ee:	5b be       	out	0x3b, r5	; 59
      f0:	73 da       	rcall	.-2842   	; 0xfffff5d8 <__eeprom_end+0xff7ef5d8>
      f2:	0f c9       	rjmp	.-3554   	; 0xfffff312 <__eeprom_end+0xff7ef312>
      f4:	3f 05       	cpc	r19, r15
      f6:	a8 4c       	sbci	r26, 0xC8	; 200
      f8:	cd b2       	in	r12, 0x1d	; 29
      fa:	d4 4e       	sbci	r29, 0xE4	; 228
      fc:	b9 38       	cpi	r27, 0x89	; 137
      fe:	36 a9       	ldd	r19, Z+54	; 0x36
     100:	02 0c       	add	r0, r2
     102:	50 b9       	out	0x00, r21	; 0
     104:	91 86       	std	Z+9, r9	; 0x09
     106:	88 08       	sbc	r8, r8
     108:	3c a6       	std	Y+44, r3	; 0x2c
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	2a be       	out	0x3a, r2	; 58
     10e:	00 00       	nop
     110:	00 80       	ld	r0, Z
     112:	3f 07       	cpc	r19, r31
     114:	63 42       	sbci	r22, 0x23	; 35
     116:	36 b7       	in	r19, 0x36	; 54
     118:	9b d8       	rcall	.-3786   	; 0xfffff250 <__eeprom_end+0xff7ef250>
     11a:	a7 1a       	sub	r10, r23
     11c:	39 68       	ori	r19, 0x89	; 137
     11e:	56 18       	sub	r5, r6
     120:	ae ba       	out	0x1e, r10	; 30
     122:	ab 55       	subi	r26, 0x5B	; 91
     124:	8c 1d       	adc	r24, r12
     126:	3c b7       	in	r19, 0x3c	; 60
     128:	cc 57       	subi	r28, 0x7C	; 124
     12a:	63 bd       	out	0x23, r22	; 35
     12c:	6d ed       	ldi	r22, 0xDD	; 221
     12e:	fd 75       	andi	r31, 0x5D	; 93
     130:	3e f6       	brtc	.-114    	; 0xc0 <__SREG__+0x81>
     132:	17 72       	andi	r17, 0x27	; 39
     134:	31 bf       	out	0x31, r19	; 49
     136:	00 00       	nop
     138:	00 80       	ld	r0, Z
     13a:	3f 08       	sbc	r3, r15
     13c:	00 00       	nop
     13e:	00 be       	out	0x30, r0	; 48
     140:	92 24       	eor	r9, r2
     142:	49 12       	cpse	r4, r25
     144:	3e ab       	std	Y+54, r19	; 0x36
     146:	aa aa       	std	Y+50, r10	; 0x32
     148:	2a be       	out	0x3a, r2	; 58
     14a:	cd cc       	rjmp	.-1638   	; 0xfffffae6 <__eeprom_end+0xff7efae6>
     14c:	cc 4c       	sbci	r28, 0xCC	; 204
     14e:	3e 00       	.word	0x003e	; ????
     150:	00 00       	nop
     152:	80 be       	out	0x30, r8	; 48
     154:	ab aa       	std	Y+51, r10	; 0x33
     156:	aa aa       	std	Y+50, r10	; 0x32
     158:	3e 00       	.word	0x003e	; ????
     15a:	00 00       	nop
     15c:	00 bf       	out	0x30, r16	; 48
     15e:	00 00       	nop
     160:	00 80       	ld	r0, Z
     162:	3f 00       	.word	0x003f	; ????
     164:	00 00       	nop
     166:	00 00       	nop
     168:	08 41       	sbci	r16, 0x18	; 24
     16a:	78 d3       	rcall	.+1776   	; 0x85c <detumbling+0x66>
     16c:	bb 43       	sbci	r27, 0x3B	; 59
     16e:	87 d1       	rcall	.+782    	; 0x47e <__trampolines_end+0x2e8>
     170:	13 3d       	cpi	r17, 0xD3	; 211
     172:	19 0e       	add	r1, r25
     174:	3c c3       	rjmp	.+1656   	; 0x7ee <.do_clear_bss_start+0x8>
     176:	bd 42       	sbci	r27, 0x2D	; 45
     178:	82 ad       	ldd	r24, Z+58	; 0x3a
     17a:	2b 3e       	cpi	r18, 0xEB	; 235
     17c:	68 ec       	ldi	r22, 0xC8	; 200
     17e:	82 76       	andi	r24, 0x62	; 98
     180:	be d9       	rcall	.-3204   	; 0xfffff4fe <__eeprom_end+0xff7ef4fe>
     182:	8f e1       	ldi	r24, 0x1F	; 31
     184:	a9 3e       	cpi	r26, 0xE9	; 233
     186:	4c 80       	ldd	r4, Y+4	; 0x04
     188:	ef ff       	.word	0xffef	; ????
     18a:	be 01       	movw	r22, r28
     18c:	c4 ff       	sbrs	r28, 4
     18e:	7f 3f       	cpi	r23, 0xFF	; 255
     190:	00 00       	nop
     192:	00 00       	nop
	...

00000196 <__trampolines_end>:
     196:	00 00       	nop
     198:	00 00       	nop
     19a:	cd cc       	rjmp	.-1638   	; 0xfffffb36 <__eeprom_end+0xff7efb36>
     19c:	24 41       	sbci	r18, 0x14	; 20
     19e:	cd cc       	rjmp	.-1638   	; 0xfffffb3a <__eeprom_end+0xff7efb3a>
     1a0:	90 41       	sbci	r25, 0x10	; 16
     1a2:	cd cc       	rjmp	.-1638   	; 0xfffffb3e <__eeprom_end+0xff7efb3e>
     1a4:	d4 c1       	rjmp	.+936    	; 0x54e <agh+0xa8>
     1a6:	33 33       	cpi	r19, 0x33	; 51
     1a8:	0b c1       	rjmp	.+534    	; 0x3c0 <__trampolines_end+0x22a>
     1aa:	33 33       	cpi	r19, 0x33	; 51
     1ac:	53 c0       	rjmp	.+166    	; 0x254 <__trampolines_end+0xbe>
     1ae:	33 33       	cpi	r19, 0x33	; 51
     1b0:	db c1       	rjmp	.+950    	; 0x568 <agh+0xc2>
     1b2:	66 66       	ori	r22, 0x66	; 102
     1b4:	06 40       	sbci	r16, 0x06	; 6
     1b6:	9a 99       	sbic	0x13, 2	; 19
     1b8:	61 c1       	rjmp	.+706    	; 0x47c <__trampolines_end+0x2e6>
     1ba:	9a 99       	sbic	0x13, 2	; 19
     1bc:	59 40       	sbci	r21, 0x09	; 9
     1be:	00 00       	nop
     1c0:	b0 c0       	rjmp	.+352    	; 0x322 <__trampolines_end+0x18c>
     1c2:	33 33       	cpi	r19, 0x33	; 51
     1c4:	03 41       	sbci	r16, 0x13	; 19
     1c6:	33 33       	cpi	r19, 0x33	; 51
     1c8:	33 bf       	out	0x33, r19	; 51
     1ca:	cd cc       	rjmp	.-1638   	; 0xfffffb66 <__eeprom_end+0xff7efb66>
     1cc:	cc be       	out	0x3c, r12	; 60
     1ce:	9a 99       	sbic	0x13, 2	; 19
     1d0:	21 c1       	rjmp	.+578    	; 0x414 <__trampolines_end+0x27e>
     1d2:	66 66       	ori	r22, 0x66	; 102
     1d4:	e6 3f       	cpi	r30, 0xF6	; 246
     1d6:	33 33       	cpi	r19, 0x33	; 51
     1d8:	33 bf       	out	0x33, r19	; 51
     1da:	cd cc       	rjmp	.-1638   	; 0xfffffb76 <__eeprom_end+0xff7efb76>
     1dc:	4c 3e       	cpi	r20, 0xEC	; 236
     1de:	66 66       	ori	r22, 0x66	; 102
     1e0:	a6 bf       	out	0x36, r26	; 54
     1e2:	9a 99       	sbic	0x13, 2	; 19
     1e4:	11 c1       	rjmp	.+546    	; 0x408 <__trampolines_end+0x272>
     1e6:	9a 99       	sbic	0x13, 2	; 19
     1e8:	a9 40       	sbci	r26, 0x09	; 9
     1ea:	33 33       	cpi	r19, 0x33	; 51
     1ec:	83 40       	sbci	r24, 0x03	; 3
     1ee:	9a 99       	sbic	0x13, 2	; 19
     1f0:	39 40       	sbci	r19, 0x09	; 9
     1f2:	9a 99       	sbic	0x13, 2	; 19
     1f4:	89 c0       	rjmp	.+274    	; 0x308 <__trampolines_end+0x172>
     1f6:	66 66       	ori	r22, 0x66	; 102
     1f8:	a6 c0       	rjmp	.+332    	; 0x346 <__trampolines_end+0x1b0>
     1fa:	cd cc       	rjmp	.-1638   	; 0xfffffb96 <__eeprom_end+0xff7efb96>
     1fc:	4c be       	out	0x3c, r4	; 60
     1fe:	00 00       	nop
     200:	00 3f       	cpi	r16, 0xF0	; 240
     202:	9a 99       	sbic	0x13, 2	; 19
     204:	19 3f       	cpi	r17, 0xF9	; 249
     206:	66 66       	ori	r22, 0x66	; 102
     208:	a6 bf       	out	0x36, r26	; 54
     20a:	9a 99       	sbic	0x13, 2	; 19
     20c:	d9 3f       	cpi	r29, 0xF9	; 249
     20e:	cd cc       	rjmp	.-1638   	; 0xfffffbaa <__eeprom_end+0xff7efbaa>
     210:	cc bd       	out	0x2c, r28	; 44
     212:	9a 99       	sbic	0x13, 2	; 19
     214:	99 bf       	out	0x39, r25	; 57
     216:	33 33       	cpi	r19, 0x33	; 51
     218:	b3 3f       	cpi	r27, 0xF3	; 243
     21a:	9a 99       	sbic	0x13, 2	; 19
     21c:	59 40       	sbci	r21, 0x09	; 9
     21e:	9a 99       	sbic	0x13, 2	; 19
     220:	79 40       	sbci	r23, 0x09	; 9
     222:	00 00       	nop
     224:	00 00       	nop
     226:	9a 99       	sbic	0x13, 2	; 19
     228:	99 be       	out	0x39, r9	; 57
     22a:	cd cc       	rjmp	.-1638   	; 0xfffffbc6 <__eeprom_end+0xff7efbc6>
     22c:	cc bd       	out	0x2c, r28	; 44
     22e:	00 00       	nop
     230:	00 00       	nop
     232:	33 33       	cpi	r19, 0x33	; 51
     234:	33 bf       	out	0x33, r19	; 51
     236:	66 66       	ori	r22, 0x66	; 102
     238:	06 c0       	rjmp	.+12     	; 0x246 <__trampolines_end+0xb0>
     23a:	66 66       	ori	r22, 0x66	; 102
     23c:	06 40       	sbci	r16, 0x06	; 6
     23e:	33 33       	cpi	r19, 0x33	; 51
     240:	33 bf       	out	0x33, r19	; 51
     242:	9a 99       	sbic	0x13, 2	; 19
     244:	99 bf       	out	0x39, r25	; 57
     246:	cd cc       	rjmp	.-1638   	; 0xfffffbe2 <__eeprom_end+0xff7efbe2>
     248:	4c 3e       	cpi	r20, 0xEC	; 236
     24a:	9a 99       	sbic	0x13, 2	; 19
     24c:	99 3e       	cpi	r25, 0xE9	; 233
     24e:	66 66       	ori	r22, 0x66	; 102
     250:	66 3f       	cpi	r22, 0xF6	; 246
     252:	cd cc       	rjmp	.-1638   	; 0xfffffbee <__eeprom_end+0xff7efbee>
     254:	cc 3f       	cpi	r28, 0xFC	; 252
     256:	00 00       	nop
     258:	80 3f       	cpi	r24, 0xF0	; 240
     25a:	9a 99       	sbic	0x13, 2	; 19
     25c:	99 3e       	cpi	r25, 0xE9	; 233
     25e:	cd cc       	rjmp	.-1638   	; 0xfffffbfa <__eeprom_end+0xff7efbfa>
     260:	4c be       	out	0x3c, r4	; 60
     262:	cd cc       	rjmp	.-1638   	; 0xfffffbfe <__eeprom_end+0xff7efbfe>
     264:	4c 3f       	cpi	r20, 0xFC	; 252
     266:	00 00       	nop
     268:	00 bf       	out	0x30, r16	; 48
     26a:	cd cc       	rjmp	.-1638   	; 0xfffffc06 <__eeprom_end+0xff7efc06>
     26c:	cc 3e       	cpi	r28, 0xEC	; 236
     26e:	66 66       	ori	r22, 0x66	; 102
     270:	a6 3f       	cpi	r26, 0xF6	; 246
     272:	cd cc       	rjmp	.-1638   	; 0xfffffc0e <__eeprom_end+0xff7efc0e>
     274:	4c be       	out	0x3c, r4	; 60
     276:	cd cc       	rjmp	.-1638   	; 0xfffffc12 <__eeprom_end+0xff7efc12>
     278:	cc 3d       	cpi	r28, 0xDC	; 220
     27a:	9a 99       	sbic	0x13, 2	; 19
     27c:	99 be       	out	0x39, r9	; 57
     27e:	9a 99       	sbic	0x13, 2	; 19
     280:	19 bf       	out	0x39, r17	; 57
     282:	9a 99       	sbic	0x13, 2	; 19
     284:	19 bf       	out	0x39, r17	; 57
     286:	cd cc       	rjmp	.-1638   	; 0xfffffc22 <__eeprom_end+0xff7efc22>
     288:	4c bf       	out	0x3c, r20	; 60
     28a:	cd cc       	rjmp	.-1638   	; 0xfffffc26 <__eeprom_end+0xff7efc26>
     28c:	cc 3d       	cpi	r28, 0xDC	; 220
     28e:	cd cc       	rjmp	.-1638   	; 0xfffffc2a <__eeprom_end+0xff7efc2a>
     290:	4c 3e       	cpi	r20, 0xEC	; 236
     292:	cd cc       	rjmp	.-1638   	; 0xfffffc2e <__eeprom_end+0xff7efc2e>
     294:	4c be       	out	0x3c, r4	; 60
     296:	cd cc       	rjmp	.-1638   	; 0xfffffc32 <__eeprom_end+0xff7efc32>
     298:	4c 3e       	cpi	r20, 0xEC	; 236
     29a:	00 00       	nop
     29c:	00 00       	nop
     29e:	9a 99       	sbic	0x13, 2	; 19
     2a0:	99 be       	out	0x39, r9	; 57
     2a2:	9a 99       	sbic	0x13, 2	; 19
     2a4:	19 bf       	out	0x39, r17	; 57
     2a6:	9a 99       	sbic	0x13, 2	; 19
     2a8:	99 3e       	cpi	r25, 0xE9	; 233
     2aa:	00 00       	nop
     2ac:	00 3f       	cpi	r16, 0xF0	; 240
     2ae:	cd cc       	rjmp	.-1638   	; 0xfffffc4a <__eeprom_end+0xff7efc4a>
     2b0:	cc 3d       	cpi	r28, 0xDC	; 220
     2b2:	cd cc       	rjmp	.-1638   	; 0xfffffc4e <__eeprom_end+0xff7efc4e>
     2b4:	4c be       	out	0x3c, r4	; 60
     2b6:	00 00       	nop
     2b8:	00 3f       	cpi	r16, 0xF0	; 240
     2ba:	cd cc       	rjmp	.-1638   	; 0xfffffc56 <__eeprom_end+0xff7efc56>
     2bc:	cc 3e       	cpi	r28, 0xEC	; 236
     2be:	cd cc       	rjmp	.-1638   	; 0xfffffc5a <__eeprom_end+0xff7efc5a>
     2c0:	4c be       	out	0x3c, r4	; 60
     2c2:	cd cc       	rjmp	.-1638   	; 0xfffffc5e <__eeprom_end+0xff7efc5e>
     2c4:	cc 3d       	cpi	r28, 0xDC	; 220
     2c6:	9a 99       	sbic	0x13, 2	; 19
     2c8:	99 be       	out	0x39, r9	; 57
     2ca:	cd cc       	rjmp	.-1638   	; 0xfffffc66 <__eeprom_end+0xff7efc66>
     2cc:	cc be       	out	0x3c, r12	; 60
     2ce:	9a 99       	sbic	0x13, 2	; 19
     2d0:	99 3e       	cpi	r25, 0xE9	; 233
     2d2:	9a 99       	sbic	0x13, 2	; 19
     2d4:	99 3e       	cpi	r25, 0xE9	; 233
	...

000004a6 <agh>:
     4a6:	00 00 00 00 00 04 e6 c6 00 a0 bb c4 cd e8 95 45     ...............E
     4b6:	9a d1 18 c5 66 4e 3c 45 9a d9 31 c5 66 96 d1 44     ....fN<E..1.f..D
     4c6:	9a 79 20 c4 66 d6 a8 44 cd 04 13 c5 9a 99 e6 c2     .y .f..D........
     4d6:	33 33 99 44 66 e6 74 43 00 80 11 44 9a 99 06 c4     33.Df.tC...D....
     4e6:	66 e6 62 44 cd 6c 4b 44 66 a6 8d 43 cd cc f0 42     f.bD.lKDf..C...B
     4f6:	33 b3 3c c3 33 73 a7 c3 66 e6 34 43 cd cc 8c 42     3.<.3s..f.4C...B
     506:	00 c0 a4 c3 9a 99 68 c3 cd 0c b4 43 33 33 3d 42     ......h....C33=B
     516:	66 66 40 43 00 00 45 43 66 e6 0c c3 9a 99 ee c2     ff@C..ECf.......
     526:	00 80 1d c3 00 00 80 41 33 33 83 40 66 66 c8 42     .......A33.@ff.B
     536:	00 00 8c 42 66 66 87 42 66 66 a6 c1 66 66 91 42     ...Bff.Bff..ff.B
     546:	cd cc 04 42 66 e6 01 c3 9a 99 6b 42 33 33 e7 c1     ...Bf.....kB33..
     556:	66 66 85 c2 33 33 53 41 9a 99 e9 40 cd cc 8d c2     ff..33SA...@....
     566:	66 66 7a 42 33 33 a3 42 33 33 98 c2 66 66 58 c2     ffzB33.B33..ffX.
     576:	9a 99 d9 c0 00 00 9c c1 33 33 4f 42 66 66 b6 40     ........33OBff.@
     586:	00 00 70 41 33 33 c3 41 66 66 16 41 9a 99 59 40     ..pA33.Aff.A..Y@
     596:	33 33 33 c0 33 33 db c1 9a 99 d9 40 cd cc 0c c0     333.33.....@....
     5a6:	9a 99 c1 41 cd cc 0c 41 9a 99 21 41 33 33 87 c1     ...A...A..!A33..
     5b6:	66 66 92 c1 cd cc 4c c0 cd cc 54 41 cd cc a4 c1     ff....L...TA....
     5c6:	9a 99 69 c1 66 66 56 41 9a 99 81 41 33 33 3b 41     ..i.ffVA...A33;A
     5d6:	66 66 b6 40 66 66 7e c1 9a 99 11 c1 00 00 00 c0     ff.@ff~.........
     5e6:	66 66 06 40 cd cc ac 40 cd cc 0c 41 cd cc ac c1     ff.@...@...A....
     5f6:	66 66 46 40 cd cc 2c 41 33 33 53 c0 cd cc 3c 41     ffF@..,A33S...<A
     606:	33 33 33 3f 9a 99 d9 c0 cd cc 54 c1 cd cc dc c0     333?......T.....
     616:	cd cc cc bd 9a 99 f9 40 33 33 0b 41 00 00 80 3f     .......@33.A...?
     626:	9a 99 11 c1 00 00 80 c0 00 00 28 c1 66 66 06 41     ..........(.ff.A
     636:	33 33 f3 bf 9a 99 c9 c0 cd cc 4c 40 cd cc cc 3d     33........L@...=
     646:	cd cc cc be 00 00 00 3f 33 33 93 40 00 00 00 bf     .......?33.@....
     656:	cd cc 8c 40 66 66 e6 3f cd cc fc c0 33 33 33 bf     ...@ff.?....333.
     666:	9a 99 19 bf 66 66 06 40 66 66 86 c0 9a 99 19 40     ....ff.@ff.....@
     676:	33 33 33 c0 66 66 e6 bf 9a 99 99 bf 66 66 66 c0     333.ff......fff.
     686:	33 33 0b c1 66 66 46 40 00 00 c0 bf cd cc cc bd     33..ffF@........
     696:	33 33 13 c0 00 00 00 40 00 00 00 40 33 33 33 bf     33.....@...@333.
     6a6:	cd cc 4c bf cd cc 8c bf 9a 99 19 3f cd cc 4c 3f     ..L........?..L?
     6b6:	33 33 33 bf cd cc 4c be cd cc 4c 3e cd cc 0c c0     333...L...L>....
     6c6:	9a 99 d9 3f 33 33 b3 bf cd cc 4c be 00 00 20 c0     ...?33....L... .
     6d6:	cd cc cc 3e 00 00 00 c0 00 00 60 40 9a 99 19 c0     ...>......`@....
     6e6:	33 33 f3 bf cd cc 4c be cd cc 8c bf cd cc cc 3e     33....L........>
     6f6:	cd cc cc 3e 9a 99 99 3f 33 33 f3 3f cd cc 4c bf     ...>...?33.?..L.
     706:	cd cc 0c c0 66 66 66 3f 9a 99 99 3e cd cc cc 3d     ....fff?...>...=
     716:	33 33 33 3f 00 00 00 3f cd cc cc bd 9a 99 99 be     333?...?........
     726:	9a 99 99 3e cd cc cc be cd cc 4c 3e cd cc 4c 3e     ...>......L>..L>
     736:	66 66 66 bf 66 66 66 bf cd cc cc bd 00 00 00 00     fff.fff.........
     746:	33 33 33 3f 00 00 00 00 66 66 66 bf 66 66 66 bf     333?....fff.fff.
     756:	cd cc cc 3e cd cc cc 3e 00 00 00 3f cd cc cc 3f     ...>...>...?...?
     766:	00 00 00 bf 00 00 00 bf 00 00 80 3f 9a 99 99 bf     ...........?....
     776:	cd cc 4c be cd cc cc bd cd cc 4c 3f cd cc cc 3e     ..L.......L?...>
     786:	cd cc cc bd cd cc cc bd 9a 99 99 3e cd cc cc 3e     ...........>...>
     796:	cd cc cc 3d 00 00 00 3f 00 00 00 3f 9a 99 99 be     ...=...?...?....
     7a6:	cd cc cc be cd cc cc be 9a 99 99 be cd cc 4c bf     ..............L.

000007b6 <__ctors_end>:
     7b6:	11 24       	eor	r1, r1
     7b8:	1f be       	out	0x3f, r1	; 63
     7ba:	cf ef       	ldi	r28, 0xFF	; 255
     7bc:	d0 e1       	ldi	r29, 0x10	; 16
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	cd bf       	out	0x3d, r28	; 61

000007c2 <__do_copy_data>:
     7c2:	11 e0       	ldi	r17, 0x01	; 1
     7c4:	a0 e0       	ldi	r26, 0x00	; 0
     7c6:	b1 e0       	ldi	r27, 0x01	; 1
     7c8:	ee e4       	ldi	r30, 0x4E	; 78
     7ca:	f0 e6       	ldi	r31, 0x60	; 96
     7cc:	00 e0       	ldi	r16, 0x00	; 0
     7ce:	0b bf       	out	0x3b, r16	; 59
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <__do_copy_data+0x14>
     7d2:	07 90       	elpm	r0, Z+
     7d4:	0d 92       	st	X+, r0
     7d6:	aa 3d       	cpi	r26, 0xDA	; 218
     7d8:	b1 07       	cpc	r27, r17
     7da:	d9 f7       	brne	.-10     	; 0x7d2 <__do_copy_data+0x10>

000007dc <__do_clear_bss>:
     7dc:	25 e0       	ldi	r18, 0x05	; 5
     7de:	aa ed       	ldi	r26, 0xDA	; 218
     7e0:	b1 e0       	ldi	r27, 0x01	; 1
     7e2:	01 c0       	rjmp	.+2      	; 0x7e6 <.do_clear_bss_start>

000007e4 <.do_clear_bss_loop>:
     7e4:	1d 92       	st	X+, r1

000007e6 <.do_clear_bss_start>:
     7e6:	a6 35       	cpi	r26, 0x56	; 86
     7e8:	b2 07       	cpc	r27, r18
     7ea:	e1 f7       	brne	.-8      	; 0x7e4 <.do_clear_bss_loop>
     7ec:	0e 94 c4 1c 	call	0x3988	; 0x3988 <main>
     7f0:	0c 94 25 30 	jmp	0x604a	; 0x604a <_exit>

000007f4 <__bad_interrupt>:
     7f4:	05 cc       	rjmp	.-2038   	; 0x0 <__vectors>

000007f6 <detumbling>:
static matrix m_Kd = { { 0.000475908639758953, -2.75953740726193E-06, -1.45908374051095E-06 },
                       { -2.75953740726193E-06, 0.000489370418150681, -6.34295672515486E-06 },
                       { -1.45908374051095E-06, -6.34295672515486E-06, 0.000470577029621382 } };

void detumbling(vector v_m_D)
{
     7f6:	3f 92       	push	r3
     7f8:	4f 92       	push	r4
     7fa:	5f 92       	push	r5
     7fc:	6f 92       	push	r6
     7fe:	7f 92       	push	r7
     800:	8f 92       	push	r8
     802:	9f 92       	push	r9
     804:	af 92       	push	r10
     806:	bf 92       	push	r11
     808:	cf 92       	push	r12
     80a:	df 92       	push	r13
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	6c 97       	sbiw	r28, 0x1c	; 28
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	f8 94       	cli
     822:	de bf       	out	0x3e, r29	; 62
     824:	0f be       	out	0x3f, r0	; 63
     826:	cd bf       	out	0x3d, r28	; 61
     828:	9c 8f       	std	Y+28, r25	; 0x1c
     82a:	8b 8f       	std	Y+27, r24	; 0x1b
	static vector v_B_old;
	 v_B[0] = Current_state.mm.B_x;
     82c:	c0 90 26 05 	lds	r12, 0x0526
     830:	d0 90 27 05 	lds	r13, 0x0527
     834:	e0 90 28 05 	lds	r14, 0x0528
     838:	f0 90 29 05 	lds	r15, 0x0529
     83c:	c0 92 43 02 	sts	0x0243, r12
     840:	d0 92 44 02 	sts	0x0244, r13
     844:	e0 92 45 02 	sts	0x0245, r14
     848:	f0 92 46 02 	sts	0x0246, r15
	 v_B[1] = Current_state.mm.B_y;
     84c:	80 91 2a 05 	lds	r24, 0x052A
     850:	90 91 2b 05 	lds	r25, 0x052B
     854:	a0 91 2c 05 	lds	r26, 0x052C
     858:	b0 91 2d 05 	lds	r27, 0x052D
     85c:	80 93 47 02 	sts	0x0247, r24
     860:	90 93 48 02 	sts	0x0248, r25
     864:	a0 93 49 02 	sts	0x0249, r26
     868:	b0 93 4a 02 	sts	0x024A, r27
	 v_B[2] = Current_state.mm.B_z;
     86c:	80 91 2e 05 	lds	r24, 0x052E
     870:	90 91 2f 05 	lds	r25, 0x052F
     874:	a0 91 30 05 	lds	r26, 0x0530
     878:	b0 91 31 05 	lds	r27, 0x0531
     87c:	80 93 4b 02 	sts	0x024B, r24
     880:	90 93 4c 02 	sts	0x024C, r25
     884:	a0 93 4d 02 	sts	0x024D, r26
     888:	b0 93 4e 02 	sts	0x024E, r27
	if(first_B)
     88c:	80 91 0c 01 	lds	r24, 0x010C
     890:	81 11       	cpse	r24, r1
     892:	9c c0       	rjmp	.+312    	; 0x9cc <detumbling+0x1d6>
     894:	8a ed       	ldi	r24, 0xDA	; 218
     896:	a8 2e       	mov	r10, r24
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	b8 2e       	mov	r11, r24
     89c:	8e 01       	movw	r16, r28
     89e:	0f 5f       	subi	r16, 0xFF	; 255
     8a0:	1f 4f       	sbci	r17, 0xFF	; 255
     8a2:	ce 01       	movw	r24, r28
     8a4:	0d 96       	adiw	r24, 0x0d	; 13
     8a6:	4c 01       	movw	r8, r24
     8a8:	e7 e4       	ldi	r30, 0x47	; 71
     8aa:	f2 e0       	ldi	r31, 0x02	; 2
     8ac:	fa 8f       	std	Y+26, r31	; 0x1a
     8ae:	e9 8f       	std	Y+25, r30	; 0x19
     8b0:	31 2c       	mov	r3, r1
	double factor;
	uint8_t i;
	
	for(i = 0; i < 3; i++)
	{
		v_dB[i] = (v_B[i] - v_B_old[i]) / FRAME_TIME;
     8b2:	f5 01       	movw	r30, r10
     8b4:	41 90       	ld	r4, Z+
     8b6:	51 90       	ld	r5, Z+
     8b8:	61 90       	ld	r6, Z+
     8ba:	71 90       	ld	r7, Z+
     8bc:	5f 01       	movw	r10, r30
     8be:	a3 01       	movw	r20, r6
     8c0:	92 01       	movw	r18, r4
     8c2:	c7 01       	movw	r24, r14
     8c4:	b6 01       	movw	r22, r12
     8c6:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	5f e3       	ldi	r21, 0x3F	; 63
     8d2:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
     8d6:	f8 01       	movw	r30, r16
     8d8:	61 93       	st	Z+, r22
     8da:	71 93       	st	Z+, r23
     8dc:	81 93       	st	Z+, r24
     8de:	91 93       	st	Z+, r25
     8e0:	8f 01       	movw	r16, r30
		v_B_avg[i] = (v_B[i] + v_B_old[i]) / 2;
     8e2:	a7 01       	movw	r20, r14
     8e4:	96 01       	movw	r18, r12
     8e6:	c3 01       	movw	r24, r6
     8e8:	b2 01       	movw	r22, r4
     8ea:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	5f e3       	ldi	r21, 0x3F	; 63
     8f6:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
     8fa:	f4 01       	movw	r30, r8
     8fc:	61 93       	st	Z+, r22
     8fe:	71 93       	st	Z+, r23
     900:	81 93       	st	Z+, r24
     902:	91 93       	st	Z+, r25
     904:	4f 01       	movw	r8, r30
	
	vector v_B_avg, v_dB;
	double factor;
	uint8_t i;
	
	for(i = 0; i < 3; i++)
     906:	33 94       	inc	r3
     908:	f3 e0       	ldi	r31, 0x03	; 3
     90a:	3f 16       	cp	r3, r31
     90c:	49 f0       	breq	.+18     	; 0x920 <detumbling+0x12a>
     90e:	e9 8d       	ldd	r30, Y+25	; 0x19
     910:	fa 8d       	ldd	r31, Y+26	; 0x1a
     912:	c1 90       	ld	r12, Z+
     914:	d1 90       	ld	r13, Z+
     916:	e1 90       	ld	r14, Z+
     918:	f1 90       	ld	r15, Z+
     91a:	fa 8f       	std	Y+26, r31	; 0x1a
     91c:	e9 8f       	std	Y+25, r30	; 0x19
     91e:	c9 cf       	rjmp	.-110    	; 0x8b2 <detumbling+0xbc>
	{
		v_dB[i] = (v_B[i] - v_B_old[i]) / FRAME_TIME;
		v_B_avg[i] = (v_B[i] + v_B_old[i]) / 2;
	}
	
	factor = (-1 * K_DETUMBLING * MAG_B) / vector_norm(v_B_avg);                         //factor = -1 / vector_norm(v_B_avg);//??????
     920:	ce 01       	movw	r24, r28
     922:	0d 96       	adiw	r24, 0x0d	; 13
     924:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <vector_norm>
     928:	9b 01       	movw	r18, r22
     92a:	ac 01       	movw	r20, r24
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	80 e8       	ldi	r24, 0x80	; 128
     932:	9f eb       	ldi	r25, 0xBF	; 191
     934:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
     938:	6b 01       	movw	r12, r22
     93a:	7c 01       	movw	r14, r24
	
	for(i = 0; i < 3; i++)
	{
		v_m_D[i] = factor *v_dB[i];
     93c:	9b 01       	movw	r18, r22
     93e:	ac 01       	movw	r20, r24
     940:	69 81       	ldd	r22, Y+1	; 0x01
     942:	7a 81       	ldd	r23, Y+2	; 0x02
     944:	8b 81       	ldd	r24, Y+3	; 0x03
     946:	9c 81       	ldd	r25, Y+4	; 0x04
     948:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
     94c:	eb 8d       	ldd	r30, Y+27	; 0x1b
     94e:	fc 8d       	ldd	r31, Y+28	; 0x1c
     950:	60 83       	st	Z, r22
     952:	71 83       	std	Z+1, r23	; 0x01
     954:	82 83       	std	Z+2, r24	; 0x02
     956:	93 83       	std	Z+3, r25	; 0x03
     958:	a7 01       	movw	r20, r14
     95a:	96 01       	movw	r18, r12
     95c:	6d 81       	ldd	r22, Y+5	; 0x05
     95e:	7e 81       	ldd	r23, Y+6	; 0x06
     960:	8f 81       	ldd	r24, Y+7	; 0x07
     962:	98 85       	ldd	r25, Y+8	; 0x08
     964:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
     968:	eb 8d       	ldd	r30, Y+27	; 0x1b
     96a:	fc 8d       	ldd	r31, Y+28	; 0x1c
     96c:	64 83       	std	Z+4, r22	; 0x04
     96e:	75 83       	std	Z+5, r23	; 0x05
     970:	86 83       	std	Z+6, r24	; 0x06
     972:	97 83       	std	Z+7, r25	; 0x07
     974:	a7 01       	movw	r20, r14
     976:	96 01       	movw	r18, r12
     978:	69 85       	ldd	r22, Y+9	; 0x09
     97a:	7a 85       	ldd	r23, Y+10	; 0x0a
     97c:	8b 85       	ldd	r24, Y+11	; 0x0b
     97e:	9c 85       	ldd	r25, Y+12	; 0x0c
     980:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
     984:	eb 8d       	ldd	r30, Y+27	; 0x1b
     986:	fc 8d       	ldd	r31, Y+28	; 0x1c
     988:	60 87       	std	Z+8, r22	; 0x08
     98a:	71 87       	std	Z+9, r23	; 0x09
     98c:	82 87       	std	Z+10, r24	; 0x0a
     98e:	93 87       	std	Z+11, r25	; 0x0b
		
	}
	
	copy_vector(v_B, v_B_old);
     990:	6a ed       	ldi	r22, 0xDA	; 218
     992:	71 e0       	ldi	r23, 0x01	; 1
     994:	83 e4       	ldi	r24, 0x43	; 67
     996:	92 e0       	ldi	r25, 0x02	; 2
     998:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <copy_vector>
	
}
     99c:	6c 96       	adiw	r28, 0x1c	; 28
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	f8 94       	cli
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	cd bf       	out	0x3d, r28	; 61
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	ff 90       	pop	r15
     9b2:	ef 90       	pop	r14
     9b4:	df 90       	pop	r13
     9b6:	cf 90       	pop	r12
     9b8:	bf 90       	pop	r11
     9ba:	af 90       	pop	r10
     9bc:	9f 90       	pop	r9
     9be:	8f 90       	pop	r8
     9c0:	7f 90       	pop	r7
     9c2:	6f 90       	pop	r6
     9c4:	5f 90       	pop	r5
     9c6:	4f 90       	pop	r4
     9c8:	3f 90       	pop	r3
     9ca:	08 95       	ret
	 v_B[1] = Current_state.mm.B_y;
	 v_B[2] = Current_state.mm.B_z;
	if(first_B)
	{
		
		copy_vector(v_B, v_B_old);
     9cc:	6a ed       	ldi	r22, 0xDA	; 218
     9ce:	71 e0       	ldi	r23, 0x01	; 1
     9d0:	83 e4       	ldi	r24, 0x43	; 67
     9d2:	92 e0       	ldi	r25, 0x02	; 2
     9d4:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <copy_vector>
		first_B = 0;
     9d8:	10 92 0c 01 	sts	0x010C, r1
     9dc:	df cf       	rjmp	.-66     	; 0x99c <detumbling+0x1a6>

000009de <nominal>:
	 float f;
	 uint32_t l;
 } x;

void nominal(vector v_m_N)
{
     9de:	2f 92       	push	r2
     9e0:	3f 92       	push	r3
     9e2:	4f 92       	push	r4
     9e4:	5f 92       	push	r5
     9e6:	6f 92       	push	r6
     9e8:	7f 92       	push	r7
     9ea:	8f 92       	push	r8
     9ec:	9f 92       	push	r9
     9ee:	af 92       	push	r10
     9f0:	bf 92       	push	r11
     9f2:	cf 92       	push	r12
     9f4:	df 92       	push	r13
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	cd b7       	in	r28, 0x3d	; 61
     a04:	de b7       	in	r29, 0x3e	; 62
     a06:	ac 97       	sbiw	r28, 0x2c	; 44
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	cd bf       	out	0x3d, r28	; 61
     a12:	9c a7       	std	Y+44, r25	; 0x2c
     a14:	8b a7       	std	Y+43, r24	; 0x2b
  //static vector v_ieu = { 0.0, 0.0, 0.0 };
	    v_B[0] = Current_state.mm.B_x/10000;
     a16:	60 91 26 05 	lds	r22, 0x0526
     a1a:	70 91 27 05 	lds	r23, 0x0527
     a1e:	80 91 28 05 	lds	r24, 0x0528
     a22:	90 91 29 05 	lds	r25, 0x0529
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e4       	ldi	r19, 0x40	; 64
     a2a:	4c e1       	ldi	r20, 0x1C	; 28
     a2c:	56 e4       	ldi	r21, 0x46	; 70
     a2e:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
     a32:	60 93 43 02 	sts	0x0243, r22
     a36:	70 93 44 02 	sts	0x0244, r23
     a3a:	80 93 45 02 	sts	0x0245, r24
     a3e:	90 93 46 02 	sts	0x0246, r25
	    v_B[1] = Current_state.mm.B_y/10000;
     a42:	60 91 2a 05 	lds	r22, 0x052A
     a46:	70 91 2b 05 	lds	r23, 0x052B
     a4a:	80 91 2c 05 	lds	r24, 0x052C
     a4e:	90 91 2d 05 	lds	r25, 0x052D
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e4       	ldi	r19, 0x40	; 64
     a56:	4c e1       	ldi	r20, 0x1C	; 28
     a58:	56 e4       	ldi	r21, 0x46	; 70
     a5a:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
     a5e:	60 93 47 02 	sts	0x0247, r22
     a62:	70 93 48 02 	sts	0x0248, r23
     a66:	80 93 49 02 	sts	0x0249, r24
     a6a:	90 93 4a 02 	sts	0x024A, r25
	    v_B[2] = Current_state.mm.B_z/10000;
     a6e:	60 91 2e 05 	lds	r22, 0x052E
     a72:	70 91 2f 05 	lds	r23, 0x052F
     a76:	80 91 30 05 	lds	r24, 0x0530
     a7a:	90 91 31 05 	lds	r25, 0x0531
     a7e:	20 e0       	ldi	r18, 0x00	; 0
     a80:	30 e4       	ldi	r19, 0x40	; 64
     a82:	4c e1       	ldi	r20, 0x1C	; 28
     a84:	56 e4       	ldi	r21, 0x46	; 70
     a86:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
     a8a:	60 93 4b 02 	sts	0x024B, r22
     a8e:	70 93 4c 02 	sts	0x024C, r23
     a92:	80 93 4d 02 	sts	0x024D, r24
     a96:	90 93 4e 02 	sts	0x024E, r25
  vector v_eu;
  uint8_t i, j;
  float norm_B = vector_norm(v_B);
     a9a:	83 e4       	ldi	r24, 0x43	; 67
     a9c:	92 e0       	ldi	r25, 0x02	; 2
     a9e:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <vector_norm>
     aa2:	2b 01       	movw	r4, r22
     aa4:	3c 01       	movw	r6, r24
     aa6:	80 90 27 02 	lds	r8, 0x0227
     aaa:	90 90 28 02 	lds	r9, 0x0228
     aae:	a0 90 29 02 	lds	r10, 0x0229
     ab2:	b0 90 2a 02 	lds	r11, 0x022A
     ab6:	9b e1       	ldi	r25, 0x1B	; 27
     ab8:	e9 2e       	mov	r14, r25
     aba:	92 e0       	ldi	r25, 0x02	; 2
     abc:	f9 2e       	mov	r15, r25
     abe:	0b e2       	ldi	r16, 0x2B	; 43
     ac0:	12 e0       	ldi	r17, 0x02	; 2
     ac2:	ce 01       	movw	r24, r28
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	6c 01       	movw	r12, r24
    
  for(i = 0; i < 3; i++)
  {
    v_eu[i] = 2 * q_o[i] * q_o[3];
     ac8:	f7 01       	movw	r30, r14
     aca:	61 91       	ld	r22, Z+
     acc:	71 91       	ld	r23, Z+
     ace:	81 91       	ld	r24, Z+
     ad0:	91 91       	ld	r25, Z+
     ad2:	7f 01       	movw	r14, r30
     ad4:	9b 01       	movw	r18, r22
     ad6:	ac 01       	movw	r20, r24
     ad8:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
     adc:	a5 01       	movw	r20, r10
     ade:	94 01       	movw	r18, r8
     ae0:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
     ae4:	f6 01       	movw	r30, r12
     ae6:	61 93       	st	Z+, r22
     ae8:	71 93       	st	Z+, r23
     aea:	81 93       	st	Z+, r24
     aec:	91 93       	st	Z+, r25
     aee:	6f 01       	movw	r12, r30
    v_ieu[i] += v_eu[i] * FRAME_TIME;
     af0:	9b 01       	movw	r18, r22
     af2:	ac 01       	movw	r20, r24
     af4:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
     af8:	9b 01       	movw	r18, r22
     afa:	ac 01       	movw	r20, r24
     afc:	f8 01       	movw	r30, r16
     afe:	60 81       	ld	r22, Z
     b00:	71 81       	ldd	r23, Z+1	; 0x01
     b02:	82 81       	ldd	r24, Z+2	; 0x02
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
     b0a:	f8 01       	movw	r30, r16
     b0c:	61 93       	st	Z+, r22
     b0e:	71 93       	st	Z+, r23
     b10:	81 93       	st	Z+, r24
     b12:	91 93       	st	Z+, r25
     b14:	8f 01       	movw	r16, r30
	    v_B[2] = Current_state.mm.B_z/10000;
  vector v_eu;
  uint8_t i, j;
  float norm_B = vector_norm(v_B);
    
  for(i = 0; i < 3; i++)
     b16:	f7 e2       	ldi	r31, 0x27	; 39
     b18:	ef 16       	cp	r14, r31
     b1a:	f2 e0       	ldi	r31, 0x02	; 2
     b1c:	ff 06       	cpc	r15, r31
     b1e:	a1 f6       	brne	.-88     	; 0xac8 <nominal+0xea>
     b20:	a3 01       	movw	r20, r6
     b22:	92 01       	movw	r18, r4
     b24:	c3 01       	movw	r24, r6
     b26:	b2 01       	movw	r22, r4
     b28:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
     b2c:	6f a3       	std	Y+39, r22	; 0x27
     b2e:	78 a7       	std	Y+40, r23	; 0x28
     b30:	89 a7       	std	Y+41, r24	; 0x29
     b32:	9a a7       	std	Y+42, r25	; 0x2a
     b34:	86 ee       	ldi	r24, 0xE6	; 230
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	9e a3       	std	Y+38, r25	; 0x26
     b3a:	8d a3       	std	Y+37, r24	; 0x25
     b3c:	00 e0       	ldi	r16, 0x00	; 0
     b3e:	10 e0       	ldi	r17, 0x00	; 0
     b40:	18 01       	movw	r2, r16
     b42:	e7 e3       	ldi	r30, 0x37	; 55
     b44:	f2 e0       	ldi	r31, 0x02	; 2
     b46:	f8 8b       	std	Y+16, r31	; 0x10
     b48:	ef 87       	std	Y+15, r30	; 0x0f
     b4a:	c1 01       	movw	r24, r2
     b4c:	8b 5e       	subi	r24, 0xEB	; 235
     b4e:	9e 4f       	sbci	r25, 0xFE	; 254
     b50:	9e 87       	std	Y+14, r25	; 0x0e
     b52:	8d 87       	std	Y+13, r24	; 0x0d
     b54:	f1 01       	movw	r30, r2
     b56:	e7 5c       	subi	r30, 0xC7	; 199
     b58:	fe 4f       	sbci	r31, 0xFE	; 254
     b5a:	fa 8b       	std	Y+18, r31	; 0x12
     b5c:	e9 8b       	std	Y+17, r30	; 0x11
     b5e:	8b e2       	ldi	r24, 0x2B	; 43
     b60:	92 e0       	ldi	r25, 0x02	; 2
     b62:	9c 8b       	std	Y+20, r25	; 0x14
     b64:	8b 8b       	std	Y+19, r24	; 0x13
     b66:	f1 01       	movw	r30, r2
     b68:	e3 5a       	subi	r30, 0xA3	; 163
     b6a:	fe 4f       	sbci	r31, 0xFE	; 254
     b6c:	fe 8b       	std	Y+22, r31	; 0x16
     b6e:	ed 8b       	std	Y+21, r30	; 0x15
     b70:	ce 01       	movw	r24, r28
     b72:	01 96       	adiw	r24, 0x01	; 1
     b74:	98 8f       	std	Y+24, r25	; 0x18
     b76:	8f 8b       	std	Y+23, r24	; 0x17
     b78:	13 e0       	ldi	r17, 0x03	; 3
     b7a:	81 2c       	mov	r8, r1
     b7c:	91 2c       	mov	r9, r1
     b7e:	54 01       	movw	r10, r8
    
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
     b80:	ef 89       	ldd	r30, Y+23	; 0x17
     b82:	f8 8d       	ldd	r31, Y+24	; 0x18
     b84:	61 91       	ld	r22, Z+
     b86:	71 91       	ld	r23, Z+
     b88:	81 91       	ld	r24, Z+
     b8a:	91 91       	ld	r25, Z+
     b8c:	f8 8f       	std	Y+24, r31	; 0x18
     b8e:	ef 8b       	std	Y+23, r30	; 0x17
     b90:	ed 89       	ldd	r30, Y+21	; 0x15
     b92:	fe 89       	ldd	r31, Y+22	; 0x16
     b94:	21 91       	ld	r18, Z+
     b96:	31 91       	ld	r19, Z+
     b98:	41 91       	ld	r20, Z+
     b9a:	51 91       	ld	r21, Z+
     b9c:	fe 8b       	std	Y+22, r31	; 0x16
     b9e:	ed 8b       	std	Y+21, r30	; 0x15
     ba0:	eb 89       	ldd	r30, Y+19	; 0x13
     ba2:	fc 89       	ldd	r31, Y+20	; 0x14
     ba4:	c1 90       	ld	r12, Z+
     ba6:	d1 90       	ld	r13, Z+
     ba8:	e1 90       	ld	r14, Z+
     baa:	f1 90       	ld	r15, Z+
     bac:	fc 8b       	std	Y+20, r31	; 0x14
     bae:	eb 8b       	std	Y+19, r30	; 0x13
     bb0:	c9 8e       	std	Y+25, r12	; 0x19
     bb2:	da 8e       	std	Y+26, r13	; 0x1a
     bb4:	eb 8e       	std	Y+27, r14	; 0x1b
     bb6:	fc 8e       	std	Y+28, r15	; 0x1c
     bb8:	e9 89       	ldd	r30, Y+17	; 0x11
     bba:	fa 89       	ldd	r31, Y+18	; 0x12
     bbc:	41 90       	ld	r4, Z+
     bbe:	51 90       	ld	r5, Z+
     bc0:	61 90       	ld	r6, Z+
     bc2:	71 90       	ld	r7, Z+
     bc4:	fa 8b       	std	Y+18, r31	; 0x12
     bc6:	e9 8b       	std	Y+17, r30	; 0x11
     bc8:	ef 85       	ldd	r30, Y+15	; 0x0f
     bca:	f8 89       	ldd	r31, Y+16	; 0x10
     bcc:	c1 90       	ld	r12, Z+
     bce:	d1 90       	ld	r13, Z+
     bd0:	e1 90       	ld	r14, Z+
     bd2:	f1 90       	ld	r15, Z+
     bd4:	f8 8b       	std	Y+16, r31	; 0x10
     bd6:	ef 87       	std	Y+15, r30	; 0x0f
     bd8:	cd 8e       	std	Y+29, r12	; 0x1d
     bda:	de 8e       	std	Y+30, r13	; 0x1e
     bdc:	ef 8e       	std	Y+31, r14	; 0x1f
     bde:	f8 a2       	std	Y+32, r15	; 0x20
     be0:	ed 85       	ldd	r30, Y+13	; 0x0d
     be2:	fe 85       	ldd	r31, Y+14	; 0x0e
     be4:	c1 90       	ld	r12, Z+
     be6:	d1 90       	ld	r13, Z+
     be8:	e1 90       	ld	r14, Z+
     bea:	f1 90       	ld	r15, Z+
     bec:	fe 87       	std	Y+14, r31	; 0x0e
     bee:	ed 87       	std	Y+13, r30	; 0x0d
     bf0:	c9 a2       	std	Y+33, r12	; 0x21
     bf2:	da a2       	std	Y+34, r13	; 0x22
     bf4:	eb a2       	std	Y+35, r14	; 0x23
     bf6:	fc a2       	std	Y+36, r15	; 0x24
     bf8:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
     bfc:	6b 01       	movw	r12, r22
     bfe:	7c 01       	movw	r14, r24
     c00:	a3 01       	movw	r20, r6
     c02:	92 01       	movw	r18, r4
     c04:	69 8d       	ldd	r22, Y+25	; 0x19
     c06:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c08:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c0c:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
     c10:	9b 01       	movw	r18, r22
     c12:	ac 01       	movw	r20, r24
     c14:	c7 01       	movw	r24, r14
     c16:	b6 01       	movw	r22, r12
     c18:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
     c1c:	6b 01       	movw	r12, r22
     c1e:	7c 01       	movw	r14, r24
     c20:	29 a1       	ldd	r18, Y+33	; 0x21
     c22:	3a a1       	ldd	r19, Y+34	; 0x22
     c24:	4b a1       	ldd	r20, Y+35	; 0x23
     c26:	5c a1       	ldd	r21, Y+36	; 0x24
     c28:	6d 8d       	ldd	r22, Y+29	; 0x1d
     c2a:	7e 8d       	ldd	r23, Y+30	; 0x1e
     c2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c2e:	98 a1       	ldd	r25, Y+32	; 0x20
     c30:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
     c34:	9b 01       	movw	r18, r22
     c36:	ac 01       	movw	r20, r24
     c38:	c7 01       	movw	r24, r14
     c3a:	b6 01       	movw	r22, r12
     c3c:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
     c40:	9b 01       	movw	r18, r22
     c42:	ac 01       	movw	r20, r24
     c44:	c5 01       	movw	r24, r10
     c46:	b4 01       	movw	r22, r8
     c48:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
     c4c:	4b 01       	movw	r8, r22
     c4e:	5c 01       	movw	r10, r24
     c50:	11 50       	subi	r17, 0x01	; 1
  }
    
  for(i = 0; i < 3; i++)
  {
    v_m_temp[i] = 0;
    for(j = 0; j < 3; j++)
     c52:	09 f0       	breq	.+2      	; 0xc56 <nominal+0x278>
     c54:	95 cf       	rjmp	.-214    	; 0xb80 <nominal+0x1a2>
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
    v_m_temp[i] /= norm_B * norm_B;	
     c56:	2f a1       	ldd	r18, Y+39	; 0x27
     c58:	38 a5       	ldd	r19, Y+40	; 0x28
     c5a:	49 a5       	ldd	r20, Y+41	; 0x29
     c5c:	5a a5       	ldd	r21, Y+42	; 0x2a
     c5e:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
     c62:	ed a1       	ldd	r30, Y+37	; 0x25
     c64:	fe a1       	ldd	r31, Y+38	; 0x26
     c66:	61 93       	st	Z+, r22
     c68:	71 93       	st	Z+, r23
     c6a:	81 93       	st	Z+, r24
     c6c:	91 93       	st	Z+, r25
     c6e:	fe a3       	std	Y+38, r31	; 0x26
     c70:	ed a3       	std	Y+37, r30	; 0x25
     c72:	fc e0       	ldi	r31, 0x0C	; 12
     c74:	2f 0e       	add	r2, r31
     c76:	31 1c       	adc	r3, r1
  {
    v_eu[i] = 2 * q_o[i] * q_o[3];
    v_ieu[i] += v_eu[i] * FRAME_TIME;
  }
    
  for(i = 0; i < 3; i++)
     c78:	84 e2       	ldi	r24, 0x24	; 36
     c7a:	28 16       	cp	r2, r24
     c7c:	31 04       	cpc	r3, r1
     c7e:	09 f0       	breq	.+2      	; 0xc82 <nominal+0x2a4>
     c80:	60 cf       	rjmp	.-320    	; 0xb42 <nominal+0x164>
    for(j = 0; j < 3; j++)
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
    v_m_temp[i] /= norm_B * norm_B;	
  }
    
  vector_cross_product(v_m_temp, v_B, v_m_N);
     c82:	4b a5       	ldd	r20, Y+43	; 0x2b
     c84:	5c a5       	ldd	r21, Y+44	; 0x2c
     c86:	63 e4       	ldi	r22, 0x43	; 67
     c88:	72 e0       	ldi	r23, 0x02	; 2
     c8a:	86 ee       	ldi	r24, 0xE6	; 230
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <vector_cross_product>
  scalar_into_vector(v_m_N, light);//scalar_into_vector(v_m_N, light);//values are very small as compared to matlab check
     c92:	60 91 1a 02 	lds	r22, 0x021A
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	0e 94 0d 2c 	call	0x581a	; 0x581a <__floatunsisf>
     ca0:	ab 01       	movw	r20, r22
     ca2:	bc 01       	movw	r22, r24
     ca4:	8b a5       	ldd	r24, Y+43	; 0x2b
     ca6:	9c a5       	ldd	r25, Y+44	; 0x2c
	   sen1 = (int8_t)(st>>8);
	   transmit_UART0(sen);
	   transmit_UART0(sen1);
   }*/
   
}
     ca8:	ac 96       	adiw	r28, 0x2c	; 44
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	df 90       	pop	r13
     cc2:	cf 90       	pop	r12
     cc4:	bf 90       	pop	r11
     cc6:	af 90       	pop	r10
     cc8:	9f 90       	pop	r9
     cca:	8f 90       	pop	r8
     ccc:	7f 90       	pop	r7
     cce:	6f 90       	pop	r6
     cd0:	5f 90       	pop	r5
     cd2:	4f 90       	pop	r4
     cd4:	3f 90       	pop	r3
     cd6:	2f 90       	pop	r2
      v_m_temp[i] += v_eu[j] * m_Kp[i][j] + v_ieu[j] * m_Ki[i][j] + v_w[j] * m_Kd[i][j];
    v_m_temp[i] /= norm_B * norm_B;	
  }
    
  vector_cross_product(v_m_temp, v_B, v_m_N);
  scalar_into_vector(v_m_N, light);//scalar_into_vector(v_m_N, light);//values are very small as compared to matlab check
     cd8:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <scalar_into_vector>

00000cdc <apply_torque>:
   }*/
   
}

void apply_torque(vector v_m)
{
     cdc:	3f 92       	push	r3
     cde:	4f 92       	push	r4
     ce0:	5f 92       	push	r5
     ce2:	6f 92       	push	r6
     ce4:	7f 92       	push	r7
     ce6:	8f 92       	push	r8
     ce8:	9f 92       	push	r9
     cea:	af 92       	push	r10
     cec:	bf 92       	push	r11
     cee:	cf 92       	push	r12
     cf0:	df 92       	push	r13
     cf2:	ef 92       	push	r14
     cf4:	ff 92       	push	r15
     cf6:	0f 93       	push	r16
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	00 d0       	rcall	.+0      	; 0xd00 <apply_torque+0x24>
     d00:	1f 92       	push	r1
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	8c 01       	movw	r16, r24
     d08:	9b 83       	std	Y+3, r25	; 0x03
     d0a:	8a 83       	std	Y+2, r24	; 0x02
		sen = (v_m[i]*255);
		transmit_UART0(sen);
	}*/
    
	
	for(i = 0; i < 3; i++)
     d0c:	31 2c       	mov	r3, r1
	{
		if(fabs(v_m[i]) > M_MAX)
		{
			if (fabs(v_m[i])/v_m[i] == -1)
			v_m[i] = -1*M_MAX;
     d0e:	23 e3       	ldi	r18, 0x33	; 51
     d10:	42 2e       	mov	r4, r18
     d12:	54 2c       	mov	r5, r4
     d14:	23 e7       	ldi	r18, 0x73	; 115
     d16:	62 2e       	mov	r6, r18
     d18:	2f eb       	ldi	r18, 0xBF	; 191
     d1a:	72 2e       	mov	r7, r18
	}*/
    
	
	for(i = 0; i < 3; i++)
	{
		if(fabs(v_m[i]) > M_MAX)
     d1c:	ea 81       	ldd	r30, Y+2	; 0x02
     d1e:	fb 81       	ldd	r31, Y+3	; 0x03
     d20:	80 80       	ld	r8, Z
     d22:	91 80       	ldd	r9, Z+1	; 0x01
     d24:	a2 80       	ldd	r10, Z+2	; 0x02
     d26:	b3 80       	ldd	r11, Z+3	; 0x03
     d28:	75 01       	movw	r14, r10
     d2a:	64 01       	movw	r12, r8
     d2c:	e8 94       	clt
     d2e:	f7 f8       	bld	r15, 7
     d30:	23 e3       	ldi	r18, 0x33	; 51
     d32:	33 e3       	ldi	r19, 0x33	; 51
     d34:	43 e7       	ldi	r20, 0x73	; 115
     d36:	5f e3       	ldi	r21, 0x3F	; 63
     d38:	c7 01       	movw	r24, r14
     d3a:	b6 01       	movw	r22, r12
     d3c:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__gesf2>
     d40:	18 16       	cp	r1, r24
     d42:	a4 f4       	brge	.+40     	; 0xd6c <apply_torque+0x90>
		{
			if (fabs(v_m[i])/v_m[i] == -1)
     d44:	a5 01       	movw	r20, r10
     d46:	94 01       	movw	r18, r8
     d48:	c7 01       	movw	r24, r14
     d4a:	b6 01       	movw	r22, r12
     d4c:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	40 e8       	ldi	r20, 0x80	; 128
     d56:	5f eb       	ldi	r21, 0xBF	; 191
     d58:	0e 94 6d 2b 	call	0x56da	; 0x56da <__cmpsf2>
     d5c:	81 11       	cpse	r24, r1
     d5e:	0d c1       	rjmp	.+538    	; 0xf7a <apply_torque+0x29e>
			v_m[i] = -1*M_MAX;
     d60:	ea 81       	ldd	r30, Y+2	; 0x02
     d62:	fb 81       	ldd	r31, Y+3	; 0x03
     d64:	40 82       	st	Z, r4
     d66:	51 82       	std	Z+1, r5	; 0x01
     d68:	62 82       	std	Z+2, r6	; 0x02
     d6a:	73 82       	std	Z+3, r7	; 0x03
		sen = (v_m[i]*255);
		transmit_UART0(sen);
	}*/
    
	
	for(i = 0; i < 3; i++)
     d6c:	33 94       	inc	r3
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	9b 81       	ldd	r25, Y+3	; 0x03
     d72:	04 96       	adiw	r24, 0x04	; 4
     d74:	9b 83       	std	Y+3, r25	; 0x03
     d76:	8a 83       	std	Y+2, r24	; 0x02
     d78:	93 e0       	ldi	r25, 0x03	; 3
     d7a:	39 12       	cpse	r3, r25
     d7c:	cf cf       	rjmp	.-98     	; 0xd1c <apply_torque+0x40>
		
	}
	
	
	
	scalar_into_vector(v_m, 1.0 / (N_TURNS * AREA));  // nturns should be 60
     d7e:	40 ee       	ldi	r20, 0xE0	; 224
     d80:	5b ec       	ldi	r21, 0xCB	; 203
     d82:	60 e1       	ldi	r22, 0x10	; 16
     d84:	7f e3       	ldi	r23, 0x3F	; 63
     d86:	c8 01       	movw	r24, r16
     d88:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <scalar_into_vector>
     d8c:	28 01       	movw	r4, r16
	
	
	for(i = 0; i < 3; i++)
     d8e:	71 2c       	mov	r7, r1
	{
		if(fabs(v_m[i]) > I_MAX)
     d90:	f2 01       	movw	r30, r4
     d92:	80 80       	ld	r8, Z
     d94:	91 80       	ldd	r9, Z+1	; 0x01
     d96:	a2 80       	ldd	r10, Z+2	; 0x02
     d98:	b3 80       	ldd	r11, Z+3	; 0x03
     d9a:	75 01       	movw	r14, r10
     d9c:	64 01       	movw	r12, r8
     d9e:	e8 94       	clt
     da0:	f7 f8       	bld	r15, 7
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	40 e8       	ldi	r20, 0x80	; 128
     da8:	5f e3       	ldi	r21, 0x3F	; 63
     daa:	c7 01       	movw	r24, r14
     dac:	b6 01       	movw	r22, r12
     dae:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__gesf2>
     db2:	18 16       	cp	r1, r24
     db4:	bc f4       	brge	.+46     	; 0xde4 <apply_torque+0x108>
		{
			if (fabs(v_m[i])/v_m[i] == -1)
     db6:	a5 01       	movw	r20, r10
     db8:	94 01       	movw	r18, r8
     dba:	c7 01       	movw	r24, r14
     dbc:	b6 01       	movw	r22, r12
     dbe:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e8       	ldi	r20, 0x80	; 128
     dc8:	5f eb       	ldi	r21, 0xBF	; 191
     dca:	0e 94 6d 2b 	call	0x56da	; 0x56da <__cmpsf2>
     dce:	81 11       	cpse	r24, r1
     dd0:	ca c0       	rjmp	.+404    	; 0xf66 <apply_torque+0x28a>
			v_m[i] = -1*I_MAX;
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e8       	ldi	r26, 0x80	; 128
     dd8:	bf eb       	ldi	r27, 0xBF	; 191
     dda:	f2 01       	movw	r30, r4
     ddc:	80 83       	st	Z, r24
     dde:	91 83       	std	Z+1, r25	; 0x01
     de0:	a2 83       	std	Z+2, r26	; 0x02
     de2:	b3 83       	std	Z+3, r27	; 0x03
	
	
	scalar_into_vector(v_m, 1.0 / (N_TURNS * AREA));  // nturns should be 60
	
	
	for(i = 0; i < 3; i++)
     de4:	73 94       	inc	r7
     de6:	f4 e0       	ldi	r31, 0x04	; 4
     de8:	4f 0e       	add	r4, r31
     dea:	51 1c       	adc	r5, r1
     dec:	83 e0       	ldi	r24, 0x03	; 3
     dee:	78 12       	cpse	r7, r24
     df0:	cf cf       	rjmp	.-98     	; 0xd90 <apply_torque+0xb4>
     df2:	78 01       	movw	r14, r16
     df4:	a1 2c       	mov	r10, r1
     df6:	b1 2c       	mov	r11, r1
	 uint8_t buf0,buf1,buf2,buf3;
	 
	for (int i=0;i<3;i=i+1)
	{
		//sen = ((int8_t)((lambda))/2);
		st =(int32_t)(v_m[i]*65535000);
     df8:	f7 01       	movw	r30, r14
     dfa:	61 91       	ld	r22, Z+
     dfc:	71 91       	ld	r23, Z+
     dfe:	81 91       	ld	r24, Z+
     e00:	91 91       	ld	r25, Z+
     e02:	7f 01       	movw	r14, r30
     e04:	26 e0       	ldi	r18, 0x06	; 6
     e06:	3f ef       	ldi	r19, 0xFF	; 255
     e08:	49 e7       	ldi	r20, 0x79	; 121
     e0a:	5c e4       	ldi	r21, 0x4C	; 76
     e0c:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
     e10:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <__fixsfsi>
     e14:	6c 01       	movw	r12, r24
		sen = (int8_t)st;
		sen1 = (int8_t)(st>>8);
		sen2 = (int8_t)(st>>16);
		sen3 = (int8_t)(st>>24);
		transmit_UART0(sen);
     e16:	86 2f       	mov	r24, r22
     e18:	99 27       	eor	r25, r25
     e1a:	87 fd       	sbrc	r24, 7
     e1c:	90 95       	com	r25
     e1e:	79 83       	std	Y+1, r23	; 0x01
     e20:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <transmit_UART0>
		transmit_UART0(sen1);
     e24:	79 81       	ldd	r23, Y+1	; 0x01
     e26:	87 2f       	mov	r24, r23
     e28:	99 27       	eor	r25, r25
     e2a:	87 fd       	sbrc	r24, 7
     e2c:	90 95       	com	r25
     e2e:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <transmit_UART0>
		transmit_UART0(sen2);
     e32:	8c 2d       	mov	r24, r12
     e34:	99 27       	eor	r25, r25
     e36:	87 fd       	sbrc	r24, 7
     e38:	90 95       	com	r25
     e3a:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <transmit_UART0>
		transmit_UART0(sen3);
     e3e:	8d 2d       	mov	r24, r13
     e40:	99 27       	eor	r25, r25
     e42:	87 fd       	sbrc	r24, 7
     e44:	90 95       	com	r25
     e46:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <transmit_UART0>
	int8_t sen,sen1,sen2,sen3;
	int32_t st;
	// x.f=3.145689123;
	 uint8_t buf0,buf1,buf2,buf3;
	 
	for (int i=0;i<3;i=i+1)
     e4a:	ff ef       	ldi	r31, 0xFF	; 255
     e4c:	af 1a       	sub	r10, r31
     e4e:	bf 0a       	sbc	r11, r31
     e50:	83 e0       	ldi	r24, 0x03	; 3
     e52:	a8 16       	cp	r10, r24
     e54:	b1 04       	cpc	r11, r1
     e56:	81 f6       	brne	.-96     	; 0xdf8 <apply_torque+0x11c>
	transmit_UART0(buf3);*/	
	}
	
	
	sen = Mode;
	transmit_UART0(sen);
     e58:	80 91 12 01 	lds	r24, 0x0112
     e5c:	99 27       	eor	r25, r25
     e5e:	87 fd       	sbrc	r24, 7
     e60:	90 95       	com	r25
     e62:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <transmit_UART0>
	sen = gps_power;
	transmit_UART0(sen);
     e66:	80 91 f6 01 	lds	r24, 0x01F6
     e6a:	99 27       	eor	r25, r25
     e6c:	87 fd       	sbrc	r24, 7
     e6e:	90 95       	com	r25
     e70:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <transmit_UART0>
//Current_state.pwm.x = abs(v_m[0]*65535); //fabs((v_m_D[0] * PWM_RES) / I_MAX)+10000;
// int16_t x1 = Current_state.pwm.x/100;
// if (x1 == 0)
//     Current_state.pwm.x = Current_state.pwm.x + 100;
//if(v_m[0]>=0)
Current_state.pwm.x=v_m[0]*65535;
     e74:	f8 01       	movw	r30, r16
     e76:	c0 80       	ld	r12, Z
     e78:	d1 80       	ldd	r13, Z+1	; 0x01
     e7a:	e2 80       	ldd	r14, Z+2	; 0x02
     e7c:	f3 80       	ldd	r15, Z+3	; 0x03
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	3f ef       	ldi	r19, 0xFF	; 255
     e82:	4f e7       	ldi	r20, 0x7F	; 127
     e84:	57 e4       	ldi	r21, 0x47	; 71
     e86:	c7 01       	movw	r24, r14
     e88:	b6 01       	movw	r22, r12
     e8a:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
     e8e:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <__fixunssfsi>
     e92:	70 93 3a 05 	sts	0x053A, r23
     e96:	60 93 39 05 	sts	0x0539, r22
	else
	sen= 0xf0;   //v_r_ecef[i]
	transmit_UART0(sen);
}*/

Current_state.pwm.y = abs(v_m[1]*65535); //fabs((v_m_D[1] * PWM_RES) / I_MAX)+10000;
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	3f ef       	ldi	r19, 0xFF	; 255
     e9e:	4f e7       	ldi	r20, 0x7F	; 127
     ea0:	57 e4       	ldi	r21, 0x47	; 71
     ea2:	f8 01       	movw	r30, r16
     ea4:	64 81       	ldd	r22, Z+4	; 0x04
     ea6:	75 81       	ldd	r23, Z+5	; 0x05
     ea8:	86 81       	ldd	r24, Z+6	; 0x06
     eaa:	97 81       	ldd	r25, Z+7	; 0x07
     eac:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
     eb0:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <__fixsfsi>
     eb4:	9b 01       	movw	r18, r22
     eb6:	77 fd       	sbrc	r23, 7
     eb8:	78 c0       	rjmp	.+240    	; 0xfaa <apply_torque+0x2ce>
     eba:	30 93 3c 05 	sts	0x053C, r19
     ebe:	20 93 3b 05 	sts	0x053B, r18
// x1 = Current_state.pwm.y/100;
// if (x1 == 0)
//     Current_state.pwm.y = Current_state.pwm.y + 100;

Current_state.pwm.z = abs(v_m[2]*65535); //fabs((v_m_D[2] * PWM_RES) / I_MAX)+10000;
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	3f ef       	ldi	r19, 0xFF	; 255
     ec6:	4f e7       	ldi	r20, 0x7F	; 127
     ec8:	57 e4       	ldi	r21, 0x47	; 71
     eca:	f8 01       	movw	r30, r16
     ecc:	60 85       	ldd	r22, Z+8	; 0x08
     ece:	71 85       	ldd	r23, Z+9	; 0x09
     ed0:	82 85       	ldd	r24, Z+10	; 0x0a
     ed2:	93 85       	ldd	r25, Z+11	; 0x0b
     ed4:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
     ed8:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <__fixsfsi>
     edc:	9b 01       	movw	r18, r22
     ede:	77 fd       	sbrc	r23, 7
     ee0:	5f c0       	rjmp	.+190    	; 0xfa0 <apply_torque+0x2c4>
     ee2:	30 93 3e 05 	sts	0x053E, r19
     ee6:	20 93 3d 05 	sts	0x053D, r18
// x1 = Current_state.pwm.z/100;
// if (x1 == 0)
//     Current_state.pwm.z = Current_state.pwm.z + 100;

if(v_m[0] < 0)
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	a9 01       	movw	r20, r18
     ef0:	c7 01       	movw	r24, r14
     ef2:	b6 01       	movw	r22, r12
     ef4:	0e 94 6d 2b 	call	0x56da	; 0x56da <__cmpsf2>
     ef8:	87 fd       	sbrc	r24, 7
     efa:	4a c0       	rjmp	.+148    	; 0xf90 <apply_torque+0x2b4>
Current_state.pwm.x_dir = 1;
else
Current_state.pwm.x_dir = 0;
     efc:	10 92 3f 05 	sts	0x053F, r1

if(v_m[1] < 0)
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	a9 01       	movw	r20, r18
     f06:	f8 01       	movw	r30, r16
     f08:	64 81       	ldd	r22, Z+4	; 0x04
     f0a:	75 81       	ldd	r23, Z+5	; 0x05
     f0c:	86 81       	ldd	r24, Z+6	; 0x06
     f0e:	97 81       	ldd	r25, Z+7	; 0x07
     f10:	0e 94 6d 2b 	call	0x56da	; 0x56da <__cmpsf2>
     f14:	87 fd       	sbrc	r24, 7
     f16:	40 c0       	rjmp	.+128    	; 0xf98 <apply_torque+0x2bc>
Current_state.pwm.y_dir = 1;
else
Current_state.pwm.y_dir = 0;
     f18:	10 92 40 05 	sts	0x0540, r1

if(v_m[2] < 0)
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	a9 01       	movw	r20, r18
     f22:	f8 01       	movw	r30, r16
     f24:	60 85       	ldd	r22, Z+8	; 0x08
     f26:	71 85       	ldd	r23, Z+9	; 0x09
     f28:	82 85       	ldd	r24, Z+10	; 0x0a
     f2a:	93 85       	ldd	r25, Z+11	; 0x0b
     f2c:	0e 94 6d 2b 	call	0x56da	; 0x56da <__cmpsf2>
     f30:	87 fd       	sbrc	r24, 7
     f32:	40 c0       	rjmp	.+128    	; 0xfb4 <apply_torque+0x2d8>
Current_state.pwm.z_dir = 1;
else
Current_state.pwm.z_dir = 0;
     f34:	10 92 41 05 	sts	0x0541, r1
PORTA=0xA0;
     f38:	80 ea       	ldi	r24, 0xA0	; 160
     f3a:	8b bb       	out	0x1b, r24	; 27
}
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	df 90       	pop	r13
     f50:	cf 90       	pop	r12
     f52:	bf 90       	pop	r11
     f54:	af 90       	pop	r10
     f56:	9f 90       	pop	r9
     f58:	8f 90       	pop	r8
     f5a:	7f 90       	pop	r7
     f5c:	6f 90       	pop	r6
     f5e:	5f 90       	pop	r5
     f60:	4f 90       	pop	r4
     f62:	3f 90       	pop	r3
     f64:	08 95       	ret
		if(fabs(v_m[i]) > I_MAX)
		{
			if (fabs(v_m[i])/v_m[i] == -1)
			v_m[i] = -1*I_MAX;
			else
			v_m[i] = I_MAX;
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	a0 e8       	ldi	r26, 0x80	; 128
     f6c:	bf e3       	ldi	r27, 0x3F	; 63
     f6e:	f2 01       	movw	r30, r4
     f70:	80 83       	st	Z, r24
     f72:	91 83       	std	Z+1, r25	; 0x01
     f74:	a2 83       	std	Z+2, r26	; 0x02
     f76:	b3 83       	std	Z+3, r27	; 0x03
     f78:	35 cf       	rjmp	.-406    	; 0xde4 <apply_torque+0x108>
		if(fabs(v_m[i]) > M_MAX)
		{
			if (fabs(v_m[i])/v_m[i] == -1)
			v_m[i] = -1*M_MAX;
			else
			v_m[i] = M_MAX;
     f7a:	83 e3       	ldi	r24, 0x33	; 51
     f7c:	93 e3       	ldi	r25, 0x33	; 51
     f7e:	a3 e7       	ldi	r26, 0x73	; 115
     f80:	bf e3       	ldi	r27, 0x3F	; 63
     f82:	ea 81       	ldd	r30, Y+2	; 0x02
     f84:	fb 81       	ldd	r31, Y+3	; 0x03
     f86:	80 83       	st	Z, r24
     f88:	91 83       	std	Z+1, r25	; 0x01
     f8a:	a2 83       	std	Z+2, r26	; 0x02
     f8c:	b3 83       	std	Z+3, r27	; 0x03
     f8e:	ee ce       	rjmp	.-548    	; 0xd6c <apply_torque+0x90>
// x1 = Current_state.pwm.z/100;
// if (x1 == 0)
//     Current_state.pwm.z = Current_state.pwm.z + 100;

if(v_m[0] < 0)
Current_state.pwm.x_dir = 1;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	80 93 3f 05 	sts	0x053F, r24
     f96:	b4 cf       	rjmp	.-152    	; 0xf00 <apply_torque+0x224>
else
Current_state.pwm.x_dir = 0;

if(v_m[1] < 0)
Current_state.pwm.y_dir = 1;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	80 93 40 05 	sts	0x0540, r24
     f9e:	be cf       	rjmp	.-132    	; 0xf1c <apply_torque+0x240>
Current_state.pwm.y = abs(v_m[1]*65535); //fabs((v_m_D[1] * PWM_RES) / I_MAX)+10000;
// x1 = Current_state.pwm.y/100;
// if (x1 == 0)
//     Current_state.pwm.y = Current_state.pwm.y + 100;

Current_state.pwm.z = abs(v_m[2]*65535); //fabs((v_m_D[2] * PWM_RES) / I_MAX)+10000;
     fa0:	22 27       	eor	r18, r18
     fa2:	33 27       	eor	r19, r19
     fa4:	26 1b       	sub	r18, r22
     fa6:	37 0b       	sbc	r19, r23
     fa8:	9c cf       	rjmp	.-200    	; 0xee2 <apply_torque+0x206>
	else
	sen= 0xf0;   //v_r_ecef[i]
	transmit_UART0(sen);
}*/

Current_state.pwm.y = abs(v_m[1]*65535); //fabs((v_m_D[1] * PWM_RES) / I_MAX)+10000;
     faa:	22 27       	eor	r18, r18
     fac:	33 27       	eor	r19, r19
     fae:	26 1b       	sub	r18, r22
     fb0:	37 0b       	sbc	r19, r23
     fb2:	83 cf       	rjmp	.-250    	; 0xeba <apply_torque+0x1de>
Current_state.pwm.y_dir = 1;
else
Current_state.pwm.y_dir = 0;

if(v_m[2] < 0)
Current_state.pwm.z_dir = 1;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	80 93 41 05 	sts	0x0541, r24
     fba:	be cf       	rjmp	.-132    	; 0xf38 <apply_torque+0x25c>

00000fbc <control>:
    Current_state.pwm.y_dir = 1;
  if(v_m[2] < 0)
    Current_state.pwm.z_dir = 1;
}
*/
void control(void){
     fbc:	2f 92       	push	r2
     fbe:	3f 92       	push	r3
     fc0:	4f 92       	push	r4
     fc2:	5f 92       	push	r5
     fc4:	6f 92       	push	r6
     fc6:	7f 92       	push	r7
     fc8:	8f 92       	push	r8
     fca:	9f 92       	push	r9
     fcc:	af 92       	push	r10
     fce:	bf 92       	push	r11
     fd0:	cf 92       	push	r12
     fd2:	df 92       	push	r13
     fd4:	ef 92       	push	r14
     fd6:	ff 92       	push	r15
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	e0 97       	sbiw	r28, 0x30	; 48
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	cd bf       	out	0x3d, r28	; 61
  /// Take B readings from Magnetometer, clear torquer first
  //reset_PWM();
  
  //_delay_us(100);
  
  read_MM();
     ff0:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <read_MM>
  detumbling(v_m_D);
     ff4:	ce 01       	movw	r24, r28
     ff6:	85 96       	adiw	r24, 0x25	; 37
     ff8:	fe db       	rcall	.-2052   	; 0x7f6 <detumbling>
  ///Set the torquer values calculated in the last frame
  //set_PWM();
  uint8_t c1,c2,d;
  c1= (uint8_t)Current_state.pwm.x;
     ffa:	80 91 39 05 	lds	r24, 0x0539
     ffe:	90 91 3a 05 	lds	r25, 0x053A
  c2= (uint8_t)((Current_state.pwm.x)>>8);
    1002:	e0 90 39 05 	lds	r14, 0x0539
    1006:	f0 90 3a 05 	lds	r15, 0x053A
  d= Current_state.pwm.x_dir;
    100a:	10 91 3f 05 	lds	r17, 0x053F
  transmit_UART0(c1);
    100e:	99 27       	eor	r25, r25
    1010:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <transmit_UART0>
  transmit_UART0(c2);
    1014:	8f 2d       	mov	r24, r15
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <transmit_UART0>
  transmit_UART0(d);
    101c:	81 2f       	mov	r24, r17
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <transmit_UART0>
  
  c1= (uint8_t)Current_state.pwm.y;
    1024:	80 91 3b 05 	lds	r24, 0x053B
    1028:	90 91 3c 05 	lds	r25, 0x053C
  c2= (uint8_t)((Current_state.pwm.y)>>8);
    102c:	e0 90 3b 05 	lds	r14, 0x053B
    1030:	f0 90 3c 05 	lds	r15, 0x053C
  d= Current_state.pwm.y_dir;
    1034:	10 91 40 05 	lds	r17, 0x0540
  transmit_UART0(c1);
    1038:	99 27       	eor	r25, r25
    103a:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <transmit_UART0>
  transmit_UART0(c2);
    103e:	8f 2d       	mov	r24, r15
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <transmit_UART0>
  transmit_UART0(d);
    1046:	81 2f       	mov	r24, r17
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <transmit_UART0>
  
  c1= (uint8_t)Current_state.pwm.z;
    104e:	80 91 3d 05 	lds	r24, 0x053D
    1052:	90 91 3e 05 	lds	r25, 0x053E
  c2= (uint8_t)((Current_state.pwm.z)>>8);
    1056:	e0 90 3d 05 	lds	r14, 0x053D
    105a:	f0 90 3e 05 	lds	r15, 0x053E
  d= Current_state.pwm.z_dir;
    105e:	10 91 41 05 	lds	r17, 0x0541
  transmit_UART0(c1);
    1062:	99 27       	eor	r25, r25
    1064:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <transmit_UART0>
  transmit_UART0(c2);
    1068:	8f 2d       	mov	r24, r15
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <transmit_UART0>
  transmit_UART0(d);
    1070:	81 2f       	mov	r24, r17
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <transmit_UART0>
  
  v_B[0] = Current_state.mm.B_x;
    1078:	80 91 26 05 	lds	r24, 0x0526
    107c:	90 91 27 05 	lds	r25, 0x0527
    1080:	a0 91 28 05 	lds	r26, 0x0528
    1084:	b0 91 29 05 	lds	r27, 0x0529
    1088:	80 93 43 02 	sts	0x0243, r24
    108c:	90 93 44 02 	sts	0x0244, r25
    1090:	a0 93 45 02 	sts	0x0245, r26
    1094:	b0 93 46 02 	sts	0x0246, r27
  v_B[1] = Current_state.mm.B_y;
    1098:	80 91 2a 05 	lds	r24, 0x052A
    109c:	90 91 2b 05 	lds	r25, 0x052B
    10a0:	a0 91 2c 05 	lds	r26, 0x052C
    10a4:	b0 91 2d 05 	lds	r27, 0x052D
    10a8:	80 93 47 02 	sts	0x0247, r24
    10ac:	90 93 48 02 	sts	0x0248, r25
    10b0:	a0 93 49 02 	sts	0x0249, r26
    10b4:	b0 93 4a 02 	sts	0x024A, r27
  v_B[2] = Current_state.mm.B_z;
    10b8:	80 91 2e 05 	lds	r24, 0x052E
    10bc:	90 91 2f 05 	lds	r25, 0x052F
    10c0:	a0 91 30 05 	lds	r26, 0x0530
    10c4:	b0 91 31 05 	lds	r27, 0x0531
    10c8:	80 93 4b 02 	sts	0x024B, r24
    10cc:	90 93 4c 02 	sts	0x024C, r25
    10d0:	a0 93 4d 02 	sts	0x024D, r26
    10d4:	b0 93 4e 02 	sts	0x024E, r27
  
  //if(((GPS_done == 0) && (Time % 600 == 0)) || ((GPS_done < 0) && (!first_B) && (vector_norm(v_m_D) < 2 )))
    ///* Switch on the GPS First
	//if((gps_power) == 2)
	//{
		if (gps_power==2)
    10d8:	80 91 f6 01 	lds	r24, 0x01F6
    10dc:	90 91 f7 01 	lds	r25, 0x01F7
    10e0:	02 97       	sbiw	r24, 0x02	; 2
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <control+0x12a>
    10e4:	b5 c2       	rjmp	.+1386   	; 0x1650 <__stack+0x551>
  
  /// Check if in Nominal or Detumbling Mode
  //if(GPS_done >= 0)
  //{
	   
    if(GPS_done == 1)
    10e6:	80 91 13 01 	lds	r24, 0x0113
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <control+0x134>
    10ee:	bd c2       	rjmp	.+1402   	; 0x166a <__stack+0x56b>
      copy_gps_reading();  //check
	  else
	  {
	  seconds_since_equinox += FRAME_TIME; //  ??jaroori hai ye plz dont delete??
    10f0:	20 91 cb 04 	lds	r18, 0x04CB
    10f4:	30 91 cc 04 	lds	r19, 0x04CC
    10f8:	40 91 cd 04 	lds	r20, 0x04CD
    10fc:	50 91 ce 04 	lds	r21, 0x04CE
    1100:	60 91 cf 04 	lds	r22, 0x04CF
    1104:	70 91 d0 04 	lds	r23, 0x04D0
    1108:	80 91 d1 04 	lds	r24, 0x04D1
    110c:	90 91 d2 04 	lds	r25, 0x04D2
    1110:	a2 e0       	ldi	r26, 0x02	; 2
    1112:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <__adddi3_s8>
    1116:	20 93 cb 04 	sts	0x04CB, r18
    111a:	30 93 cc 04 	sts	0x04CC, r19
    111e:	40 93 cd 04 	sts	0x04CD, r20
    1122:	50 93 ce 04 	sts	0x04CE, r21
    1126:	60 93 cf 04 	sts	0x04CF, r22
    112a:	70 93 d0 04 	sts	0x04D0, r23
    112e:	80 93 d1 04 	sts	0x04D1, r24
    1132:	90 93 d2 04 	sts	0x04D2, r25
	  seconds_since_pivot += FRAME_TIME;
    1136:	20 91 c3 04 	lds	r18, 0x04C3
    113a:	30 91 c4 04 	lds	r19, 0x04C4
    113e:	40 91 c5 04 	lds	r20, 0x04C5
    1142:	50 91 c6 04 	lds	r21, 0x04C6
    1146:	60 91 c7 04 	lds	r22, 0x04C7
    114a:	70 91 c8 04 	lds	r23, 0x04C8
    114e:	80 91 c9 04 	lds	r24, 0x04C9
    1152:	90 91 ca 04 	lds	r25, 0x04CA
    1156:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <__adddi3_s8>
    115a:	20 93 c3 04 	sts	0x04C3, r18
    115e:	30 93 c4 04 	sts	0x04C4, r19
    1162:	40 93 c5 04 	sts	0x04C5, r20
    1166:	50 93 c6 04 	sts	0x04C6, r21
    116a:	60 93 c7 04 	sts	0x04C7, r22
    116e:	70 93 c8 04 	sts	0x04C8, r23
    1172:	80 93 c9 04 	sts	0x04C9, r24
    1176:	90 93 ca 04 	sts	0x04CA, r25
	 // Current_state.gps.time_since_reading += FRAME_TIME;
	  }
    uint8_t e=100;
    transmit_UART0(e);
    117a:	84 e6       	ldi	r24, 0x64	; 100
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <transmit_UART0>
    read_SS();
    1182:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <read_SS>
		sen = (int8_t)st;
		sen1 = (int8_t)(st>>8);
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
	light = light_cal();
    1186:	0e 94 b8 23 	call	0x4770	; 0x4770 <light_cal>
    118a:	80 93 1a 02 	sts	0x021A, r24
	if(GPS_done != 255)
    118e:	80 91 13 01 	lds	r24, 0x0113
    1192:	8f 3f       	cpi	r24, 0xFF	; 255
    1194:	09 f4       	brne	.+2      	; 0x1198 <__stack+0x99>
    1196:	20 c1       	rjmp	.+576    	; 0x13d8 <__stack+0x2d9>
	{
		
    sgp_orbit_propagator();
    1198:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <sgp_orbit_propagator>
	
    sun_vector_estimator(v_sun_o);
    119c:	ce 01       	movw	r24, r28
    119e:	0d 96       	adiw	r24, 0x0d	; 13
    11a0:	0e 94 72 22 	call	0x44e4	; 0x44e4 <sun_vector_estimator>
	
    magnetic_field_estimator(v_B_o);
    11a4:	ce 01       	movw	r24, r28
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	0e 94 3e 23 	call	0x467c	; 0x467c <magnetic_field_estimator>

	
	
    light = quest(v_B_o, v_sun_o, q_o, &w_ctrl); // to be checked
    11ac:	29 e1       	ldi	r18, 0x19	; 25
    11ae:	32 e0       	ldi	r19, 0x02	; 2
    11b0:	4b e1       	ldi	r20, 0x1B	; 27
    11b2:	52 e0       	ldi	r21, 0x02	; 2
    11b4:	be 01       	movw	r22, r28
    11b6:	63 5f       	subi	r22, 0xF3	; 243
    11b8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ba:	ce 01       	movw	r24, r28
    11bc:	01 96       	adiw	r24, 0x01	; 1
    11be:	0e 94 d9 23 	call	0x47b2	; 0x47b2 <quest>
    11c2:	80 93 1a 02 	sts	0x021A, r24
    
    omega_estimation(q_o, v_w);
    11c6:	67 e3       	ldi	r22, 0x37	; 55
    11c8:	72 e0       	ldi	r23, 0x02	; 2
    11ca:	8b e1       	ldi	r24, 0x1B	; 27
    11cc:	92 e0       	ldi	r25, 0x02	; 2
    11ce:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <omega_estimation>
	
    scalar_into_vector(v_w, light*w_ctrl); //light * w_ctrl
    11d2:	60 91 1a 02 	lds	r22, 0x021A
    11d6:	80 91 19 02 	lds	r24, 0x0219
    11da:	68 9f       	mul	r22, r24
    11dc:	b0 01       	movw	r22, r0
    11de:	11 24       	eor	r1, r1
    11e0:	88 27       	eor	r24, r24
    11e2:	77 fd       	sbrc	r23, 7
    11e4:	80 95       	com	r24
    11e6:	98 2f       	mov	r25, r24
    11e8:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
    11ec:	ab 01       	movw	r20, r22
    11ee:	bc 01       	movw	r22, r24
    11f0:	87 e3       	ldi	r24, 0x37	; 55
    11f2:	92 e0       	ldi	r25, 0x02	; 2
    11f4:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <scalar_into_vector>
	/*if(v_m[i]<0)
	transmit_UART0(0x01);
	else
	transmit_UART0(0x00);*/
//}  
    mod_w = vector_norm(v_w); 
    11f8:	87 e3       	ldi	r24, 0x37	; 55
    11fa:	92 e0       	ldi	r25, 0x02	; 2
    11fc:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <vector_norm>
    1200:	60 93 bf 04 	sts	0x04BF, r22
    1204:	70 93 c0 04 	sts	0x04C0, r23
    1208:	80 93 c1 04 	sts	0x04C1, r24
    120c:	90 93 c2 04 	sts	0x04C2, r25
    convert_unit_quaternion(q_o);
    1210:	8b e1       	ldi	r24, 0x1B	; 27
    1212:	92 e0       	ldi	r25, 0x02	; 2
    1214:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <convert_unit_quaternion>
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
	
	
    nominal(v_m_N);
    1218:	4e 01       	movw	r8, r28
    121a:	99 e1       	ldi	r25, 0x19	; 25
    121c:	89 0e       	add	r8, r25
    121e:	91 1c       	adc	r9, r1
    1220:	c4 01       	movw	r24, r8
    1222:	dd db       	rcall	.-2118   	; 0x9de <nominal>
	//uint8_t sen =Mode;
	//transmit_UART0(sen);
	//PORTA^=0x00;
	}//if((star_flag >= 10)||(Time > gps_max))   // 90
	if(star_flag >= 90)   // 90
    1224:	80 91 0c 02 	lds	r24, 0x020C
    1228:	8a 35       	cpi	r24, 0x5A	; 90
    122a:	0c f4       	brge	.+2      	; 0x122e <__stack+0x12f>
    122c:	dd c0       	rjmp	.+442    	; 0x13e8 <__stack+0x2e9>
		{
			star_flag = 91;                 // 91
    122e:	8b e5       	ldi	r24, 0x5B	; 91
    1230:	80 93 0c 02 	sts	0x020C, r24
			if (light ==1)
    1234:	10 91 1a 02 	lds	r17, 0x021A
    1238:	11 30       	cpi	r17, 0x01	; 1
    123a:	09 f4       	brne	.+2      	; 0x123e <__stack+0x13f>
    123c:	ad c0       	rjmp	.+346    	; 0x1398 <__stack+0x299>
					gps_power =2;
				}
			}
			else
			{
				start_time =0;
    123e:	10 92 0b 02 	sts	0x020B, r1
    1242:	10 92 0a 02 	sts	0x020A, r1
				time_e = time_e +2;
    1246:	60 91 f4 01 	lds	r22, 0x01F4
    124a:	70 91 f5 01 	lds	r23, 0x01F5
    124e:	6e 5f       	subi	r22, 0xFE	; 254
    1250:	7f 4f       	sbci	r23, 0xFF	; 255
    1252:	70 93 f5 01 	sts	0x01F5, r23
    1256:	60 93 f4 01 	sts	0x01F4, r22
				if (time_e > (eclipse_time-150))
    125a:	88 27       	eor	r24, r24
    125c:	77 fd       	sbrc	r23, 7
    125e:	80 95       	com	r24
    1260:	98 2f       	mov	r25, r24
    1262:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
    1266:	6b 01       	movw	r12, r22
    1268:	7c 01       	movw	r14, r24
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	46 e1       	ldi	r20, 0x16	; 22
    1270:	53 e4       	ldi	r21, 0x43	; 67
    1272:	60 91 04 01 	lds	r22, 0x0104
    1276:	70 91 05 01 	lds	r23, 0x0105
    127a:	80 91 06 01 	lds	r24, 0x0106
    127e:	90 91 07 01 	lds	r25, 0x0107
    1282:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    1286:	9b 01       	movw	r18, r22
    1288:	ac 01       	movw	r20, r24
    128a:	c7 01       	movw	r24, r14
    128c:	b6 01       	movw	r22, r12
    128e:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__gesf2>
    1292:	18 16       	cp	r1, r24
    1294:	0c f4       	brge	.+2      	; 0x1298 <__stack+0x199>
    1296:	99 c0       	rjmp	.+306    	; 0x13ca <__stack+0x2cb>
				{
					gps_power =2;
				}
				else
				{
					gps_power =0;
    1298:	10 92 f7 01 	sts	0x01F7, r1
    129c:	10 92 f6 01 	sts	0x01F6, r1
			}
			
		}

	
   if((mod_w < TOLW_D2N)&&(light*w_ctrl==1))
    12a0:	c0 90 bf 04 	lds	r12, 0x04BF
    12a4:	d0 90 c0 04 	lds	r13, 0x04C0
    12a8:	e0 90 c1 04 	lds	r14, 0x04C1
    12ac:	f0 90 c2 04 	lds	r15, 0x04C2
    12b0:	2f e6       	ldi	r18, 0x6F	; 111
    12b2:	32 e1       	ldi	r19, 0x12	; 18
    12b4:	43 e8       	ldi	r20, 0x83	; 131
    12b6:	5b e3       	ldi	r21, 0x3B	; 59
    12b8:	c7 01       	movw	r24, r14
    12ba:	b6 01       	movw	r22, r12
    12bc:	0e 94 6d 2b 	call	0x56da	; 0x56da <__cmpsf2>
    12c0:	87 ff       	sbrs	r24, 7
    12c2:	08 c0       	rjmp	.+16     	; 0x12d4 <__stack+0x1d5>
    12c4:	80 91 19 02 	lds	r24, 0x0219
    12c8:	18 9f       	mul	r17, r24
    12ca:	c0 01       	movw	r24, r0
    12cc:	11 24       	eor	r1, r1
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <__stack+0x1d5>
    12d2:	b0 c1       	rjmp	.+864    	; 0x1634 <__stack+0x535>
   {
	   flag_N = flag_N+1;
	   flag_D = 0;
   }
   else if (mod_w > TOLW_N2D)
    12d4:	2f e6       	ldi	r18, 0x6F	; 111
    12d6:	32 e1       	ldi	r19, 0x12	; 18
    12d8:	43 e0       	ldi	r20, 0x03	; 3
    12da:	5c e3       	ldi	r21, 0x3C	; 60
    12dc:	c7 01       	movw	r24, r14
    12de:	b6 01       	movw	r22, r12
    12e0:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__gesf2>
    12e4:	18 16       	cp	r1, r24
    12e6:	6c f4       	brge	.+26     	; 0x1302 <__stack+0x203>
   {
	   flag_D = flag_D +1;
    12e8:	80 91 15 02 	lds	r24, 0x0215
    12ec:	90 91 16 02 	lds	r25, 0x0216
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	90 93 16 02 	sts	0x0216, r25
    12f6:	80 93 15 02 	sts	0x0215, r24
	   flag_N = 0;
    12fa:	10 92 18 02 	sts	0x0218, r1
    12fe:	10 92 17 02 	sts	0x0217, r1
   }
   //sen = flag_N;
    //transmit_UART0(sen);  
	if (Time<2000)
    1302:	f0 90 42 05 	lds	r15, 0x0542
    1306:	10 91 43 05 	lds	r17, 0x0543
    130a:	20 90 44 05 	lds	r2, 0x0544
    130e:	30 90 45 05 	lds	r3, 0x0545
    1312:	40 90 46 05 	lds	r4, 0x0546
    1316:	50 90 47 05 	lds	r5, 0x0547
    131a:	60 90 48 05 	lds	r6, 0x0548
    131e:	70 90 49 05 	lds	r7, 0x0549
    1322:	2f 2d       	mov	r18, r15
    1324:	31 2f       	mov	r19, r17
    1326:	a1 01       	movw	r20, r2
    1328:	b2 01       	movw	r22, r4
    132a:	c3 01       	movw	r24, r6
    132c:	2f 3c       	cpi	r18, 0xCF	; 207
    132e:	37 40       	sbci	r19, 0x07	; 7
    1330:	41 05       	cpc	r20, r1
    1332:	51 05       	cpc	r21, r1
    1334:	61 05       	cpc	r22, r1
    1336:	71 05       	cpc	r23, r1
    1338:	81 05       	cpc	r24, r1
    133a:	91 05       	cpc	r25, r1
    133c:	09 f0       	breq	.+2      	; 0x1340 <__stack+0x241>
    133e:	08 f4       	brcc	.+2      	; 0x1342 <__stack+0x243>
    1340:	e5 c0       	rjmp	.+458    	; 0x150c <__stack+0x40d>
		Mode = DETUMBLING;
		t_now = 0;
	}
	else
	{
		if (star_flag >0)
    1342:	80 91 0c 02 	lds	r24, 0x020C
    1346:	18 16       	cp	r1, r24
    1348:	0c f0       	brlt	.+2      	; 0x134c <__stack+0x24d>
    134a:	6a c1       	rjmp	.+724    	; 0x1620 <__stack+0x521>
		{
			if (Mode == DETUMBLING)
    134c:	80 91 12 01 	lds	r24, 0x0112
    1350:	84 30       	cpi	r24, 0x04	; 4
    1352:	09 f4       	brne	.+2      	; 0x1356 <__stack+0x257>
    1354:	8d c1       	rjmp	.+794    	; 0x1670 <__stack+0x571>
				{flag_D = 0;}	
			}	
		}
	
	 
	 if (Mode == NOMINAL)
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	09 f4       	brne	.+2      	; 0x135c <__stack+0x25d>
    135a:	28 c1       	rjmp	.+592    	; 0x15ac <__stack+0x4ad>
    apply_torque(v_m_D);
  
  else if(Mode == NOMINAL)*/
	//change here
   // if(Mode == DETUMBLING)
    apply_torque(v_m_D);
    135c:	ce 01       	movw	r24, r28
    135e:	85 96       	adiw	r24, 0x25	; 37
    1360:	bd dc       	rcall	.-1670   	; 0xcdc <apply_torque>
    
    //else if(Mode == NOMINAL)
    apply_torque(v_m_N);
    1362:	c4 01       	movw	r24, r8
    1364:	bb dc       	rcall	.-1674   	; 0xcdc <apply_torque>
	
	//Mode_prev = Mode;
    
}
    1366:	e0 96       	adiw	r28, 0x30	; 48
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	cd bf       	out	0x3d, r28	; 61
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	ff 90       	pop	r15
    137c:	ef 90       	pop	r14
    137e:	df 90       	pop	r13
    1380:	cf 90       	pop	r12
    1382:	bf 90       	pop	r11
    1384:	af 90       	pop	r10
    1386:	9f 90       	pop	r9
    1388:	8f 90       	pop	r8
    138a:	7f 90       	pop	r7
    138c:	6f 90       	pop	r6
    138e:	5f 90       	pop	r5
    1390:	4f 90       	pop	r4
    1392:	3f 90       	pop	r3
    1394:	2f 90       	pop	r2
    1396:	08 95       	ret
	if(star_flag >= 90)   // 90
		{
			star_flag = 91;                 // 91
			if (light ==1)
			{
				time_l = time_l +2;
    1398:	80 91 f2 01 	lds	r24, 0x01F2
    139c:	90 91 f3 01 	lds	r25, 0x01F3
    13a0:	02 96       	adiw	r24, 0x02	; 2
    13a2:	90 93 f3 01 	sts	0x01F3, r25
    13a6:	80 93 f2 01 	sts	0x01F2, r24
				time_e =0;
    13aa:	10 92 f5 01 	sts	0x01F5, r1
    13ae:	10 92 f4 01 	sts	0x01F4, r1
				start_time = time_l % 690;   //690
    13b2:	62 eb       	ldi	r22, 0xB2	; 178
    13b4:	72 e0       	ldi	r23, 0x02	; 2
    13b6:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__divmodhi4>
    13ba:	90 93 0b 02 	sts	0x020B, r25
    13be:	80 93 0a 02 	sts	0x020A, r24
				if (start_time <600)       //600
    13c2:	88 35       	cpi	r24, 0x58	; 88
    13c4:	92 40       	sbci	r25, 0x02	; 2
    13c6:	0c f4       	brge	.+2      	; 0x13ca <__stack+0x2cb>
    13c8:	67 cf       	rjmp	.-306    	; 0x1298 <__stack+0x199>
			{
				start_time =0;
				time_e = time_e +2;
				if (time_e > (eclipse_time-150))
				{
					gps_power =2;
    13ca:	82 e0       	ldi	r24, 0x02	; 2
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	90 93 f7 01 	sts	0x01F7, r25
    13d2:	80 93 f6 01 	sts	0x01F6, r24
    13d6:	64 cf       	rjmp	.-312    	; 0x12a0 <__stack+0x1a1>
    13d8:	ce 01       	movw	r24, r28
    13da:	49 96       	adiw	r24, 0x19	; 25
    13dc:	4c 01       	movw	r8, r24
    nominal(v_m_N);
	//uint8_t sen =Mode;
	//transmit_UART0(sen);
	//PORTA^=0x00;
	}//if((star_flag >= 10)||(Time > gps_max))   // 90
	if(star_flag >= 90)   // 90
    13de:	80 91 0c 02 	lds	r24, 0x020C
    13e2:	8a 35       	cpi	r24, 0x5A	; 90
    13e4:	0c f0       	brlt	.+2      	; 0x13e8 <__stack+0x2e9>
    13e6:	23 cf       	rjmp	.-442    	; 0x122e <__stack+0x12f>
			}
		}

	else
		{
			norm_m_d = vector_norm(v_m_D);
    13e8:	ce 01       	movw	r24, r28
    13ea:	85 96       	adiw	r24, 0x25	; 37
    13ec:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <vector_norm>
    13f0:	6b 01       	movw	r12, r22
    13f2:	7c 01       	movw	r14, r24
    13f4:	60 93 06 02 	sts	0x0206, r22
    13f8:	70 93 07 02 	sts	0x0207, r23
    13fc:	80 93 08 02 	sts	0x0208, r24
    1400:	90 93 09 02 	sts	0x0209, r25
			md_start = norm_m_d * light;
    1404:	10 91 1a 02 	lds	r17, 0x021A
    1408:	61 2f       	mov	r22, r17
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
    1414:	9b 01       	movw	r18, r22
    1416:	ac 01       	movw	r20, r24
    1418:	c7 01       	movw	r24, r14
    141a:	b6 01       	movw	r22, r12
    141c:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    1420:	6b 01       	movw	r12, r22
    1422:	7c 01       	movw	r14, r24
    1424:	60 93 02 02 	sts	0x0202, r22
    1428:	70 93 03 02 	sts	0x0203, r23
    142c:	80 93 04 02 	sts	0x0204, r24
    1430:	90 93 05 02 	sts	0x0205, r25
			if (md_start != 0)
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	a9 01       	movw	r20, r18
    143a:	0e 94 6d 2b 	call	0x56da	; 0x56da <__cmpsf2>
    143e:	88 23       	and	r24, r24
    1440:	09 f4       	brne	.+2      	; 0x1444 <__stack+0x345>
    1442:	78 c0       	rjmp	.+240    	; 0x1534 <__stack+0x435>
			{
				if (num==2)
    1444:	a0 90 08 01 	lds	r10, 0x0108
    1448:	b0 90 09 01 	lds	r11, 0x0109
    144c:	22 e0       	ldi	r18, 0x02	; 2
    144e:	a2 16       	cp	r10, r18
    1450:	b1 04       	cpc	r11, r1
    1452:	09 f4       	brne	.+2      	; 0x1456 <__stack+0x357>
    1454:	38 c1       	rjmp	.+624    	; 0x16c6 <__stack+0x5c7>
				{
					avg_md_new = (md_start + (num - 1)*md_start)/num;
				}
				else
				{
					avg_md_new = (md_start + (num-1)*avg_md)/num;
    1456:	b5 01       	movw	r22, r10
    1458:	61 50       	subi	r22, 0x01	; 1
    145a:	71 09       	sbc	r23, r1
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 0d 2c 	call	0x581a	; 0x581a <__floatunsisf>
    1464:	20 91 fe 01 	lds	r18, 0x01FE
    1468:	30 91 ff 01 	lds	r19, 0x01FF
    146c:	40 91 00 02 	lds	r20, 0x0200
    1470:	50 91 01 02 	lds	r21, 0x0201
    1474:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    1478:	9b 01       	movw	r18, r22
    147a:	ac 01       	movw	r20, r24
    147c:	c7 01       	movw	r24, r14
    147e:	b6 01       	movw	r22, r12
    1480:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    1484:	6b 01       	movw	r12, r22
    1486:	7c 01       	movw	r14, r24
    1488:	b5 01       	movw	r22, r10
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	0e 94 0d 2c 	call	0x581a	; 0x581a <__floatunsisf>
    1492:	9b 01       	movw	r18, r22
    1494:	ac 01       	movw	r20, r24
    1496:	c7 01       	movw	r24, r14
    1498:	b6 01       	movw	r22, r12
    149a:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    149e:	6b 01       	movw	r12, r22
    14a0:	ab 01       	movw	r20, r22
    14a2:	bc 01       	movw	r22, r24
    14a4:	40 93 fa 01 	sts	0x01FA, r20
    14a8:	50 93 fb 01 	sts	0x01FB, r21
    14ac:	60 93 fc 01 	sts	0x01FC, r22
    14b0:	70 93 fd 01 	sts	0x01FD, r23
    14b4:	7c 01       	movw	r14, r24
				}
				num = num +1;
    14b6:	8f ef       	ldi	r24, 0xFF	; 255
    14b8:	a8 1a       	sub	r10, r24
    14ba:	b8 0a       	sbc	r11, r24
    14bc:	b0 92 09 01 	sts	0x0109, r11
    14c0:	a0 92 08 01 	sts	0x0108, r10
			else
			{
				num = 2;
				avg_md_new = 0;
			}
			if ((avg_md_new !=0) && (avg_md_new <0.04) || (avg_md_new ==0) && (avg_md !=0))
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	a9 01       	movw	r20, r18
    14ca:	b6 01       	movw	r22, r12
    14cc:	c7 01       	movw	r24, r14
    14ce:	0e 94 6d 2b 	call	0x56da	; 0x56da <__cmpsf2>
    14d2:	88 23       	and	r24, r24
    14d4:	e9 f1       	breq	.+122    	; 0x1550 <__stack+0x451>
    14d6:	2a e0       	ldi	r18, 0x0A	; 10
    14d8:	37 ed       	ldi	r19, 0xD7	; 215
    14da:	43 e2       	ldi	r20, 0x23	; 35
    14dc:	5d e3       	ldi	r21, 0x3D	; 61
    14de:	b6 01       	movw	r22, r12
    14e0:	c7 01       	movw	r24, r14
    14e2:	0e 94 6d 2b 	call	0x56da	; 0x56da <__cmpsf2>
    14e6:	87 ff       	sbrs	r24, 7
    14e8:	42 c0       	rjmp	.+132    	; 0x156e <__stack+0x46f>
			{
				flag_on = flag_on +2;
    14ea:	60 91 f8 01 	lds	r22, 0x01F8
    14ee:	70 91 f9 01 	lds	r23, 0x01F9
    14f2:	6e 5f       	subi	r22, 0xFE	; 254
    14f4:	7f 4f       	sbci	r23, 0xFF	; 255
    14f6:	70 93 f9 01 	sts	0x01F9, r23
    14fa:	60 93 f8 01 	sts	0x01F8, r22
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 0d 2c 	call	0x581a	; 0x581a <__floatunsisf>
    1506:	9b 01       	movw	r18, r22
    1508:	ac 01       	movw	r20, r24
    150a:	38 c0       	rjmp	.+112    	; 0x157c <__stack+0x47d>
   }
   //sen = flag_N;
    //transmit_UART0(sen);  
	if (Time<2000)
	{
		Mode = DETUMBLING;
    150c:	84 e0       	ldi	r24, 0x04	; 4
    150e:	80 93 12 01 	sts	0x0112, r24
		t_now = 0;
    1512:	10 92 0d 02 	sts	0x020D, r1
    1516:	10 92 0e 02 	sts	0x020E, r1
    151a:	10 92 0f 02 	sts	0x020F, r1
    151e:	10 92 10 02 	sts	0x0210, r1
    1522:	10 92 11 02 	sts	0x0211, r1
    1526:	10 92 12 02 	sts	0x0212, r1
    152a:	10 92 13 02 	sts	0x0213, r1
    152e:	10 92 14 02 	sts	0x0214, r1
    1532:	14 cf       	rjmp	.-472    	; 0x135c <__stack+0x25d>
				}
				num = num +1;
			}
			else
			{
				num = 2;
    1534:	82 e0       	ldi	r24, 0x02	; 2
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	90 93 09 01 	sts	0x0109, r25
    153c:	80 93 08 01 	sts	0x0108, r24
				avg_md_new = 0;
    1540:	10 92 fa 01 	sts	0x01FA, r1
    1544:	10 92 fb 01 	sts	0x01FB, r1
    1548:	10 92 fc 01 	sts	0x01FC, r1
    154c:	10 92 fd 01 	sts	0x01FD, r1
			}
			if ((avg_md_new !=0) && (avg_md_new <0.04) || (avg_md_new ==0) && (avg_md !=0))
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	a9 01       	movw	r20, r18
    1556:	60 91 fe 01 	lds	r22, 0x01FE
    155a:	70 91 ff 01 	lds	r23, 0x01FF
    155e:	80 91 00 02 	lds	r24, 0x0200
    1562:	90 91 01 02 	lds	r25, 0x0201
    1566:	0e 94 6d 2b 	call	0x56da	; 0x56da <__cmpsf2>
    156a:	81 11       	cpse	r24, r1
    156c:	be cf       	rjmp	.-132    	; 0x14ea <__stack+0x3eb>
			{
				flag_on = flag_on +2;
			}
			else
			{
				flag_on = 0;
    156e:	10 92 f9 01 	sts	0x01F9, r1
    1572:	10 92 f8 01 	sts	0x01F8, r1
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	a9 01       	movw	r20, r18
			}
			if (flag_on > gps_start)
    157c:	60 91 00 01 	lds	r22, 0x0100
    1580:	70 91 01 01 	lds	r23, 0x0101
    1584:	80 91 02 01 	lds	r24, 0x0102
    1588:	90 91 03 01 	lds	r25, 0x0103
    158c:	0e 94 6d 2b 	call	0x56da	; 0x56da <__cmpsf2>
    1590:	87 ff       	sbrs	r24, 7
    1592:	49 c0       	rjmp	.+146    	; 0x1626 <__stack+0x527>
			{
				gps_power = 2;
    1594:	82 e0       	ldi	r24, 0x02	; 2
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	90 93 f7 01 	sts	0x01F7, r25
    159c:	80 93 f6 01 	sts	0x01F6, r24
				star_flag = star_flag +2;
    15a0:	80 91 0c 02 	lds	r24, 0x020C
    15a4:	8e 5f       	subi	r24, 0xFE	; 254
    15a6:	80 93 0c 02 	sts	0x020C, r24
    15aa:	7a ce       	rjmp	.-780    	; 0x12a0 <__stack+0x1a1>
    15ac:	e0 91 0a 01 	lds	r30, 0x010A
    15b0:	f0 91 0b 01 	lds	r31, 0x010B
		}
	
	 
	 if (Mode == NOMINAL)
	 {
		 if ((flag_D > tol_time) && (Time > (t_now+N2D_TIME)))
    15b4:	a0 91 15 02 	lds	r26, 0x0215
    15b8:	b0 91 16 02 	lds	r27, 0x0216
    15bc:	ea 17       	cp	r30, r26
    15be:	fb 07       	cpc	r31, r27
    15c0:	54 f5       	brge	.+84     	; 0x1616 <__stack+0x517>
    15c2:	20 91 0d 02 	lds	r18, 0x020D
    15c6:	30 91 0e 02 	lds	r19, 0x020E
    15ca:	40 91 0f 02 	lds	r20, 0x020F
    15ce:	50 91 10 02 	lds	r21, 0x0210
    15d2:	60 91 11 02 	lds	r22, 0x0211
    15d6:	70 91 12 02 	lds	r23, 0x0212
    15da:	80 91 13 02 	lds	r24, 0x0213
    15de:	90 91 14 02 	lds	r25, 0x0214
    15e2:	20 5f       	subi	r18, 0xF0	; 240
    15e4:	38 4d       	sbci	r19, 0xD8	; 216
    15e6:	4f 4f       	sbci	r20, 0xFF	; 255
    15e8:	5f 4f       	sbci	r21, 0xFF	; 255
    15ea:	6f 4f       	sbci	r22, 0xFF	; 255
    15ec:	7f 4f       	sbci	r23, 0xFF	; 255
    15ee:	8f 4f       	sbci	r24, 0xFF	; 255
    15f0:	9f 4f       	sbci	r25, 0xFF	; 255
    15f2:	59 01       	movw	r10, r18
    15f4:	6a 01       	movw	r12, r20
    15f6:	e6 2e       	mov	r14, r22
    15f8:	f7 2f       	mov	r31, r23
    15fa:	08 2f       	mov	r16, r24
    15fc:	e9 2f       	mov	r30, r25
    15fe:	2f 2d       	mov	r18, r15
    1600:	31 2f       	mov	r19, r17
    1602:	a1 01       	movw	r20, r2
    1604:	b2 01       	movw	r22, r4
    1606:	c3 01       	movw	r24, r6
    1608:	ff 2e       	mov	r15, r31
    160a:	1e 2f       	mov	r17, r30
    160c:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <__cmpdi2>
    1610:	11 f0       	breq	.+4      	; 0x1616 <__stack+0x517>
    1612:	08 f0       	brcs	.+2      	; 0x1616 <__stack+0x517>
    1614:	50 c0       	rjmp	.+160    	; 0x16b6 <__stack+0x5b7>
			 Mode = DETUMBLING;
			 flag_D = 0;
		 }
		 else
		 {
			 flag_N = 0;
    1616:	10 92 18 02 	sts	0x0218, r1
    161a:	10 92 17 02 	sts	0x0217, r1
    161e:	9e ce       	rjmp	.-708    	; 0x135c <__stack+0x25d>
    1620:	80 91 12 01 	lds	r24, 0x0112
    1624:	98 ce       	rjmp	.-720    	; 0x1356 <__stack+0x257>
				gps_power = 2;
				star_flag = star_flag +2;
			}
			else
			{
				gps_power=0;
    1626:	10 92 f7 01 	sts	0x01F7, r1
    162a:	10 92 f6 01 	sts	0x01F6, r1
				star_flag = 0;                        
    162e:	10 92 0c 02 	sts	0x020C, r1
    1632:	36 ce       	rjmp	.-916    	; 0x12a0 <__stack+0x1a1>
		}

	
   if((mod_w < TOLW_D2N)&&(light*w_ctrl==1))
   {
	   flag_N = flag_N+1;
    1634:	80 91 17 02 	lds	r24, 0x0217
    1638:	90 91 18 02 	lds	r25, 0x0218
    163c:	01 96       	adiw	r24, 0x01	; 1
    163e:	90 93 18 02 	sts	0x0218, r25
    1642:	80 93 17 02 	sts	0x0217, r24
	   flag_D = 0;
    1646:	10 92 16 02 	sts	0x0216, r1
    164a:	10 92 15 02 	sts	0x0215, r1
    164e:	59 ce       	rjmp	.-846    	; 0x1302 <__stack+0x203>
	//if((gps_power) == 2)
	//{
		if (gps_power==2)
		{
   uint8_t q= 90;
    transmit_UART0(q);
    1650:	8a e5       	ldi	r24, 0x5A	; 90
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <transmit_UART0>
    read_GPS();
    1658:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <read_GPS>
    while(UCSR0B & _BV(RXCIE0));
    165c:	57 99       	sbic	0x0a, 7	; 10
    165e:	fe cf       	rjmp	.-4      	; 0x165c <__stack+0x55d>
  
  /// Check if in Nominal or Detumbling Mode
  //if(GPS_done >= 0)
  //{
	   
    if(GPS_done == 1)
    1660:	80 91 13 01 	lds	r24, 0x0113
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	09 f0       	breq	.+2      	; 0x166a <__stack+0x56b>
    1668:	43 cd       	rjmp	.-1402   	; 0x10f0 <control+0x134>
      copy_gps_reading();  //check
    166a:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <copy_gps_reading>
    166e:	85 cd       	rjmp	.-1270   	; 0x117a <__stack+0x7b>
	{
		if (star_flag >0)
		{
			if (Mode == DETUMBLING)
			{
				if (flag_N > tol_time)
    1670:	a0 91 17 02 	lds	r26, 0x0217
    1674:	b0 91 18 02 	lds	r27, 0x0218
    1678:	e0 91 0a 01 	lds	r30, 0x010A
    167c:	f0 91 0b 01 	lds	r31, 0x010B
    1680:	ea 17       	cp	r30, r26
    1682:	fb 07       	cpc	r31, r27
    1684:	dc f4       	brge	.+54     	; 0x16bc <__stack+0x5bd>
				{
					Mode = NOMINAL;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	80 93 12 01 	sts	0x0112, r24
					t_now = Time;
    168c:	f0 92 0d 02 	sts	0x020D, r15
    1690:	10 93 0e 02 	sts	0x020E, r17
    1694:	20 92 0f 02 	sts	0x020F, r2
    1698:	30 92 10 02 	sts	0x0210, r3
    169c:	40 92 11 02 	sts	0x0211, r4
    16a0:	50 92 12 02 	sts	0x0212, r5
    16a4:	60 92 13 02 	sts	0x0213, r6
    16a8:	70 92 14 02 	sts	0x0214, r7
					flag_N = 0;
    16ac:	10 92 18 02 	sts	0x0218, r1
    16b0:	10 92 17 02 	sts	0x0217, r1
    16b4:	7f cf       	rjmp	.-258    	; 0x15b4 <__stack+0x4b5>
	 
	 if (Mode == NOMINAL)
	 {
		 if ((flag_D > tol_time) && (Time > (t_now+N2D_TIME)))
		 {
			 Mode = DETUMBLING;
    16b6:	84 e0       	ldi	r24, 0x04	; 4
    16b8:	80 93 12 01 	sts	0x0112, r24
			 flag_D = 0;
    16bc:	10 92 16 02 	sts	0x0216, r1
    16c0:	10 92 15 02 	sts	0x0215, r1
    16c4:	4b ce       	rjmp	.-874    	; 0x135c <__stack+0x25d>
			md_start = norm_m_d * light;
			if (md_start != 0)
			{
				if (num==2)
				{
					avg_md_new = (md_start + (num - 1)*md_start)/num;
    16c6:	a7 01       	movw	r20, r14
    16c8:	96 01       	movw	r18, r12
    16ca:	c7 01       	movw	r24, r14
    16cc:	b6 01       	movw	r22, r12
    16ce:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	40 e0       	ldi	r20, 0x00	; 0
    16d8:	5f e3       	ldi	r21, 0x3F	; 63
    16da:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    16de:	df ce       	rjmp	.-578    	; 0x149e <__stack+0x39f>

000016e0 <get_seconds_since_equinox>:
  now += (uint64_t)seconds;
  return now;
}

void get_seconds_since_equinox(void)
{
    16e0:	2f 92       	push	r2
    16e2:	3f 92       	push	r3
    16e4:	4f 92       	push	r4
    16e6:	5f 92       	push	r5
    16e8:	6f 92       	push	r6
    16ea:	7f 92       	push	r7
    16ec:	8f 92       	push	r8
    16ee:	9f 92       	push	r9
    16f0:	af 92       	push	r10
    16f2:	bf 92       	push	r11
    16f4:	cf 92       	push	r12
    16f6:	df 92       	push	r13
    16f8:	ef 92       	push	r14
    16fa:	ff 92       	push	r15
    16fc:	0f 93       	push	r16
    16fe:	1f 93       	push	r17
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	29 97       	sbiw	r28, 0x09	; 9
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
  uint64_t equinox;
  
  struct GPS_reading * gps = (struct GPS_reading *)&(Current_state.gps);

  equinox = get_seconds_since_pivot(2015, 3, 20, 22, 45, 0);
  seconds_since_pivot = get_seconds_since_pivot(gps->year, gps->month, gps->date, gps->hours, gps->minutes, gps->seconds);
    1714:	e0 91 f9 04 	lds	r30, 0x04F9
    1718:	a0 91 f8 04 	lds	r26, 0x04F8
    171c:	ad 83       	std	Y+5, r26	; 0x05
    171e:	b0 91 f7 04 	lds	r27, 0x04F7
    1722:	bf 83       	std	Y+7, r27	; 0x07
}
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
    1724:	20 90 fc 04 	lds	r2, 0x04FC
    1728:	30 90 fd 04 	lds	r3, 0x04FD
    172c:	91 01       	movw	r18, r2
    172e:	40 e0       	ldi	r20, 0x00	; 0
    1730:	50 e0       	ldi	r21, 0x00	; 0
    1732:	60 e0       	ldi	r22, 0x00	; 0
    1734:	70 e0       	ldi	r23, 0x00	; 0
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	03 e0       	ldi	r16, 0x03	; 3
    173c:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__ashldi3>
    1740:	f2 2f       	mov	r31, r18
    1742:	3a 83       	std	Y+2, r19	; 0x02
    1744:	4b 83       	std	Y+3, r20	; 0x03
    1746:	59 87       	std	Y+9, r21	; 0x09
    1748:	6e 83       	std	Y+6, r22	; 0x06
    174a:	b7 2f       	mov	r27, r23
    174c:	a8 2f       	mov	r26, r24
    174e:	98 87       	std	Y+8, r25	; 0x08
    1750:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__ashldi3>
    1754:	59 01       	movw	r10, r18
    1756:	6a 01       	movw	r12, r20
    1758:	7b 01       	movw	r14, r22
    175a:	8c 01       	movw	r16, r24
    175c:	2f 2f       	mov	r18, r31
    175e:	3a 81       	ldd	r19, Y+2	; 0x02
    1760:	4b 81       	ldd	r20, Y+3	; 0x03
    1762:	59 85       	ldd	r21, Y+9	; 0x09
    1764:	6e 81       	ldd	r22, Y+6	; 0x06
    1766:	7b 2f       	mov	r23, r27
    1768:	8a 2f       	mov	r24, r26
    176a:	98 85       	ldd	r25, Y+8	; 0x08
    176c:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <__adddi3>
    1770:	51 01       	movw	r10, r2
    1772:	c1 2c       	mov	r12, r1
    1774:	d1 2c       	mov	r13, r1
    1776:	e1 2c       	mov	r14, r1
    1778:	f1 2c       	mov	r15, r1
    177a:	00 e0       	ldi	r16, 0x00	; 0
    177c:	10 e0       	ldi	r17, 0x00	; 0
    177e:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <__adddi3>
    1782:	59 01       	movw	r10, r18
    1784:	6a 01       	movw	r12, r20
    1786:	7b 01       	movw	r14, r22
    1788:	f8 2f       	mov	r31, r24
    178a:	19 2f       	mov	r17, r25
    178c:	04 e0       	ldi	r16, 0x04	; 4
    178e:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__ashldi3>
    1792:	0f 2f       	mov	r16, r31
    1794:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__subdi3>
    1798:	59 01       	movw	r10, r18
    179a:	6a 01       	movw	r12, r20
    179c:	7b 01       	movw	r14, r22
    179e:	f8 2f       	mov	r31, r24
    17a0:	19 2f       	mov	r17, r25
    17a2:	04 e0       	ldi	r16, 0x04	; 4
    17a4:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__ashldi3>
    17a8:	0f 2f       	mov	r16, r31
    17aa:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__subdi3>
    17ae:	59 01       	movw	r10, r18
    17b0:	6a 01       	movw	r12, r20
    17b2:	7b 01       	movw	r14, r22
    17b4:	f8 2f       	mov	r31, r24
    17b6:	19 2f       	mov	r17, r25
    17b8:	04 e0       	ldi	r16, 0x04	; 4
    17ba:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__ashldi3>
    17be:	0f 2f       	mov	r16, r31
    17c0:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__subdi3>
    17c4:	07 e0       	ldi	r16, 0x07	; 7
    17c6:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__ashldi3>
    17ca:	59 01       	movw	r10, r18
    17cc:	6a 01       	movw	r12, r20
    17ce:	7b 01       	movw	r14, r22
    17d0:	8c 01       	movw	r16, r24
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
    17d2:	f0 91 fa 04 	lds	r31, 0x04FA
    17d6:	f8 87       	std	Y+8, r31	; 0x08
    17d8:	a0 91 fb 04 	lds	r26, 0x04FB
    17dc:	a2 50       	subi	r26, 0x02	; 2
    17de:	ab 30       	cpi	r26, 0x0B	; 11
    17e0:	08 f0       	brcs	.+2      	; 0x17e4 <get_seconds_since_equinox+0x104>
    17e2:	1b c1       	rjmp	.+566    	; 0x1a1a <get_seconds_since_equinox+0x33a>
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	aa 0f       	add	r26, r26
    17e8:	bb 1f       	adc	r27, r27
    17ea:	aa 0f       	add	r26, r26
    17ec:	bb 1f       	adc	r27, r27
    17ee:	aa 0f       	add	r26, r26
    17f0:	bb 1f       	adc	r27, r27
    17f2:	af 57       	subi	r26, 0x7F	; 127
    17f4:	be 4f       	sbci	r27, 0xFE	; 254
    17f6:	5c 90       	ld	r5, X
    17f8:	11 96       	adiw	r26, 0x01	; 1
    17fa:	4c 90       	ld	r4, X
    17fc:	11 97       	sbiw	r26, 0x01	; 1
    17fe:	12 96       	adiw	r26, 0x02	; 2
    1800:	3c 90       	ld	r3, X
    1802:	12 97       	sbiw	r26, 0x02	; 2
    1804:	13 96       	adiw	r26, 0x03	; 3
    1806:	2c 90       	ld	r2, X
    1808:	13 97       	sbiw	r26, 0x03	; 3
    180a:	14 96       	adiw	r26, 0x04	; 4
    180c:	2c 91       	ld	r18, X
    180e:	14 97       	sbiw	r26, 0x04	; 4
    1810:	29 83       	std	Y+1, r18	; 0x01
    1812:	15 96       	adiw	r26, 0x05	; 5
    1814:	8c 91       	ld	r24, X
    1816:	15 97       	sbiw	r26, 0x05	; 5
    1818:	8a 83       	std	Y+2, r24	; 0x02
    181a:	16 96       	adiw	r26, 0x06	; 6
    181c:	fc 91       	ld	r31, X
    181e:	16 97       	sbiw	r26, 0x06	; 6
    1820:	fb 83       	std	Y+3, r31	; 0x03
    1822:	17 96       	adiw	r26, 0x07	; 7
    1824:	2c 91       	ld	r18, X
    1826:	2e 83       	std	Y+6, r18	; 0x06
}
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
    1828:	2e 2f       	mov	r18, r30
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	40 e0       	ldi	r20, 0x00	; 0
    182e:	50 e0       	ldi	r21, 0x00	; 0
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	20 58       	subi	r18, 0x80	; 128
    183a:	3c 45       	sbci	r19, 0x5C	; 92
    183c:	44 49       	sbci	r20, 0x94	; 148
    183e:	5b 4c       	sbci	r21, 0xCB	; 203
    1840:	6e 40       	sbci	r22, 0x0E	; 14
    1842:	71 09       	sbc	r23, r1
    1844:	81 09       	sbc	r24, r1
    1846:	91 09       	sbc	r25, r1
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
    1848:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <__adddi3>
    184c:	39 01       	movw	r6, r18
    184e:	4a 01       	movw	r8, r20
    1850:	6c 83       	std	Y+4, r22	; 0x04
    1852:	b7 2f       	mov	r27, r23
    1854:	a8 2f       	mov	r26, r24
    1856:	f9 2f       	mov	r31, r25
  now += ((uint64_t)hours) * 60 * 60;
    1858:	2f 81       	ldd	r18, Y+7	; 0x07
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	40 e0       	ldi	r20, 0x00	; 0
    185e:	50 e0       	ldi	r21, 0x00	; 0
    1860:	60 e0       	ldi	r22, 0x00	; 0
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	04 e0       	ldi	r16, 0x04	; 4
    186a:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__ashldi3>
    186e:	af 80       	ldd	r10, Y+7	; 0x07
    1870:	b1 2c       	mov	r11, r1
    1872:	c1 2c       	mov	r12, r1
    1874:	d1 2c       	mov	r13, r1
    1876:	e1 2c       	mov	r14, r1
    1878:	f1 2c       	mov	r15, r1
    187a:	00 e0       	ldi	r16, 0x00	; 0
    187c:	10 e0       	ldi	r17, 0x00	; 0
    187e:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__subdi3>
    1882:	59 01       	movw	r10, r18
    1884:	6a 01       	movw	r12, r20
    1886:	7b 01       	movw	r14, r22
    1888:	e8 2f       	mov	r30, r24
    188a:	19 2f       	mov	r17, r25
    188c:	04 e0       	ldi	r16, 0x04	; 4
    188e:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__ashldi3>
    1892:	0e 2f       	mov	r16, r30
    1894:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__subdi3>
    1898:	04 e0       	ldi	r16, 0x04	; 4
    189a:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__ashldi3>
    189e:	59 01       	movw	r10, r18
    18a0:	6a 01       	movw	r12, r20
    18a2:	7b 01       	movw	r14, r22
    18a4:	8c 01       	movw	r16, r24
    18a6:	93 01       	movw	r18, r6
    18a8:	a4 01       	movw	r20, r8
    18aa:	6c 81       	ldd	r22, Y+4	; 0x04
    18ac:	7b 2f       	mov	r23, r27
    18ae:	8a 2f       	mov	r24, r26
    18b0:	9f 2f       	mov	r25, r31
    18b2:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <__adddi3>
    18b6:	b2 2e       	mov	r11, r18
    18b8:	c3 2e       	mov	r12, r19
    18ba:	d4 2e       	mov	r13, r20
    18bc:	65 2e       	mov	r6, r21
    18be:	76 2e       	mov	r7, r22
    18c0:	87 2e       	mov	r8, r23
    18c2:	98 2e       	mov	r9, r24
    18c4:	9c 83       	std	Y+4, r25	; 0x04
  now += ((uint64_t)minutes) * 60;
    18c6:	ad 81       	ldd	r26, Y+5	; 0x05
    18c8:	6a 2f       	mov	r22, r26
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	2c e3       	ldi	r18, 0x3C	; 60
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e0       	ldi	r20, 0x00	; 0
    18d6:	50 e0       	ldi	r21, 0x00	; 0
    18d8:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <__umulsidi3>
    18dc:	a2 2e       	mov	r10, r18
    18de:	a3 2f       	mov	r26, r19
    18e0:	f4 2f       	mov	r31, r20
    18e2:	e5 2f       	mov	r30, r21
    18e4:	7b 01       	movw	r14, r22
    18e6:	8c 01       	movw	r16, r24
    18e8:	2b 2d       	mov	r18, r11
    18ea:	3c 2d       	mov	r19, r12
    18ec:	4d 2d       	mov	r20, r13
    18ee:	56 2d       	mov	r21, r6
    18f0:	67 2d       	mov	r22, r7
    18f2:	78 2d       	mov	r23, r8
    18f4:	89 2d       	mov	r24, r9
    18f6:	9c 81       	ldd	r25, Y+4	; 0x04
    18f8:	ba 2e       	mov	r11, r26
    18fa:	cf 2e       	mov	r12, r31
    18fc:	de 2e       	mov	r13, r30
    18fe:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <__adddi3>
    1902:	39 01       	movw	r6, r18
    1904:	4a 01       	movw	r8, r20
    1906:	b6 2f       	mov	r27, r22
    1908:	7c 83       	std	Y+4, r23	; 0x04
    190a:	f8 2f       	mov	r31, r24
    190c:	e9 2f       	mov	r30, r25
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
    190e:	28 85       	ldd	r18, Y+8	; 0x08
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	40 e0       	ldi	r20, 0x00	; 0
    1914:	50 e0       	ldi	r21, 0x00	; 0
    1916:	60 e0       	ldi	r22, 0x00	; 0
    1918:	70 e0       	ldi	r23, 0x00	; 0
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	af ef       	ldi	r26, 0xFF	; 255
    1920:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <__adddi3_s8>
    1924:	a5 2c       	mov	r10, r5
    1926:	b4 2c       	mov	r11, r4
    1928:	c3 2c       	mov	r12, r3
    192a:	d2 2c       	mov	r13, r2
    192c:	e9 80       	ldd	r14, Y+1	; 0x01
    192e:	fa 80       	ldd	r15, Y+2	; 0x02
    1930:	0b 81       	ldd	r16, Y+3	; 0x03
    1932:	1e 81       	ldd	r17, Y+6	; 0x06
    1934:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <__adddi3>
    1938:	59 01       	movw	r10, r18
    193a:	6a 01       	movw	r12, r20
    193c:	7b 01       	movw	r14, r22
    193e:	a8 2f       	mov	r26, r24
    1940:	19 2f       	mov	r17, r25
    1942:	02 e0       	ldi	r16, 0x02	; 2
    1944:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__ashldi3>
    1948:	0a 2f       	mov	r16, r26
    194a:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__subdi3>
    194e:	59 01       	movw	r10, r18
    1950:	6a 01       	movw	r12, r20
    1952:	7b 01       	movw	r14, r22
    1954:	a8 2f       	mov	r26, r24
    1956:	19 2f       	mov	r17, r25
    1958:	04 e0       	ldi	r16, 0x04	; 4
    195a:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__ashldi3>
    195e:	0a 2f       	mov	r16, r26
    1960:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__subdi3>
    1964:	59 01       	movw	r10, r18
    1966:	6a 01       	movw	r12, r20
    1968:	7b 01       	movw	r14, r22
    196a:	a8 2f       	mov	r26, r24
    196c:	19 2f       	mov	r17, r25
    196e:	04 e0       	ldi	r16, 0x04	; 4
    1970:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__ashldi3>
    1974:	0a 2f       	mov	r16, r26
    1976:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__subdi3>
    197a:	07 e0       	ldi	r16, 0x07	; 7
    197c:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__ashldi3>
    1980:	59 01       	movw	r10, r18
    1982:	6a 01       	movw	r12, r20
    1984:	7b 01       	movw	r14, r22
    1986:	8c 01       	movw	r16, r24
  now += ((uint64_t)hours) * 60 * 60;
  now += ((uint64_t)minutes) * 60;
  now += (uint64_t)seconds;
    1988:	93 01       	movw	r18, r6
    198a:	a4 01       	movw	r20, r8
    198c:	6b 2f       	mov	r22, r27
    198e:	7c 81       	ldd	r23, Y+4	; 0x04
    1990:	8f 2f       	mov	r24, r31
    1992:	9e 2f       	mov	r25, r30
    1994:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <__adddi3>
  uint64_t equinox;
  
  struct GPS_reading * gps = (struct GPS_reading *)&(Current_state.gps);

  equinox = get_seconds_since_pivot(2015, 3, 20, 22, 45, 0);
  seconds_since_pivot = get_seconds_since_pivot(gps->year, gps->month, gps->date, gps->hours, gps->minutes, gps->seconds);
    1998:	20 93 c3 04 	sts	0x04C3, r18
    199c:	30 93 c4 04 	sts	0x04C4, r19
    19a0:	40 93 c5 04 	sts	0x04C5, r20
    19a4:	50 93 c6 04 	sts	0x04C6, r21
    19a8:	60 93 c7 04 	sts	0x04C7, r22
    19ac:	70 93 c8 04 	sts	0x04C8, r23
    19b0:	80 93 c9 04 	sts	0x04C9, r24
    19b4:	90 93 ca 04 	sts	0x04CA, r25
  
  seconds_since_equinox = seconds_since_pivot - equinox;
    19b8:	2c 5e       	subi	r18, 0xEC	; 236
    19ba:	34 41       	sbci	r19, 0x14	; 20
    19bc:	48 46       	sbci	r20, 0x68	; 104
    19be:	51 09       	sbc	r21, r1
    19c0:	61 09       	sbc	r22, r1
    19c2:	71 09       	sbc	r23, r1
    19c4:	81 09       	sbc	r24, r1
    19c6:	91 09       	sbc	r25, r1
    19c8:	20 93 cb 04 	sts	0x04CB, r18
    19cc:	30 93 cc 04 	sts	0x04CC, r19
    19d0:	40 93 cd 04 	sts	0x04CD, r20
    19d4:	50 93 ce 04 	sts	0x04CE, r21
    19d8:	60 93 cf 04 	sts	0x04CF, r22
    19dc:	70 93 d0 04 	sts	0x04D0, r23
    19e0:	80 93 d1 04 	sts	0x04D1, r24
    19e4:	90 93 d2 04 	sts	0x04D2, r25
  {
	  p=(uint8_t)(seconds_since_equinox>>(8*i));
	  transmit_UART0(p);
  }*/
  
}
    19e8:	29 96       	adiw	r28, 0x09	; 9
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	1f 91       	pop	r17
    19fa:	0f 91       	pop	r16
    19fc:	ff 90       	pop	r15
    19fe:	ef 90       	pop	r14
    1a00:	df 90       	pop	r13
    1a02:	cf 90       	pop	r12
    1a04:	bf 90       	pop	r11
    1a06:	af 90       	pop	r10
    1a08:	9f 90       	pop	r9
    1a0a:	8f 90       	pop	r8
    1a0c:	7f 90       	pop	r7
    1a0e:	6f 90       	pop	r6
    1a10:	5f 90       	pop	r5
    1a12:	4f 90       	pop	r4
    1a14:	3f 90       	pop	r3
    1a16:	2f 90       	pop	r2
    1a18:	08 95       	ret
uint64_t get_seconds_since_pivot(uint16_t year, uint8_t month, uint8_t date, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
  uint64_t now = 0;
  
  now += ((uint64_t)year - 2015) * 365 * 24 * 60 * 60;
  now += ((uint64_t)date + days_in_months(month) - 1) * 24 * 60 * 60;
    1a1a:	51 2c       	mov	r5, r1
    1a1c:	41 2c       	mov	r4, r1
    1a1e:	31 2c       	mov	r3, r1
    1a20:	21 2c       	mov	r2, r1
    1a22:	19 82       	std	Y+1, r1	; 0x01
    1a24:	1a 82       	std	Y+2, r1	; 0x02
    1a26:	1b 82       	std	Y+3, r1	; 0x03
    1a28:	1e 82       	std	Y+6, r1	; 0x06
    1a2a:	fe ce       	rjmp	.-516    	; 0x1828 <get_seconds_since_equinox+0x148>

00001a2c <ecef2eci>:
  }*/
  
}

void ecef2eci(vector v_ecef, vector v_eci)
{
    1a2c:	4f 92       	push	r4
    1a2e:	5f 92       	push	r5
    1a30:	6f 92       	push	r6
    1a32:	7f 92       	push	r7
    1a34:	af 92       	push	r10
    1a36:	bf 92       	push	r11
    1a38:	cf 92       	push	r12
    1a3a:	df 92       	push	r13
    1a3c:	ef 92       	push	r14
    1a3e:	ff 92       	push	r15
    1a40:	0f 93       	push	r16
    1a42:	1f 93       	push	r17
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	a4 97       	sbiw	r28, 0x24	; 36
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	de bf       	out	0x3e, r29	; 62
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	cd bf       	out	0x3d, r28	; 61
    1a58:	8c 01       	movw	r16, r24
    1a5a:	5b 01       	movw	r10, r22
  float sidereal_time = STPERUT * seconds_since_equinox;
    1a5c:	20 91 cb 04 	lds	r18, 0x04CB
    1a60:	30 91 cc 04 	lds	r19, 0x04CC
    1a64:	40 91 cd 04 	lds	r20, 0x04CD
    1a68:	50 91 ce 04 	lds	r21, 0x04CE
    1a6c:	60 91 cf 04 	lds	r22, 0x04CF
    1a70:	70 91 d0 04 	lds	r23, 0x04D0
    1a74:	80 91 d1 04 	lds	r24, 0x04D1
    1a78:	90 91 d2 04 	lds	r25, 0x04D2
    1a7c:	0e 94 4a 2c 	call	0x5894	; 0x5894 <__floatundisf>
    1a80:	27 eb       	ldi	r18, 0xB7	; 183
    1a82:	39 e5       	ldi	r19, 0x59	; 89
    1a84:	40 e8       	ldi	r20, 0x80	; 128
    1a86:	5f e3       	ldi	r21, 0x3F	; 63
    1a88:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
  float phi = W_EARTH_ROT * sidereal_time;
    1a8c:	2e eb       	ldi	r18, 0xBE	; 190
    1a8e:	37 ef       	ldi	r19, 0xF7	; 247
    1a90:	48 e9       	ldi	r20, 0x98	; 152
    1a92:	58 e3       	ldi	r21, 0x38	; 56
    1a94:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    1a98:	2b 01       	movw	r4, r22
    1a9a:	3c 01       	movw	r6, r24
  
  matrix m_rot = { { cos(phi), sin(phi), 0 },
    1a9c:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <cos>
    1aa0:	6b 01       	movw	r12, r22
    1aa2:	7c 01       	movw	r14, r24
    1aa4:	69 83       	std	Y+1, r22	; 0x01
    1aa6:	7a 83       	std	Y+2, r23	; 0x02
    1aa8:	8b 83       	std	Y+3, r24	; 0x03
    1aaa:	9c 83       	std	Y+4, r25	; 0x04
    1aac:	c3 01       	movw	r24, r6
    1aae:	b2 01       	movw	r22, r4
    1ab0:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <sin>
    1ab4:	6d 83       	std	Y+5, r22	; 0x05
    1ab6:	7e 83       	std	Y+6, r23	; 0x06
    1ab8:	8f 83       	std	Y+7, r24	; 0x07
    1aba:	98 87       	std	Y+8, r25	; 0x08
    1abc:	19 86       	std	Y+9, r1	; 0x09
    1abe:	1a 86       	std	Y+10, r1	; 0x0a
    1ac0:	1b 86       	std	Y+11, r1	; 0x0b
    1ac2:	1c 86       	std	Y+12, r1	; 0x0c
                   { -sin(phi), cos(phi), 0 },
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	b0 58       	subi	r27, 0x80	; 128
void ecef2eci(vector v_ecef, vector v_eci)
{
  float sidereal_time = STPERUT * seconds_since_equinox;
  float phi = W_EARTH_ROT * sidereal_time;
  
  matrix m_rot = { { cos(phi), sin(phi), 0 },
    1aca:	8d 87       	std	Y+13, r24	; 0x0d
    1acc:	9e 87       	std	Y+14, r25	; 0x0e
    1ace:	af 87       	std	Y+15, r26	; 0x0f
    1ad0:	b8 8b       	std	Y+16, r27	; 0x10
    1ad2:	c9 8a       	std	Y+17, r12	; 0x11
    1ad4:	da 8a       	std	Y+18, r13	; 0x12
    1ad6:	eb 8a       	std	Y+19, r14	; 0x13
    1ad8:	fc 8a       	std	Y+20, r15	; 0x14
    1ada:	1d 8a       	std	Y+21, r1	; 0x15
    1adc:	1e 8a       	std	Y+22, r1	; 0x16
    1ade:	1f 8a       	std	Y+23, r1	; 0x17
    1ae0:	18 8e       	std	Y+24, r1	; 0x18
    1ae2:	19 8e       	std	Y+25, r1	; 0x19
    1ae4:	1a 8e       	std	Y+26, r1	; 0x1a
    1ae6:	1b 8e       	std	Y+27, r1	; 0x1b
    1ae8:	1c 8e       	std	Y+28, r1	; 0x1c
    1aea:	1d 8e       	std	Y+29, r1	; 0x1d
    1aec:	1e 8e       	std	Y+30, r1	; 0x1e
    1aee:	1f 8e       	std	Y+31, r1	; 0x1f
    1af0:	18 a2       	std	Y+32, r1	; 0x20
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	a0 e8       	ldi	r26, 0x80	; 128
    1af8:	bf e3       	ldi	r27, 0x3F	; 63
    1afa:	89 a3       	std	Y+33, r24	; 0x21
    1afc:	9a a3       	std	Y+34, r25	; 0x22
    1afe:	ab a3       	std	Y+35, r26	; 0x23
    1b00:	bc a3       	std	Y+36, r27	; 0x24
                   { -sin(phi), cos(phi), 0 },
                   { 0, 0, 1 } };
               
  vector_into_matrix(v_ecef, m_rot, v_eci);
    1b02:	a5 01       	movw	r20, r10
    1b04:	be 01       	movw	r22, r28
    1b06:	6f 5f       	subi	r22, 0xFF	; 255
    1b08:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0a:	c8 01       	movw	r24, r16
    1b0c:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <vector_into_matrix>
  p = (uint8_t)(-1 * phi1);
  else
  p = (uint8_t)phi1;
  transmit_UART0(p);
*/
}
    1b10:	a4 96       	adiw	r28, 0x24	; 36
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	de bf       	out	0x3e, r29	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	cd bf       	out	0x3d, r28	; 61
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	ff 90       	pop	r15
    1b26:	ef 90       	pop	r14
    1b28:	df 90       	pop	r13
    1b2a:	cf 90       	pop	r12
    1b2c:	bf 90       	pop	r11
    1b2e:	af 90       	pop	r10
    1b30:	7f 90       	pop	r7
    1b32:	6f 90       	pop	r6
    1b34:	5f 90       	pop	r5
    1b36:	4f 90       	pop	r4
    1b38:	08 95       	ret

00001b3a <eci2ecef>:

void eci2ecef(vector v_eci, vector v_ecef)//interchange arguments-error1
{
    1b3a:	4f 92       	push	r4
    1b3c:	5f 92       	push	r5
    1b3e:	6f 92       	push	r6
    1b40:	7f 92       	push	r7
    1b42:	af 92       	push	r10
    1b44:	bf 92       	push	r11
    1b46:	cf 92       	push	r12
    1b48:	df 92       	push	r13
    1b4a:	ef 92       	push	r14
    1b4c:	ff 92       	push	r15
    1b4e:	0f 93       	push	r16
    1b50:	1f 93       	push	r17
    1b52:	cf 93       	push	r28
    1b54:	df 93       	push	r29
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	a4 97       	sbiw	r28, 0x24	; 36
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	8c 01       	movw	r16, r24
    1b68:	5b 01       	movw	r10, r22
  float sidereal_time = STPERUT * seconds_since_equinox;
    1b6a:	20 91 cb 04 	lds	r18, 0x04CB
    1b6e:	30 91 cc 04 	lds	r19, 0x04CC
    1b72:	40 91 cd 04 	lds	r20, 0x04CD
    1b76:	50 91 ce 04 	lds	r21, 0x04CE
    1b7a:	60 91 cf 04 	lds	r22, 0x04CF
    1b7e:	70 91 d0 04 	lds	r23, 0x04D0
    1b82:	80 91 d1 04 	lds	r24, 0x04D1
    1b86:	90 91 d2 04 	lds	r25, 0x04D2
    1b8a:	0e 94 4a 2c 	call	0x5894	; 0x5894 <__floatundisf>
    1b8e:	27 eb       	ldi	r18, 0xB7	; 183
    1b90:	39 e5       	ldi	r19, 0x59	; 89
    1b92:	40 e8       	ldi	r20, 0x80	; 128
    1b94:	5f e3       	ldi	r21, 0x3F	; 63
    1b96:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
  float phi = W_EARTH_ROT * sidereal_time;
    1b9a:	2e eb       	ldi	r18, 0xBE	; 190
    1b9c:	37 ef       	ldi	r19, 0xF7	; 247
    1b9e:	48 e9       	ldi	r20, 0x98	; 152
    1ba0:	58 e3       	ldi	r21, 0x38	; 56
    1ba2:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    1ba6:	2b 01       	movw	r4, r22
    1ba8:	3c 01       	movw	r6, r24
  
  matrix m_rot = { { cos(phi), -sin(phi), 0 },
    1baa:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <cos>
    1bae:	6b 01       	movw	r12, r22
    1bb0:	7c 01       	movw	r14, r24
    1bb2:	69 83       	std	Y+1, r22	; 0x01
    1bb4:	7a 83       	std	Y+2, r23	; 0x02
    1bb6:	8b 83       	std	Y+3, r24	; 0x03
    1bb8:	9c 83       	std	Y+4, r25	; 0x04
    1bba:	c3 01       	movw	r24, r6
    1bbc:	b2 01       	movw	r22, r4
    1bbe:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <sin>
    1bc2:	2b 01       	movw	r4, r22
    1bc4:	3c 01       	movw	r6, r24
    1bc6:	77 fa       	bst	r7, 7
    1bc8:	70 94       	com	r7
    1bca:	77 f8       	bld	r7, 7
    1bcc:	70 94       	com	r7
    1bce:	4d 82       	std	Y+5, r4	; 0x05
    1bd0:	5e 82       	std	Y+6, r5	; 0x06
    1bd2:	6f 82       	std	Y+7, r6	; 0x07
    1bd4:	78 86       	std	Y+8, r7	; 0x08
    1bd6:	19 86       	std	Y+9, r1	; 0x09
    1bd8:	1a 86       	std	Y+10, r1	; 0x0a
    1bda:	1b 86       	std	Y+11, r1	; 0x0b
    1bdc:	1c 86       	std	Y+12, r1	; 0x0c
    1bde:	6d 87       	std	Y+13, r22	; 0x0d
    1be0:	7e 87       	std	Y+14, r23	; 0x0e
    1be2:	8f 87       	std	Y+15, r24	; 0x0f
    1be4:	98 8b       	std	Y+16, r25	; 0x10
    1be6:	c9 8a       	std	Y+17, r12	; 0x11
    1be8:	da 8a       	std	Y+18, r13	; 0x12
    1bea:	eb 8a       	std	Y+19, r14	; 0x13
    1bec:	fc 8a       	std	Y+20, r15	; 0x14
    1bee:	1d 8a       	std	Y+21, r1	; 0x15
    1bf0:	1e 8a       	std	Y+22, r1	; 0x16
    1bf2:	1f 8a       	std	Y+23, r1	; 0x17
    1bf4:	18 8e       	std	Y+24, r1	; 0x18
    1bf6:	19 8e       	std	Y+25, r1	; 0x19
    1bf8:	1a 8e       	std	Y+26, r1	; 0x1a
    1bfa:	1b 8e       	std	Y+27, r1	; 0x1b
    1bfc:	1c 8e       	std	Y+28, r1	; 0x1c
    1bfe:	1d 8e       	std	Y+29, r1	; 0x1d
    1c00:	1e 8e       	std	Y+30, r1	; 0x1e
    1c02:	1f 8e       	std	Y+31, r1	; 0x1f
    1c04:	18 a2       	std	Y+32, r1	; 0x20
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	a0 e8       	ldi	r26, 0x80	; 128
    1c0c:	bf e3       	ldi	r27, 0x3F	; 63
    1c0e:	89 a3       	std	Y+33, r24	; 0x21
    1c10:	9a a3       	std	Y+34, r25	; 0x22
    1c12:	ab a3       	std	Y+35, r26	; 0x23
    1c14:	bc a3       	std	Y+36, r27	; 0x24
                   { sin(phi), cos(phi), 0 },
                   { 0, 0, 1 } };
               
  vector_into_matrix(v_eci, m_rot, v_ecef);
    1c16:	a5 01       	movw	r20, r10
    1c18:	be 01       	movw	r22, r28
    1c1a:	6f 5f       	subi	r22, 0xFF	; 255
    1c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1e:	c8 01       	movw	r24, r16
    1c20:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <vector_into_matrix>
}
    1c24:	a4 96       	adiw	r28, 0x24	; 36
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	1f 91       	pop	r17
    1c36:	0f 91       	pop	r16
    1c38:	ff 90       	pop	r15
    1c3a:	ef 90       	pop	r14
    1c3c:	df 90       	pop	r13
    1c3e:	cf 90       	pop	r12
    1c40:	bf 90       	pop	r11
    1c42:	af 90       	pop	r10
    1c44:	7f 90       	pop	r7
    1c46:	6f 90       	pop	r6
    1c48:	5f 90       	pop	r5
    1c4a:	4f 90       	pop	r4
    1c4c:	08 95       	ret

00001c4e <eci2orbit>:


void eci2orbit(vector v_r, vector v_v, vector v_eci, vector v_orbit)
{
    1c4e:	cf 92       	push	r12
    1c50:	df 92       	push	r13
    1c52:	ef 92       	push	r14
    1c54:	ff 92       	push	r15
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	c8 54       	subi	r28, 0x48	; 72
    1c64:	d1 09       	sbc	r29, r1
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	8c 01       	movw	r16, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	7a 01       	movw	r14, r20
    1c76:	69 01       	movw	r12, r18
  vector v_o_x, v_o_y, v_o_z;
  uint8_t i;
  
  vector_cross_product(v_v, v_r, v_o_y);
    1c78:	ae 01       	movw	r20, r28
    1c7a:	4f 5c       	subi	r20, 0xCF	; 207
    1c7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c7e:	b8 01       	movw	r22, r16
    1c80:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <vector_cross_product>
  convert_unit_vector(v_o_y);
    1c84:	ce 01       	movw	r24, r28
    1c86:	c1 96       	adiw	r24, 0x31	; 49
    1c88:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <convert_unit_vector>
  
  for(i = 0; i < 3; i++)
    v_o_z[i] = -1 * v_r[i];
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	80 81       	ld	r24, Z
    1c90:	91 81       	ldd	r25, Z+1	; 0x01
    1c92:	a2 81       	ldd	r26, Z+2	; 0x02
    1c94:	b3 81       	ldd	r27, Z+3	; 0x03
    1c96:	b0 58       	subi	r27, 0x80	; 128
    1c98:	8d a3       	std	Y+37, r24	; 0x25
    1c9a:	9e a3       	std	Y+38, r25	; 0x26
    1c9c:	af a3       	std	Y+39, r26	; 0x27
    1c9e:	b8 a7       	std	Y+40, r27	; 0x28
    1ca0:	44 81       	ldd	r20, Z+4	; 0x04
    1ca2:	55 81       	ldd	r21, Z+5	; 0x05
    1ca4:	66 81       	ldd	r22, Z+6	; 0x06
    1ca6:	77 81       	ldd	r23, Z+7	; 0x07
    1ca8:	70 58       	subi	r23, 0x80	; 128
    1caa:	49 a7       	std	Y+41, r20	; 0x29
    1cac:	5a a7       	std	Y+42, r21	; 0x2a
    1cae:	6b a7       	std	Y+43, r22	; 0x2b
    1cb0:	7c a7       	std	Y+44, r23	; 0x2c
    1cb2:	80 85       	ldd	r24, Z+8	; 0x08
    1cb4:	91 85       	ldd	r25, Z+9	; 0x09
    1cb6:	a2 85       	ldd	r26, Z+10	; 0x0a
    1cb8:	b3 85       	ldd	r27, Z+11	; 0x0b
    1cba:	b0 58       	subi	r27, 0x80	; 128
    1cbc:	8d a7       	std	Y+45, r24	; 0x2d
    1cbe:	9e a7       	std	Y+46, r25	; 0x2e
    1cc0:	af a7       	std	Y+47, r26	; 0x2f
    1cc2:	b8 ab       	std	Y+48, r27	; 0x30
  convert_unit_vector(v_o_z);
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	85 96       	adiw	r24, 0x25	; 37
    1cc8:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <convert_unit_vector>
  
  vector_cross_product(v_o_y, v_o_z, v_o_x);
    1ccc:	ae 01       	movw	r20, r28
    1cce:	43 5c       	subi	r20, 0xC3	; 195
    1cd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd2:	be 01       	movw	r22, r28
    1cd4:	6b 5d       	subi	r22, 0xDB	; 219
    1cd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd8:	ce 01       	movw	r24, r28
    1cda:	c1 96       	adiw	r24, 0x31	; 49
    1cdc:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <vector_cross_product>
  convert_unit_vector(v_o_x);
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	cd 96       	adiw	r24, 0x3d	; 61
    1ce4:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <convert_unit_vector>
  
  matrix m_o = { { v_o_x[0], v_o_y[0], v_o_z[0] },
    1ce8:	21 96       	adiw	r28, 0x01	; 1
    1cea:	8c ad       	ldd	r24, Y+60	; 0x3c
    1cec:	9d ad       	ldd	r25, Y+61	; 0x3d
    1cee:	ae ad       	ldd	r26, Y+62	; 0x3e
    1cf0:	bf ad       	ldd	r27, Y+63	; 0x3f
    1cf2:	21 97       	sbiw	r28, 0x01	; 1
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	9a 83       	std	Y+2, r25	; 0x02
    1cf8:	ab 83       	std	Y+3, r26	; 0x03
    1cfa:	bc 83       	std	Y+4, r27	; 0x04
    1cfc:	89 a9       	ldd	r24, Y+49	; 0x31
    1cfe:	9a a9       	ldd	r25, Y+50	; 0x32
    1d00:	ab a9       	ldd	r26, Y+51	; 0x33
    1d02:	bc a9       	ldd	r27, Y+52	; 0x34
    1d04:	8d 83       	std	Y+5, r24	; 0x05
    1d06:	9e 83       	std	Y+6, r25	; 0x06
    1d08:	af 83       	std	Y+7, r26	; 0x07
    1d0a:	b8 87       	std	Y+8, r27	; 0x08
    1d0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d10:	af a1       	ldd	r26, Y+39	; 0x27
    1d12:	b8 a5       	ldd	r27, Y+40	; 0x28
    1d14:	89 87       	std	Y+9, r24	; 0x09
    1d16:	9a 87       	std	Y+10, r25	; 0x0a
    1d18:	ab 87       	std	Y+11, r26	; 0x0b
    1d1a:	bc 87       	std	Y+12, r27	; 0x0c
    1d1c:	25 96       	adiw	r28, 0x05	; 5
    1d1e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d20:	9d ad       	ldd	r25, Y+61	; 0x3d
    1d22:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d24:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d26:	25 97       	sbiw	r28, 0x05	; 5
    1d28:	8d 87       	std	Y+13, r24	; 0x0d
    1d2a:	9e 87       	std	Y+14, r25	; 0x0e
    1d2c:	af 87       	std	Y+15, r26	; 0x0f
    1d2e:	b8 8b       	std	Y+16, r27	; 0x10
    1d30:	8d a9       	ldd	r24, Y+53	; 0x35
    1d32:	9e a9       	ldd	r25, Y+54	; 0x36
    1d34:	af a9       	ldd	r26, Y+55	; 0x37
    1d36:	b8 ad       	ldd	r27, Y+56	; 0x38
    1d38:	89 8b       	std	Y+17, r24	; 0x11
    1d3a:	9a 8b       	std	Y+18, r25	; 0x12
    1d3c:	ab 8b       	std	Y+19, r26	; 0x13
    1d3e:	bc 8b       	std	Y+20, r27	; 0x14
    1d40:	89 a5       	ldd	r24, Y+41	; 0x29
    1d42:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d44:	ab a5       	ldd	r26, Y+43	; 0x2b
    1d46:	bc a5       	ldd	r27, Y+44	; 0x2c
    1d48:	8d 8b       	std	Y+21, r24	; 0x15
    1d4a:	9e 8b       	std	Y+22, r25	; 0x16
    1d4c:	af 8b       	std	Y+23, r26	; 0x17
    1d4e:	b8 8f       	std	Y+24, r27	; 0x18
    1d50:	29 96       	adiw	r28, 0x09	; 9
    1d52:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d54:	9d ad       	ldd	r25, Y+61	; 0x3d
    1d56:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d58:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d5a:	29 97       	sbiw	r28, 0x09	; 9
    1d5c:	89 8f       	std	Y+25, r24	; 0x19
    1d5e:	9a 8f       	std	Y+26, r25	; 0x1a
    1d60:	ab 8f       	std	Y+27, r26	; 0x1b
    1d62:	bc 8f       	std	Y+28, r27	; 0x1c
    1d64:	89 ad       	ldd	r24, Y+57	; 0x39
    1d66:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d68:	ab ad       	ldd	r26, Y+59	; 0x3b
    1d6a:	bc ad       	ldd	r27, Y+60	; 0x3c
    1d6c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d6e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d70:	af 8f       	std	Y+31, r26	; 0x1f
    1d72:	b8 a3       	std	Y+32, r27	; 0x20
    1d74:	0d a5       	ldd	r16, Y+45	; 0x2d
    1d76:	1e a5       	ldd	r17, Y+46	; 0x2e
    1d78:	2f a5       	ldd	r18, Y+47	; 0x2f
    1d7a:	38 a9       	ldd	r19, Y+48	; 0x30
    1d7c:	09 a3       	std	Y+33, r16	; 0x21
    1d7e:	1a a3       	std	Y+34, r17	; 0x22
    1d80:	2b a3       	std	Y+35, r18	; 0x23
    1d82:	3c a3       	std	Y+36, r19	; 0x24
                 { v_o_x[1], v_o_y[1], v_o_z[1] },
                 { v_o_x[2], v_o_y[2], v_o_z[2] } };
                 
  vector_into_matrix(v_eci, m_o, v_orbit);
    1d84:	a6 01       	movw	r20, r12
    1d86:	be 01       	movw	r22, r28
    1d88:	6f 5f       	subi	r22, 0xFF	; 255
    1d8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d8c:	c7 01       	movw	r24, r14
    1d8e:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <vector_into_matrix>
}
    1d92:	c8 5b       	subi	r28, 0xB8	; 184
    1d94:	df 4f       	sbci	r29, 0xFF	; 255
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	f8 94       	cli
    1d9a:	de bf       	out	0x3e, r29	; 62
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	cd bf       	out	0x3d, r28	; 61
    1da0:	df 91       	pop	r29
    1da2:	cf 91       	pop	r28
    1da4:	1f 91       	pop	r17
    1da6:	0f 91       	pop	r16
    1da8:	ff 90       	pop	r15
    1daa:	ef 90       	pop	r14
    1dac:	df 90       	pop	r13
    1dae:	cf 90       	pop	r12
    1db0:	08 95       	ret

00001db2 <ecef2lla>:

void ecef2lla(vector v_ecef, vector v_lla)
{
    1db2:	2f 92       	push	r2
    1db4:	3f 92       	push	r3
    1db6:	4f 92       	push	r4
    1db8:	5f 92       	push	r5
    1dba:	6f 92       	push	r6
    1dbc:	7f 92       	push	r7
    1dbe:	8f 92       	push	r8
    1dc0:	9f 92       	push	r9
    1dc2:	af 92       	push	r10
    1dc4:	bf 92       	push	r11
    1dc6:	cf 92       	push	r12
    1dc8:	df 92       	push	r13
    1dca:	ef 92       	push	r14
    1dcc:	ff 92       	push	r15
    1dce:	1f 93       	push	r17
    1dd0:	cf 93       	push	r28
    1dd2:	df 93       	push	r29
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
    1dd8:	60 97       	sbiw	r28, 0x10	; 16
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	de bf       	out	0x3e, r29	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	cd bf       	out	0x3d, r28	; 61
    1de4:	1b 01       	movw	r2, r22
  float x = v_ecef[0], y = v_ecef[1], z = v_ecef[2];
    1de6:	dc 01       	movw	r26, r24
    1de8:	8d 90       	ld	r8, X+
    1dea:	9d 90       	ld	r9, X+
    1dec:	ad 90       	ld	r10, X+
    1dee:	bc 90       	ld	r11, X
    1df0:	13 97       	sbiw	r26, 0x03	; 3
    1df2:	14 96       	adiw	r26, 0x04	; 4
    1df4:	cd 90       	ld	r12, X+
    1df6:	dd 90       	ld	r13, X+
    1df8:	ed 90       	ld	r14, X+
    1dfa:	fc 90       	ld	r15, X
    1dfc:	17 97       	sbiw	r26, 0x07	; 7
    1dfe:	18 96       	adiw	r26, 0x08	; 8
    1e00:	8d 91       	ld	r24, X+
    1e02:	9d 91       	ld	r25, X+
    1e04:	0d 90       	ld	r0, X+
    1e06:	bc 91       	ld	r27, X
    1e08:	a0 2d       	mov	r26, r0
    1e0a:	8d 83       	std	Y+5, r24	; 0x05
    1e0c:	9e 83       	std	Y+6, r25	; 0x06
    1e0e:	af 83       	std	Y+7, r26	; 0x07
    1e10:	b8 87       	std	Y+8, r27	; 0x08
  float lambda, phi, h, rho, beta, n, sinphi;
  uint8_t i;
  
  lambda = atan2(y, x);
    1e12:	a5 01       	movw	r20, r10
    1e14:	94 01       	movw	r18, r8
    1e16:	c7 01       	movw	r24, r14
    1e18:	b6 01       	movw	r22, r12
    1e1a:	0e 94 1a 2b 	call	0x5634	; 0x5634 <atan2>
    1e1e:	6d 87       	std	Y+13, r22	; 0x0d
    1e20:	7e 87       	std	Y+14, r23	; 0x0e
    1e22:	8f 87       	std	Y+15, r24	; 0x0f
    1e24:	98 8b       	std	Y+16, r25	; 0x10
  rho = sqrt(x * x + y * y);
    1e26:	a5 01       	movw	r20, r10
    1e28:	94 01       	movw	r18, r8
    1e2a:	c5 01       	movw	r24, r10
    1e2c:	b4 01       	movw	r22, r8
    1e2e:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    1e32:	4b 01       	movw	r8, r22
    1e34:	5c 01       	movw	r10, r24
    1e36:	a7 01       	movw	r20, r14
    1e38:	96 01       	movw	r18, r12
    1e3a:	c7 01       	movw	r24, r14
    1e3c:	b6 01       	movw	r22, r12
    1e3e:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    1e42:	9b 01       	movw	r18, r22
    1e44:	ac 01       	movw	r20, r24
    1e46:	c5 01       	movw	r24, r10
    1e48:	b4 01       	movw	r22, r8
    1e4a:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    1e4e:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <sqrt>
    1e52:	69 87       	std	Y+9, r22	; 0x09
    1e54:	7a 87       	std	Y+10, r23	; 0x0a
    1e56:	8b 87       	std	Y+11, r24	; 0x0b
    1e58:	9c 87       	std	Y+12, r25	; 0x0c
  
  beta = atan2(z, (1 - F) * rho);
    1e5a:	25 e4       	ldi	r18, 0x45	; 69
    1e5c:	34 e2       	ldi	r19, 0x24	; 36
    1e5e:	4f e7       	ldi	r20, 0x7F	; 127
    1e60:	5f e3       	ldi	r21, 0x3F	; 63
    1e62:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    1e66:	9b 01       	movw	r18, r22
    1e68:	ac 01       	movw	r20, r24
    1e6a:	6d 81       	ldd	r22, Y+5	; 0x05
    1e6c:	7e 81       	ldd	r23, Y+6	; 0x06
    1e6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e70:	98 85       	ldd	r25, Y+8	; 0x08
    1e72:	0e 94 1a 2b 	call	0x5634	; 0x5634 <atan2>
    1e76:	4b 01       	movw	r8, r22
    1e78:	5c 01       	movw	r10, r24
    1e7a:	15 e0       	ldi	r17, 0x05	; 5
  for(i = 0; i < 5; i++)
  {
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    1e7c:	c5 01       	movw	r24, r10
    1e7e:	b4 01       	movw	r22, r8
    1e80:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <cos>
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e4       	ldi	r20, 0x40	; 64
    1e8a:	50 e4       	ldi	r21, 0x40	; 64
    1e8c:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <pow>
    1e90:	6b 01       	movw	r12, r22
    1e92:	7c 01       	movw	r14, r24
    1e94:	c5 01       	movw	r24, r10
    1e96:	b4 01       	movw	r22, r8
    1e98:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <sin>
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e4       	ldi	r20, 0x40	; 64
    1ea2:	50 e4       	ldi	r21, 0x40	; 64
    1ea4:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <pow>
    1ea8:	4b 01       	movw	r8, r22
    1eaa:	5c 01       	movw	r10, r24
    1eac:	2e ea       	ldi	r18, 0xAE	; 174
    1eae:	39 ec       	ldi	r19, 0xC9	; 201
    1eb0:	46 e2       	ldi	r20, 0x26	; 38
    1eb2:	57 e4       	ldi	r21, 0x47	; 71
    1eb4:	c7 01       	movw	r24, r14
    1eb6:	b6 01       	movw	r22, r12
    1eb8:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    1ebc:	9b 01       	movw	r18, r22
    1ebe:	ac 01       	movw	r20, r24
    1ec0:	69 85       	ldd	r22, Y+9	; 0x09
    1ec2:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ec4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ec6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ec8:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    1ecc:	6b 01       	movw	r12, r22
    1ece:	7c 01       	movw	r14, r24
    1ed0:	22 e5       	ldi	r18, 0x52	; 82
    1ed2:	39 e5       	ldi	r19, 0x59	; 89
    1ed4:	47 e2       	ldi	r20, 0x27	; 39
    1ed6:	57 e4       	ldi	r21, 0x47	; 71
    1ed8:	c5 01       	movw	r24, r10
    1eda:	b4 01       	movw	r22, r8
    1edc:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    1ee0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ee2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ee4:	4f 81       	ldd	r20, Y+7	; 0x07
    1ee6:	58 85       	ldd	r21, Y+8	; 0x08
    1ee8:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    1eec:	a7 01       	movw	r20, r14
    1eee:	96 01       	movw	r18, r12
    1ef0:	0e 94 1a 2b 	call	0x5634	; 0x5634 <atan2>
    1ef4:	6b 01       	movw	r12, r22
    1ef6:	7c 01       	movw	r14, r24
    beta = atan2((1 - F) * sin(phi), cos(phi));
    1ef8:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <cos>
    1efc:	69 83       	std	Y+1, r22	; 0x01
    1efe:	7a 83       	std	Y+2, r23	; 0x02
    1f00:	8b 83       	std	Y+3, r24	; 0x03
    1f02:	9c 83       	std	Y+4, r25	; 0x04
    1f04:	c7 01       	movw	r24, r14
    1f06:	b6 01       	movw	r22, r12
    1f08:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <sin>
    1f0c:	2b 01       	movw	r4, r22
    1f0e:	3c 01       	movw	r6, r24
    1f10:	25 e4       	ldi	r18, 0x45	; 69
    1f12:	34 e2       	ldi	r19, 0x24	; 36
    1f14:	4f e7       	ldi	r20, 0x7F	; 127
    1f16:	5f e3       	ldi	r21, 0x3F	; 63
    1f18:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    1f1c:	29 81       	ldd	r18, Y+1	; 0x01
    1f1e:	3a 81       	ldd	r19, Y+2	; 0x02
    1f20:	4b 81       	ldd	r20, Y+3	; 0x03
    1f22:	5c 81       	ldd	r21, Y+4	; 0x04
    1f24:	0e 94 1a 2b 	call	0x5634	; 0x5634 <atan2>
    1f28:	4b 01       	movw	r8, r22
    1f2a:	5c 01       	movw	r10, r24
    1f2c:	11 50       	subi	r17, 0x01	; 1
  
  lambda = atan2(y, x);
  rho = sqrt(x * x + y * y);
  
  beta = atan2(z, (1 - F) * rho);
  for(i = 0; i < 5; i++)
    1f2e:	09 f0       	breq	.+2      	; 0x1f32 <ecef2lla+0x180>
    1f30:	a5 cf       	rjmp	.-182    	; 0x1e7c <ecef2lla+0xca>
  {
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    beta = atan2((1 - F) * sin(phi), cos(phi));
  }
  sinphi = sin(phi);
  n = A / sqrt(1 - E2 * sinphi *sinphi);
    1f32:	2a e8       	ldi	r18, 0x8A	; 138
    1f34:	3c e5       	ldi	r19, 0x5C	; 92
    1f36:	4b ed       	ldi	r20, 0xDB	; 219
    1f38:	5b e3       	ldi	r21, 0x3B	; 59
    1f3a:	c3 01       	movw	r24, r6
    1f3c:	b2 01       	movw	r22, r4
    1f3e:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    1f42:	a3 01       	movw	r20, r6
    1f44:	92 01       	movw	r18, r4
    1f46:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    1f4a:	9b 01       	movw	r18, r22
    1f4c:	ac 01       	movw	r20, r24
    1f4e:	60 e0       	ldi	r22, 0x00	; 0
    1f50:	70 e0       	ldi	r23, 0x00	; 0
    1f52:	80 e8       	ldi	r24, 0x80	; 128
    1f54:	9f e3       	ldi	r25, 0x3F	; 63
    1f56:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    1f5a:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <sqrt>
    1f5e:	9b 01       	movw	r18, r22
    1f60:	ac 01       	movw	r20, r24
    1f62:	62 e3       	ldi	r22, 0x32	; 50
    1f64:	75 ea       	ldi	r23, 0xA5	; 165
    1f66:	82 ec       	ldi	r24, 0xC2	; 194
    1f68:	9a e4       	ldi	r25, 0x4A	; 74
    1f6a:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    1f6e:	4b 01       	movw	r8, r22
    1f70:	5c 01       	movw	r10, r24
  h = rho * cos(phi) + (z + E2 * n * sinphi) * sinphi - n;// bus yhi line nhi chmki
  
  v_lla[0] = phi;
    1f72:	f1 01       	movw	r30, r2
    1f74:	c0 82       	st	Z, r12
    1f76:	d1 82       	std	Z+1, r13	; 0x01
    1f78:	e2 82       	std	Z+2, r14	; 0x02
    1f7a:	f3 82       	std	Z+3, r15	; 0x03
  v_lla[1] = lambda;
    1f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f80:	af 85       	ldd	r26, Y+15	; 0x0f
    1f82:	b8 89       	ldd	r27, Y+16	; 0x10
    1f84:	84 83       	std	Z+4, r24	; 0x04
    1f86:	95 83       	std	Z+5, r25	; 0x05
    1f88:	a6 83       	std	Z+6, r26	; 0x06
    1f8a:	b7 83       	std	Z+7, r27	; 0x07
    phi = atan2(z + B * EP2 * pow(sin(beta), 3), rho - A * E2 * pow(cos(beta), 3));
    beta = atan2((1 - F) * sin(phi), cos(phi));
  }
  sinphi = sin(phi);
  n = A / sqrt(1 - E2 * sinphi *sinphi);
  h = rho * cos(phi) + (z + E2 * n * sinphi) * sinphi - n;// bus yhi line nhi chmki
    1f8c:	29 81       	ldd	r18, Y+1	; 0x01
    1f8e:	3a 81       	ldd	r19, Y+2	; 0x02
    1f90:	4b 81       	ldd	r20, Y+3	; 0x03
    1f92:	5c 81       	ldd	r21, Y+4	; 0x04
    1f94:	69 85       	ldd	r22, Y+9	; 0x09
    1f96:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f98:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f9a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f9c:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    1fa0:	6b 01       	movw	r12, r22
    1fa2:	7c 01       	movw	r14, r24
    1fa4:	2a e8       	ldi	r18, 0x8A	; 138
    1fa6:	3c e5       	ldi	r19, 0x5C	; 92
    1fa8:	4b ed       	ldi	r20, 0xDB	; 219
    1faa:	5b e3       	ldi	r21, 0x3B	; 59
    1fac:	c5 01       	movw	r24, r10
    1fae:	b4 01       	movw	r22, r8
    1fb0:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    1fb4:	a3 01       	movw	r20, r6
    1fb6:	92 01       	movw	r18, r4
    1fb8:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    1fbc:	2d 81       	ldd	r18, Y+5	; 0x05
    1fbe:	3e 81       	ldd	r19, Y+6	; 0x06
    1fc0:	4f 81       	ldd	r20, Y+7	; 0x07
    1fc2:	58 85       	ldd	r21, Y+8	; 0x08
    1fc4:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    1fc8:	a3 01       	movw	r20, r6
    1fca:	92 01       	movw	r18, r4
    1fcc:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    1fd0:	9b 01       	movw	r18, r22
    1fd2:	ac 01       	movw	r20, r24
    1fd4:	c7 01       	movw	r24, r14
    1fd6:	b6 01       	movw	r22, r12
    1fd8:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    1fdc:	a5 01       	movw	r20, r10
    1fde:	94 01       	movw	r18, r8
    1fe0:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
  
  v_lla[0] = phi;
  v_lla[1] = lambda;
  v_lla[2] = h;
    1fe4:	d1 01       	movw	r26, r2
    1fe6:	18 96       	adiw	r26, 0x08	; 8
    1fe8:	6d 93       	st	X+, r22
    1fea:	7d 93       	st	X+, r23
    1fec:	8d 93       	st	X+, r24
    1fee:	9c 93       	st	X, r25
    1ff0:	1b 97       	sbiw	r26, 0x0b	; 11
	   //sen = ((int8_t)((lambda))/2);
	   transmit_UART0(sen);
	   transmit_UART0(sen1);
   }
   */
}
    1ff2:	60 96       	adiw	r28, 0x10	; 16
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	df 91       	pop	r29
    2000:	cf 91       	pop	r28
    2002:	1f 91       	pop	r17
    2004:	ff 90       	pop	r15
    2006:	ef 90       	pop	r14
    2008:	df 90       	pop	r13
    200a:	cf 90       	pop	r12
    200c:	bf 90       	pop	r11
    200e:	af 90       	pop	r10
    2010:	9f 90       	pop	r9
    2012:	8f 90       	pop	r8
    2014:	7f 90       	pop	r7
    2016:	6f 90       	pop	r6
    2018:	5f 90       	pop	r5
    201a:	4f 90       	pop	r4
    201c:	3f 90       	pop	r3
    201e:	2f 90       	pop	r2
    2020:	08 95       	ret

00002022 <ned2ecef>:

void ned2ecef(vector v_ned, vector v_lla, vector v_ecef)
{
    2022:	2f 92       	push	r2
    2024:	3f 92       	push	r3
    2026:	4f 92       	push	r4
    2028:	5f 92       	push	r5
    202a:	6f 92       	push	r6
    202c:	7f 92       	push	r7
    202e:	8f 92       	push	r8
    2030:	9f 92       	push	r9
    2032:	af 92       	push	r10
    2034:	bf 92       	push	r11
    2036:	cf 92       	push	r12
    2038:	df 92       	push	r13
    203a:	ef 92       	push	r14
    203c:	ff 92       	push	r15
    203e:	0f 93       	push	r16
    2040:	1f 93       	push	r17
    2042:	cf 93       	push	r28
    2044:	df 93       	push	r29
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	ac 97       	sbiw	r28, 0x2c	; 44
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	1c 01       	movw	r2, r24
    2058:	7b 01       	movw	r14, r22
    205a:	8a 01       	movw	r16, r20
  float clat = cos(v_lla[0]), clon = cos(v_lla[1]);
    205c:	db 01       	movw	r26, r22
    205e:	4d 90       	ld	r4, X+
    2060:	5d 90       	ld	r5, X+
    2062:	6d 90       	ld	r6, X+
    2064:	7c 90       	ld	r7, X
    2066:	c3 01       	movw	r24, r6
    2068:	b2 01       	movw	r22, r4
    206a:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <cos>
    206e:	6d a3       	std	Y+37, r22	; 0x25
    2070:	7e a3       	std	Y+38, r23	; 0x26
    2072:	8f a3       	std	Y+39, r24	; 0x27
    2074:	98 a7       	std	Y+40, r25	; 0x28
    2076:	f7 01       	movw	r30, r14
    2078:	c4 80       	ldd	r12, Z+4	; 0x04
    207a:	d5 80       	ldd	r13, Z+5	; 0x05
    207c:	e6 80       	ldd	r14, Z+6	; 0x06
    207e:	f7 80       	ldd	r15, Z+7	; 0x07
    2080:	c7 01       	movw	r24, r14
    2082:	b6 01       	movw	r22, r12
    2084:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <cos>
    2088:	4b 01       	movw	r8, r22
    208a:	5c 01       	movw	r10, r24
  float slat = sin(v_lla[0]), slon = sin(v_lla[1]);
    208c:	c3 01       	movw	r24, r6
    208e:	b2 01       	movw	r22, r4
    2090:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <sin>
    2094:	2b 01       	movw	r4, r22
    2096:	3c 01       	movw	r6, r24
    2098:	c7 01       	movw	r24, r14
    209a:	b6 01       	movw	r22, r12
    209c:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <sin>
    20a0:	6b 01       	movw	r12, r22
    20a2:	7c 01       	movw	r14, r24
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
    20a4:	77 fa       	bst	r7, 7
    20a6:	70 94       	com	r7
    20a8:	77 f8       	bld	r7, 7
    20aa:	70 94       	com	r7
  
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
    20ac:	8d a1       	ldd	r24, Y+37	; 0x25
    20ae:	9e a1       	ldd	r25, Y+38	; 0x26
    20b0:	af a1       	ldd	r26, Y+39	; 0x27
    20b2:	b8 a5       	ldd	r27, Y+40	; 0x28
    20b4:	b0 58       	subi	r27, 0x80	; 128
    20b6:	89 a7       	std	Y+41, r24	; 0x29
    20b8:	9a a7       	std	Y+42, r25	; 0x2a
    20ba:	ab a7       	std	Y+43, r26	; 0x2b
    20bc:	bc a7       	std	Y+44, r27	; 0x2c
{
  float clat = cos(v_lla[0]), clon = cos(v_lla[1]);
  float slat = sin(v_lla[0]), slon = sin(v_lla[1]);
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
    20be:	a5 01       	movw	r20, r10
    20c0:	94 01       	movw	r18, r8
    20c2:	c3 01       	movw	r24, r6
    20c4:	b2 01       	movw	r22, r4
    20c6:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    20ca:	69 83       	std	Y+1, r22	; 0x01
    20cc:	7a 83       	std	Y+2, r23	; 0x02
    20ce:	8b 83       	std	Y+3, r24	; 0x03
    20d0:	9c 83       	std	Y+4, r25	; 0x04
  float clat = cos(v_lla[0]), clon = cos(v_lla[1]);
  float slat = sin(v_lla[0]), slon = sin(v_lla[1]);
  vector v_north, v_east, v_down;
  
  v_north[0] = -1 * slat * clon;
  v_north[1] = -1 * slat * slon;
    20d2:	a3 01       	movw	r20, r6
    20d4:	92 01       	movw	r18, r4
    20d6:	c7 01       	movw	r24, r14
    20d8:	b6 01       	movw	r22, r12
    20da:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    20de:	6d 83       	std	Y+5, r22	; 0x05
    20e0:	7e 83       	std	Y+6, r23	; 0x06
    20e2:	8f 83       	std	Y+7, r24	; 0x07
    20e4:	98 87       	std	Y+8, r25	; 0x08
    20e6:	8d a1       	ldd	r24, Y+37	; 0x25
    20e8:	9e a1       	ldd	r25, Y+38	; 0x26
    20ea:	af a1       	ldd	r26, Y+39	; 0x27
    20ec:	b8 a5       	ldd	r27, Y+40	; 0x28
    20ee:	89 87       	std	Y+9, r24	; 0x09
    20f0:	9a 87       	std	Y+10, r25	; 0x0a
    20f2:	ab 87       	std	Y+11, r26	; 0x0b
    20f4:	bc 87       	std	Y+12, r27	; 0x0c
  
  v_north[0] = -1 * slat * clon;
  v_north[1] = -1 * slat * slon;
  v_north[2] = clat;
  
  v_east[0] = -1 * slon;
    20f6:	d7 01       	movw	r26, r14
    20f8:	c6 01       	movw	r24, r12
    20fa:	b0 58       	subi	r27, 0x80	; 128
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    20fc:	8d 87       	std	Y+13, r24	; 0x0d
    20fe:	9e 87       	std	Y+14, r25	; 0x0e
    2100:	af 87       	std	Y+15, r26	; 0x0f
    2102:	b8 8b       	std	Y+16, r27	; 0x10
    2104:	89 8a       	std	Y+17, r8	; 0x11
    2106:	9a 8a       	std	Y+18, r9	; 0x12
    2108:	ab 8a       	std	Y+19, r10	; 0x13
    210a:	bc 8a       	std	Y+20, r11	; 0x14
    210c:	1d 8a       	std	Y+21, r1	; 0x15
    210e:	1e 8a       	std	Y+22, r1	; 0x16
    2110:	1f 8a       	std	Y+23, r1	; 0x17
    2112:	18 8e       	std	Y+24, r1	; 0x18
  
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
    2114:	a5 01       	movw	r20, r10
    2116:	94 01       	movw	r18, r8
    2118:	69 a5       	ldd	r22, Y+41	; 0x29
    211a:	7a a5       	ldd	r23, Y+42	; 0x2a
    211c:	8b a5       	ldd	r24, Y+43	; 0x2b
    211e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2120:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
  v_down[1] = -1 * clat * slon;
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    2124:	69 8f       	std	Y+25, r22	; 0x19
    2126:	7a 8f       	std	Y+26, r23	; 0x1a
    2128:	8b 8f       	std	Y+27, r24	; 0x1b
    212a:	9c 8f       	std	Y+28, r25	; 0x1c
  v_east[0] = -1 * slon;
  v_east[1] = clon;
  v_east[2] = 0;
  
  v_down[0] = -1 * clat * clon;
  v_down[1] = -1 * clat * slon;
    212c:	29 a5       	ldd	r18, Y+41	; 0x29
    212e:	3a a5       	ldd	r19, Y+42	; 0x2a
    2130:	4b a5       	ldd	r20, Y+43	; 0x2b
    2132:	5c a5       	ldd	r21, Y+44	; 0x2c
    2134:	c7 01       	movw	r24, r14
    2136:	b6 01       	movw	r22, r12
    2138:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
  v_down[2] = -1 * slat;
  
  matrix m_ecef = { { v_north[0], v_north[1], v_north[2] },
    213c:	6d 8f       	std	Y+29, r22	; 0x1d
    213e:	7e 8f       	std	Y+30, r23	; 0x1e
    2140:	8f 8f       	std	Y+31, r24	; 0x1f
    2142:	98 a3       	std	Y+32, r25	; 0x20
    2144:	49 a2       	std	Y+33, r4	; 0x21
    2146:	5a a2       	std	Y+34, r5	; 0x22
    2148:	6b a2       	std	Y+35, r6	; 0x23
    214a:	7c a2       	std	Y+36, r7	; 0x24
                    { v_east[0], v_east[1], v_east[2] },
                    { v_down[0], v_down[1], v_down[2] } };
  
  vector_into_matrix(v_ned, m_ecef, v_ecef);
    214c:	a8 01       	movw	r20, r16
    214e:	be 01       	movw	r22, r28
    2150:	6f 5f       	subi	r22, 0xFF	; 255
    2152:	7f 4f       	sbci	r23, 0xFF	; 255
    2154:	c1 01       	movw	r24, r2
    2156:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <vector_into_matrix>
}
    215a:	ac 96       	adiw	r28, 0x2c	; 44
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	1f 91       	pop	r17
    216c:	0f 91       	pop	r16
    216e:	ff 90       	pop	r15
    2170:	ef 90       	pop	r14
    2172:	df 90       	pop	r13
    2174:	cf 90       	pop	r12
    2176:	bf 90       	pop	r11
    2178:	af 90       	pop	r10
    217a:	9f 90       	pop	r9
    217c:	8f 90       	pop	r8
    217e:	7f 90       	pop	r7
    2180:	6f 90       	pop	r6
    2182:	5f 90       	pop	r5
    2184:	4f 90       	pop	r4
    2186:	3f 90       	pop	r3
    2188:	2f 90       	pop	r2
    218a:	08 95       	ret

0000218c <init_UART_GPS>:


void init_UART_GPS(void)
{

  UCSR0A = 0;
    218c:	1b b8       	out	0x0b, r1	; 11
  UCSR0B = 0;
    218e:	1a b8       	out	0x0a, r1	; 10
  UCSR0C = 0;
    2190:	e5 e9       	ldi	r30, 0x95	; 149
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR0A |= _BV(U2X0);
    2196:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSR0B |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    2198:	8a b1       	in	r24, 0x0a	; 10
    219a:	88 69       	ori	r24, 0x98	; 152
    219c:	8a b9       	out	0x0a, r24	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSR0C |= _BV(USBS0) | _BV(UCSZ01) | _BV(UCSZ00);
    219e:	80 81       	ld	r24, Z
    21a0:	8e 60       	ori	r24, 0x0E	; 14
    21a2:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR0L = 103;
    21a4:	87 e6       	ldi	r24, 0x67	; 103
    21a6:	89 b9       	out	0x09, r24	; 9
  UBRR0H = 0;
    21a8:	10 92 90 00 	sts	0x0090, r1
  
  Current_state.gps.x=1;
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	a0 e0       	ldi	r26, 0x00	; 0
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	80 93 d3 04 	sts	0x04D3, r24
    21b8:	90 93 d4 04 	sts	0x04D4, r25
    21bc:	a0 93 d5 04 	sts	0x04D5, r26
    21c0:	b0 93 d6 04 	sts	0x04D6, r27
  Current_state.gps.y=1;
    21c4:	80 93 d7 04 	sts	0x04D7, r24
    21c8:	90 93 d8 04 	sts	0x04D8, r25
    21cc:	a0 93 d9 04 	sts	0x04D9, r26
    21d0:	b0 93 da 04 	sts	0x04DA, r27
  Current_state.gps.z=1;
    21d4:	80 93 db 04 	sts	0x04DB, r24
    21d8:	90 93 dc 04 	sts	0x04DC, r25
    21dc:	a0 93 dd 04 	sts	0x04DD, r26
    21e0:	b0 93 de 04 	sts	0x04DE, r27
  Current_state.gps.v_x=1;
    21e4:	80 93 df 04 	sts	0x04DF, r24
    21e8:	90 93 e0 04 	sts	0x04E0, r25
    21ec:	a0 93 e1 04 	sts	0x04E1, r26
    21f0:	b0 93 e2 04 	sts	0x04E2, r27
  Current_state.gps.v_y=1;
    21f4:	80 93 e3 04 	sts	0x04E3, r24
    21f8:	90 93 e4 04 	sts	0x04E4, r25
    21fc:	a0 93 e5 04 	sts	0x04E5, r26
    2200:	b0 93 e6 04 	sts	0x04E6, r27
  Current_state.gps.v_z=1;
    2204:	80 93 e7 04 	sts	0x04E7, r24
    2208:	90 93 e8 04 	sts	0x04E8, r25
    220c:	a0 93 e9 04 	sts	0x04E9, r26
    2210:	b0 93 ea 04 	sts	0x04EA, r27
  Current_state.gps.lat=1;
    2214:	80 93 eb 04 	sts	0x04EB, r24
    2218:	90 93 ec 04 	sts	0x04EC, r25
    221c:	a0 93 ed 04 	sts	0x04ED, r26
    2220:	b0 93 ee 04 	sts	0x04EE, r27
  Current_state.gps.lon=1;
    2224:	80 93 ef 04 	sts	0x04EF, r24
    2228:	90 93 f0 04 	sts	0x04F0, r25
    222c:	a0 93 f1 04 	sts	0x04F1, r26
    2230:	b0 93 f2 04 	sts	0x04F2, r27
  Current_state.gps.alt=1;
    2234:	80 93 f3 04 	sts	0x04F3, r24
    2238:	90 93 f4 04 	sts	0x04F4, r25
    223c:	a0 93 f5 04 	sts	0x04F5, r26
    2240:	b0 93 f6 04 	sts	0x04F6, r27
  Current_state.gps.hours=1;
    2244:	80 93 f7 04 	sts	0x04F7, r24
  Current_state.gps.minutes=1;
    2248:	80 93 f8 04 	sts	0x04F8, r24
  Current_state.gps.seconds=1;
    224c:	80 93 f9 04 	sts	0x04F9, r24
  Current_state.gps.date=1;
    2250:	80 93 fa 04 	sts	0x04FA, r24
  Current_state.gps.month=1;
    2254:	80 93 fb 04 	sts	0x04FB, r24
  Current_state.gps.year=1;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	90 93 fd 04 	sts	0x04FD, r25
    2260:	80 93 fc 04 	sts	0x04FC, r24
  Current_state.gps.pdop=1;
    2264:	90 93 ff 04 	sts	0x04FF, r25
    2268:	80 93 fe 04 	sts	0x04FE, r24
    226c:	08 95       	ret

0000226e <__vector_18>:


/** @brief Interrupt on receiving a byte through UART GPS
 */
ISR(USART0_RX_vect)
{ 
    226e:	1f 92       	push	r1
    2270:	0f 92       	push	r0
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	0f 92       	push	r0
    2276:	11 24       	eor	r1, r1
    2278:	2f 93       	push	r18
    227a:	8f 93       	push	r24
    227c:	9f 93       	push	r25
    227e:	af 93       	push	r26
    2280:	bf 93       	push	r27
  PORTA ^= 0xf0;
    2282:	8b b3       	in	r24, 0x1b	; 27
    2284:	90 ef       	ldi	r25, 0xF0	; 240
    2286:	89 27       	eor	r24, r25
    2288:	8b bb       	out	0x1b, r24	; 27
  
  ///Buffer the Received Byte
  last_byte = UDR0;
    228a:	8c b1       	in	r24, 0x0c	; 12
    228c:	80 93 50 02 	sts	0x0250, r24
  
  ///Put the received byte in the last 4-bytes buffer
  buffer = buffer << 8;
    2290:	80 91 51 02 	lds	r24, 0x0251
    2294:	90 91 52 02 	lds	r25, 0x0252
    2298:	a0 91 53 02 	lds	r26, 0x0253
    229c:	b0 91 54 02 	lds	r27, 0x0254
    22a0:	ba 2f       	mov	r27, r26
    22a2:	a9 2f       	mov	r26, r25
    22a4:	98 2f       	mov	r25, r24
    22a6:	88 27       	eor	r24, r24
    22a8:	80 93 51 02 	sts	0x0251, r24
    22ac:	90 93 52 02 	sts	0x0252, r25
    22b0:	a0 93 53 02 	sts	0x0253, r26
    22b4:	b0 93 54 02 	sts	0x0254, r27
  buffer &= 0xFFFFFF00;
    22b8:	80 91 51 02 	lds	r24, 0x0251
    22bc:	90 91 52 02 	lds	r25, 0x0252
    22c0:	a0 91 53 02 	lds	r26, 0x0253
    22c4:	b0 91 54 02 	lds	r27, 0x0254
    22c8:	88 27       	eor	r24, r24
    22ca:	80 93 51 02 	sts	0x0251, r24
    22ce:	90 93 52 02 	sts	0x0252, r25
    22d2:	a0 93 53 02 	sts	0x0253, r26
    22d6:	b0 93 54 02 	sts	0x0254, r27
  buffer |= (uint32_t) last_byte;
    22da:	20 91 50 02 	lds	r18, 0x0250
    22de:	80 91 51 02 	lds	r24, 0x0251
    22e2:	90 91 52 02 	lds	r25, 0x0252
    22e6:	a0 91 53 02 	lds	r26, 0x0253
    22ea:	b0 91 54 02 	lds	r27, 0x0254
    22ee:	82 2b       	or	r24, r18
    22f0:	80 93 51 02 	sts	0x0251, r24
    22f4:	90 93 52 02 	sts	0x0252, r25
    22f8:	a0 93 53 02 	sts	0x0253, r26
    22fc:	b0 93 54 02 	sts	0x0254, r27
  
  ///Check if the last byte was for position
  if(pos < 12)
    2300:	80 91 11 01 	lds	r24, 0x0111
    2304:	8c 30       	cpi	r24, 0x0C	; 12
    2306:	08 f0       	brcs	.+2      	; 0x230a <__vector_18+0x9c>
    2308:	49 c0       	rjmp	.+146    	; 0x239c <__vector_18+0x12e>
  {
    
    if(pos<4)
    230a:	80 91 11 01 	lds	r24, 0x0111
    230e:	84 30       	cpi	r24, 0x04	; 4
    2310:	08 f0       	brcs	.+2      	; 0x2314 <__vector_18+0xa6>
    2312:	d4 c1       	rjmp	.+936    	; 0x26bc <__vector_18+0x44e>
	{
		Current_state.gps.x = Current_state.gps.x >> 8;
    2314:	80 91 d3 04 	lds	r24, 0x04D3
    2318:	90 91 d4 04 	lds	r25, 0x04D4
    231c:	a0 91 d5 04 	lds	r26, 0x04D5
    2320:	b0 91 d6 04 	lds	r27, 0x04D6
    2324:	89 2f       	mov	r24, r25
    2326:	9a 2f       	mov	r25, r26
    2328:	ab 2f       	mov	r26, r27
    232a:	bb 27       	eor	r27, r27
    232c:	a7 fd       	sbrc	r26, 7
    232e:	ba 95       	dec	r27
    2330:	80 93 d3 04 	sts	0x04D3, r24
    2334:	90 93 d4 04 	sts	0x04D4, r25
    2338:	a0 93 d5 04 	sts	0x04D5, r26
    233c:	b0 93 d6 04 	sts	0x04D6, r27
		Current_state.gps.x &= 0x00FFFFFF;
    2340:	80 91 d3 04 	lds	r24, 0x04D3
    2344:	90 91 d4 04 	lds	r25, 0x04D4
    2348:	a0 91 d5 04 	lds	r26, 0x04D5
    234c:	b0 91 d6 04 	lds	r27, 0x04D6
    2350:	bb 27       	eor	r27, r27
    2352:	80 93 d3 04 	sts	0x04D3, r24
    2356:	90 93 d4 04 	sts	0x04D4, r25
    235a:	a0 93 d5 04 	sts	0x04D5, r26
    235e:	b0 93 d6 04 	sts	0x04D6, r27
        Current_state.gps.x |= ((uint32_t) last_byte)<<24;
    2362:	80 91 d3 04 	lds	r24, 0x04D3
    2366:	90 91 d4 04 	lds	r25, 0x04D4
    236a:	a0 91 d5 04 	lds	r26, 0x04D5
    236e:	b0 91 d6 04 	lds	r27, 0x04D6
    2372:	20 91 50 02 	lds	r18, 0x0250
    2376:	b2 2b       	or	r27, r18
    2378:	80 93 d3 04 	sts	0x04D3, r24
    237c:	90 93 d4 04 	sts	0x04D4, r25
    2380:	a0 93 d5 04 	sts	0x04D5, r26
    2384:	b0 93 d6 04 	sts	0x04D6, r27
		//sprintf(arrayz,"%x %x",last_byte);transmit_string_UART0(arrayz);
		
		//transmit_UART0('\r');*/
	}
    ///* Increment position and terminate it if full
    pos++;
    2388:	80 91 11 01 	lds	r24, 0x0111
    238c:	8f 5f       	subi	r24, 0xFF	; 255
    238e:	80 93 11 01 	sts	0x0111, r24
    if(pos == 12)
    2392:	80 91 11 01 	lds	r24, 0x0111
    2396:	8c 30       	cpi	r24, 0x0C	; 12
    2398:	09 f4       	brne	.+2      	; 0x239c <__vector_18+0x12e>
    239a:	2d c2       	rjmp	.+1114   	; 0x27f6 <__vector_18+0x588>
	   }
	   
  }
  
  ///Check if the last byte was for velocity
  if(vel < 12)
    239c:	80 91 10 01 	lds	r24, 0x0110
    23a0:	8c 30       	cpi	r24, 0x0C	; 12
    23a2:	08 f0       	brcs	.+2      	; 0x23a6 <__vector_18+0x138>
    23a4:	49 c0       	rjmp	.+146    	; 0x2438 <__vector_18+0x1ca>
  {
	  
    if(vel < 4)
    23a6:	80 91 10 01 	lds	r24, 0x0110
    23aa:	84 30       	cpi	r24, 0x04	; 4
    23ac:	08 f0       	brcs	.+2      	; 0x23b0 <__vector_18+0x142>
    23ae:	41 c1       	rjmp	.+642    	; 0x2632 <__vector_18+0x3c4>
	{
		Current_state.gps.v_x = Current_state.gps.v_x >> 8;
    23b0:	80 91 df 04 	lds	r24, 0x04DF
    23b4:	90 91 e0 04 	lds	r25, 0x04E0
    23b8:	a0 91 e1 04 	lds	r26, 0x04E1
    23bc:	b0 91 e2 04 	lds	r27, 0x04E2
    23c0:	89 2f       	mov	r24, r25
    23c2:	9a 2f       	mov	r25, r26
    23c4:	ab 2f       	mov	r26, r27
    23c6:	bb 27       	eor	r27, r27
    23c8:	a7 fd       	sbrc	r26, 7
    23ca:	ba 95       	dec	r27
    23cc:	80 93 df 04 	sts	0x04DF, r24
    23d0:	90 93 e0 04 	sts	0x04E0, r25
    23d4:	a0 93 e1 04 	sts	0x04E1, r26
    23d8:	b0 93 e2 04 	sts	0x04E2, r27
		Current_state.gps.v_x &= 0x00FFFFFF;
    23dc:	80 91 df 04 	lds	r24, 0x04DF
    23e0:	90 91 e0 04 	lds	r25, 0x04E0
    23e4:	a0 91 e1 04 	lds	r26, 0x04E1
    23e8:	b0 91 e2 04 	lds	r27, 0x04E2
    23ec:	bb 27       	eor	r27, r27
    23ee:	80 93 df 04 	sts	0x04DF, r24
    23f2:	90 93 e0 04 	sts	0x04E0, r25
    23f6:	a0 93 e1 04 	sts	0x04E1, r26
    23fa:	b0 93 e2 04 	sts	0x04E2, r27
        Current_state.gps.v_x |= ((uint32_t) last_byte)<<24;
    23fe:	80 91 df 04 	lds	r24, 0x04DF
    2402:	90 91 e0 04 	lds	r25, 0x04E0
    2406:	a0 91 e1 04 	lds	r26, 0x04E1
    240a:	b0 91 e2 04 	lds	r27, 0x04E2
    240e:	20 91 50 02 	lds	r18, 0x0250
    2412:	b2 2b       	or	r27, r18
    2414:	80 93 df 04 	sts	0x04DF, r24
    2418:	90 93 e0 04 	sts	0x04E0, r25
    241c:	a0 93 e1 04 	sts	0x04E1, r26
    2420:	b0 93 e2 04 	sts	0x04E2, r27
		Current_state.gps.v_z = Current_state.gps.v_z >> 8;
		Current_state.gps.v_z &= 0x00FFFFFF;
        Current_state.gps.v_z |= ((uint32_t) last_byte)<<24;
	}
	//*((uint8_t *)&gps.v_x + vel) = last_byte;
	vel++;
    2424:	80 91 10 01 	lds	r24, 0x0110
    2428:	8f 5f       	subi	r24, 0xFF	; 255
    242a:	80 93 10 01 	sts	0x0110, r24
    if(vel == 12)
    242e:	80 91 10 01 	lds	r24, 0x0110
    2432:	8c 30       	cpi	r24, 0x0C	; 12
    2434:	09 f4       	brne	.+2      	; 0x2438 <__vector_18+0x1ca>
    2436:	e3 c1       	rjmp	.+966    	; 0x27fe <__vector_18+0x590>

	 }
  }
  
  ///Check if the last byte was for PDOP
  if(dop < 4)
    2438:	80 91 0f 01 	lds	r24, 0x010F
    243c:	84 30       	cpi	r24, 0x04	; 4
    243e:	60 f5       	brcc	.+88     	; 0x2498 <__vector_18+0x22a>
  {
    if(dop >= 2)
    2440:	80 91 0f 01 	lds	r24, 0x010F
    2444:	82 30       	cpi	r24, 0x02	; 2
    2446:	f0 f0       	brcs	.+60     	; 0x2484 <__vector_18+0x216>
    {
		 Current_state.gps.pdop =  Current_state.gps.pdop >> 8;
    2448:	80 91 fe 04 	lds	r24, 0x04FE
    244c:	90 91 ff 04 	lds	r25, 0x04FF
    2450:	89 2f       	mov	r24, r25
    2452:	99 27       	eor	r25, r25
    2454:	90 93 ff 04 	sts	0x04FF, r25
    2458:	80 93 fe 04 	sts	0x04FE, r24
		 Current_state.gps.pdop &= 0x00FF;
    245c:	80 91 fe 04 	lds	r24, 0x04FE
    2460:	90 91 ff 04 	lds	r25, 0x04FF
    2464:	99 27       	eor	r25, r25
    2466:	90 93 ff 04 	sts	0x04FF, r25
    246a:	80 93 fe 04 	sts	0x04FE, r24
         Current_state.gps.pdop |= ((uint16_t) last_byte)<<8;
    246e:	80 91 fe 04 	lds	r24, 0x04FE
    2472:	90 91 ff 04 	lds	r25, 0x04FF
    2476:	20 91 50 02 	lds	r18, 0x0250
    247a:	92 2b       	or	r25, r18
    247c:	90 93 ff 04 	sts	0x04FF, r25
    2480:	80 93 fe 04 	sts	0x04FE, r24
     }
//	*((uint8_t *)&pdop + (dop - 2)) = last_byte;
	dop++;
    2484:	80 91 0f 01 	lds	r24, 0x010F
    2488:	8f 5f       	subi	r24, 0xFF	; 255
    248a:	80 93 0f 01 	sts	0x010F, r24
    if(dop == 4)
    248e:	80 91 0f 01 	lds	r24, 0x010F
    2492:	84 30       	cpi	r24, 0x04	; 4
    2494:	09 f4       	brne	.+2      	; 0x2498 <__vector_18+0x22a>
    2496:	ab c1       	rjmp	.+854    	; 0x27ee <__vector_18+0x580>
      dop = 0xFF;
  }
  
  ///Check if the last byte was for Geodetic position
  if(geo < 16)
    2498:	80 91 0e 01 	lds	r24, 0x010E
    249c:	80 31       	cpi	r24, 0x10	; 16
    249e:	78 f4       	brcc	.+30     	; 0x24be <__vector_18+0x250>
  {
	if(geo < 4);  
    24a0:	80 91 0e 01 	lds	r24, 0x010E
    24a4:	84 30       	cpi	r24, 0x04	; 4
    24a6:	08 f0       	brcs	.+2      	; 0x24aa <__vector_18+0x23c>
    24a8:	4e c1       	rjmp	.+668    	; 0x2746 <__vector_18+0x4d8>
		Current_state.gps.alt |= ((uint32_t) last_byte)<<24;
	}
	
//    *((uint8_t *)&gps.lat + (geo - 4)) = last_byte;
    
    geo++;
    24aa:	80 91 0e 01 	lds	r24, 0x010E
    24ae:	8f 5f       	subi	r24, 0xFF	; 255
    24b0:	80 93 0e 01 	sts	0x010E, r24
    if(geo == 16)
    24b4:	80 91 0e 01 	lds	r24, 0x010E
    24b8:	80 31       	cpi	r24, 0x10	; 16
    24ba:	09 f4       	brne	.+2      	; 0x24be <__vector_18+0x250>
    24bc:	94 c1       	rjmp	.+808    	; 0x27e6 <__vector_18+0x578>

	}
  }
  
  ///Check if the last byte was for Time
  if(time < 7)
    24be:	80 91 0d 01 	lds	r24, 0x010D
    24c2:	87 30       	cpi	r24, 0x07	; 7
    24c4:	90 f4       	brcc	.+36     	; 0x24ea <__vector_18+0x27c>
  {
	  
	  if(time == 0)
    24c6:	80 91 0d 01 	lds	r24, 0x010D
    24ca:	81 11       	cpse	r24, r1
    24cc:	7a c0       	rjmp	.+244    	; 0x25c2 <__vector_18+0x354>
	  {
		  Current_state.gps.hours = last_byte;
    24ce:	80 91 50 02 	lds	r24, 0x0250
    24d2:	80 93 f7 04 	sts	0x04F7, r24
		  Current_state.gps.year |= ((uint16_t) last_byte)<<8;

	  }
    //*((uint8_t *)&gps.hours + time) = last_byte;
    
    time++;
    24d6:	80 91 0d 01 	lds	r24, 0x010D
    24da:	8f 5f       	subi	r24, 0xFF	; 255
    24dc:	80 93 0d 01 	sts	0x010D, r24
    if(time == 7)
    24e0:	80 91 0d 01 	lds	r24, 0x010D
    24e4:	87 30       	cpi	r24, 0x07	; 7
    24e6:	09 f4       	brne	.+2      	; 0x24ea <__vector_18+0x27c>
    24e8:	8e c1       	rjmp	.+796    	; 0x2806 <__vector_18+0x598>
    }
  }
  
  ///Check the buffer against message ID's
  ///Position
  if(buffer == 0x3F3F04AC)
    24ea:	80 91 51 02 	lds	r24, 0x0251
    24ee:	90 91 52 02 	lds	r25, 0x0252
    24f2:	a0 91 53 02 	lds	r26, 0x0253
    24f6:	b0 91 54 02 	lds	r27, 0x0254
    24fa:	8c 3a       	cpi	r24, 0xAC	; 172
    24fc:	94 40       	sbci	r25, 0x04	; 4
    24fe:	af 43       	sbci	r26, 0x3F	; 63
    2500:	bf 43       	sbci	r27, 0x3F	; 63
    2502:	09 f4       	brne	.+2      	; 0x2506 <__vector_18+0x298>
    2504:	65 c1       	rjmp	.+714    	; 0x27d0 <__vector_18+0x562>
  {
    message_end = 0;
    pos = 0;
  }
  ///Velocity
  else if(buffer == 0x3F3F05AC)
    2506:	80 91 51 02 	lds	r24, 0x0251
    250a:	90 91 52 02 	lds	r25, 0x0252
    250e:	a0 91 53 02 	lds	r26, 0x0253
    2512:	b0 91 54 02 	lds	r27, 0x0254
    2516:	8c 3a       	cpi	r24, 0xAC	; 172
    2518:	95 40       	sbci	r25, 0x05	; 5
    251a:	af 43       	sbci	r26, 0x3F	; 63
    251c:	bf 43       	sbci	r27, 0x3F	; 63
    251e:	09 f4       	brne	.+2      	; 0x2522 <__vector_18+0x2b4>
    2520:	5c c1       	rjmp	.+696    	; 0x27da <__vector_18+0x56c>
    vel = 0;
  ///DOP
  else if(buffer == 0x3F3F0BAC)
    2522:	80 91 51 02 	lds	r24, 0x0251
    2526:	90 91 52 02 	lds	r25, 0x0252
    252a:	a0 91 53 02 	lds	r26, 0x0253
    252e:	b0 91 54 02 	lds	r27, 0x0254
    2532:	8c 3a       	cpi	r24, 0xAC	; 172
    2534:	9b 40       	sbci	r25, 0x0B	; 11
    2536:	af 43       	sbci	r26, 0x3F	; 63
    2538:	bf 43       	sbci	r27, 0x3F	; 63
    253a:	09 f4       	brne	.+2      	; 0x253e <__vector_18+0x2d0>
    253c:	51 c1       	rjmp	.+674    	; 0x27e0 <__vector_18+0x572>
    dop = 0;
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
    253e:	80 91 51 02 	lds	r24, 0x0251
    2542:	90 91 52 02 	lds	r25, 0x0252
    2546:	a0 91 53 02 	lds	r26, 0x0253
    254a:	b0 91 54 02 	lds	r27, 0x0254
    254e:	8c 3a       	cpi	r24, 0xAC	; 172
    2550:	9e 40       	sbci	r25, 0x0E	; 14
    2552:	af 43       	sbci	r26, 0x3F	; 63
    2554:	bf 43       	sbci	r27, 0x3F	; 63
    2556:	09 f4       	brne	.+2      	; 0x255a <__vector_18+0x2ec>
    2558:	16 c2       	rjmp	.+1068   	; 0x2986 <__vector_18+0x718>
    geo = 0;
  ///Time
  else if(buffer == 0x3F3F0FAC)
    255a:	80 91 51 02 	lds	r24, 0x0251
    255e:	90 91 52 02 	lds	r25, 0x0252
    2562:	a0 91 53 02 	lds	r26, 0x0253
    2566:	b0 91 54 02 	lds	r27, 0x0254
    256a:	8c 3a       	cpi	r24, 0xAC	; 172
    256c:	9f 40       	sbci	r25, 0x0F	; 15
    256e:	af 43       	sbci	r26, 0x3F	; 63
    2570:	bf 43       	sbci	r27, 0x3F	; 63
    2572:	09 f4       	brne	.+2      	; 0x2576 <__vector_18+0x308>
    2574:	00 c2       	rjmp	.+1024   	; 0x2976 <__vector_18+0x708>
    time = 0;
  
  ///Check if PDOP < 500(factor 100), shut off the interrupt and the GPS device
  if(( Current_state.gps.pdop < 500000)  && message_end)//&& ( Current_state.gps.pdop!=0)
    2576:	80 91 fe 04 	lds	r24, 0x04FE
    257a:	90 91 ff 04 	lds	r25, 0x04FF
    257e:	80 91 4f 02 	lds	r24, 0x024F
    2582:	88 23       	and	r24, r24
    2584:	a1 f0       	breq	.+40     	; 0x25ae <__vector_18+0x340>
  {
    GPS_done = 1;
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	80 93 13 01 	sts	0x0113, r24
    
    ///* Switch off the interrupt
    UCSR0B &= ~(_BV(RXCIE0));
    258c:	57 98       	cbi	0x0a, 7	; 10
    
    ///* Switch off the GPS device
    //power_down_peripheral(PGPS);
    
     Current_state.gps.pdop = 0xFFFF;
    258e:	8f ef       	ldi	r24, 0xFF	; 255
    2590:	9f ef       	ldi	r25, 0xFF	; 255
    2592:	90 93 ff 04 	sts	0x04FF, r25
    2596:	80 93 fe 04 	sts	0x04FE, r24
    message_end = 0;
    259a:	10 92 4f 02 	sts	0x024F, r1
    buffer = 0;
    259e:	10 92 51 02 	sts	0x0251, r1
    25a2:	10 92 52 02 	sts	0x0252, r1
    25a6:	10 92 53 02 	sts	0x0253, r1
    25aa:	10 92 54 02 	sts	0x0254, r1
  }
}
    25ae:	bf 91       	pop	r27
    25b0:	af 91       	pop	r26
    25b2:	9f 91       	pop	r25
    25b4:	8f 91       	pop	r24
    25b6:	2f 91       	pop	r18
    25b8:	0f 90       	pop	r0
    25ba:	0f be       	out	0x3f, r0	; 63
    25bc:	0f 90       	pop	r0
    25be:	1f 90       	pop	r1
    25c0:	18 95       	reti
	  
	  if(time == 0)
	  {
		  Current_state.gps.hours = last_byte;
	  }
	  else if(time == 1)
    25c2:	80 91 0d 01 	lds	r24, 0x010D
    25c6:	81 30       	cpi	r24, 0x01	; 1
    25c8:	09 f4       	brne	.+2      	; 0x25cc <__vector_18+0x35e>
    25ca:	d8 c1       	rjmp	.+944    	; 0x297c <__vector_18+0x70e>
	  {
		  Current_state.gps.minutes = last_byte;
	  }
	  else if(time == 2)
    25cc:	80 91 0d 01 	lds	r24, 0x010D
    25d0:	82 30       	cpi	r24, 0x02	; 2
    25d2:	09 f4       	brne	.+2      	; 0x25d6 <__vector_18+0x368>
    25d4:	1b c2       	rjmp	.+1078   	; 0x2a0c <__vector_18+0x79e>
	  {
		  Current_state.gps.seconds = last_byte;
	  }
	  else if(time == 3)
    25d6:	80 91 0d 01 	lds	r24, 0x010D
    25da:	83 30       	cpi	r24, 0x03	; 3
    25dc:	09 f4       	brne	.+2      	; 0x25e0 <__vector_18+0x372>
    25de:	1b c2       	rjmp	.+1078   	; 0x2a16 <__vector_18+0x7a8>
	  {
		  Current_state.gps.date = last_byte;
	  }else if(time == 4)
    25e0:	80 91 0d 01 	lds	r24, 0x010D
    25e4:	84 30       	cpi	r24, 0x04	; 4
    25e6:	09 f4       	brne	.+2      	; 0x25ea <__vector_18+0x37c>
    25e8:	1b c2       	rjmp	.+1078   	; 0x2a20 <__vector_18+0x7b2>
	  {
		  Current_state.gps.month = last_byte;
	  }else if(time > 4)
    25ea:	80 91 0d 01 	lds	r24, 0x010D
    25ee:	85 30       	cpi	r24, 0x05	; 5
    25f0:	08 f4       	brcc	.+2      	; 0x25f4 <__vector_18+0x386>
    25f2:	71 cf       	rjmp	.-286    	; 0x24d6 <__vector_18+0x268>
	  {
		  Current_state.gps.year = Current_state.gps.year >> 8;
    25f4:	80 91 fc 04 	lds	r24, 0x04FC
    25f8:	90 91 fd 04 	lds	r25, 0x04FD
    25fc:	89 2f       	mov	r24, r25
    25fe:	99 27       	eor	r25, r25
    2600:	90 93 fd 04 	sts	0x04FD, r25
    2604:	80 93 fc 04 	sts	0x04FC, r24
		  Current_state.gps.year &= 0x00FF;
    2608:	80 91 fc 04 	lds	r24, 0x04FC
    260c:	90 91 fd 04 	lds	r25, 0x04FD
    2610:	99 27       	eor	r25, r25
    2612:	90 93 fd 04 	sts	0x04FD, r25
    2616:	80 93 fc 04 	sts	0x04FC, r24
		  Current_state.gps.year |= ((uint16_t) last_byte)<<8;
    261a:	80 91 fc 04 	lds	r24, 0x04FC
    261e:	90 91 fd 04 	lds	r25, 0x04FD
    2622:	20 91 50 02 	lds	r18, 0x0250
    2626:	92 2b       	or	r25, r18
    2628:	90 93 fd 04 	sts	0x04FD, r25
    262c:	80 93 fc 04 	sts	0x04FC, r24
    2630:	52 cf       	rjmp	.-348    	; 0x24d6 <__vector_18+0x268>
		Current_state.gps.v_x = Current_state.gps.v_x >> 8;
		Current_state.gps.v_x &= 0x00FFFFFF;
        Current_state.gps.v_x |= ((uint32_t) last_byte)<<24;
		
	}
	else if(vel < 8)
    2632:	80 91 10 01 	lds	r24, 0x0110
    2636:	88 30       	cpi	r24, 0x08	; 8
    2638:	08 f4       	brcc	.+2      	; 0x263c <__vector_18+0x3ce>
    263a:	ec c0       	rjmp	.+472    	; 0x2814 <__vector_18+0x5a6>
		
		Current_state.gps.v_y = Current_state.gps.v_y >> 8;
		Current_state.gps.v_y &= 0x00FFFFFF;
        Current_state.gps.v_y |= ((uint32_t) last_byte)<<24;
	}
	else if(vel < 12)
    263c:	80 91 10 01 	lds	r24, 0x0110
    2640:	8c 30       	cpi	r24, 0x0C	; 12
    2642:	08 f0       	brcs	.+2      	; 0x2646 <__vector_18+0x3d8>
    2644:	ef ce       	rjmp	.-546    	; 0x2424 <__vector_18+0x1b6>
	{
		Current_state.gps.v_z = Current_state.gps.v_z >> 8;
    2646:	80 91 e7 04 	lds	r24, 0x04E7
    264a:	90 91 e8 04 	lds	r25, 0x04E8
    264e:	a0 91 e9 04 	lds	r26, 0x04E9
    2652:	b0 91 ea 04 	lds	r27, 0x04EA
    2656:	89 2f       	mov	r24, r25
    2658:	9a 2f       	mov	r25, r26
    265a:	ab 2f       	mov	r26, r27
    265c:	bb 27       	eor	r27, r27
    265e:	a7 fd       	sbrc	r26, 7
    2660:	ba 95       	dec	r27
    2662:	80 93 e7 04 	sts	0x04E7, r24
    2666:	90 93 e8 04 	sts	0x04E8, r25
    266a:	a0 93 e9 04 	sts	0x04E9, r26
    266e:	b0 93 ea 04 	sts	0x04EA, r27
		Current_state.gps.v_z &= 0x00FFFFFF;
    2672:	80 91 e7 04 	lds	r24, 0x04E7
    2676:	90 91 e8 04 	lds	r25, 0x04E8
    267a:	a0 91 e9 04 	lds	r26, 0x04E9
    267e:	b0 91 ea 04 	lds	r27, 0x04EA
    2682:	bb 27       	eor	r27, r27
    2684:	80 93 e7 04 	sts	0x04E7, r24
    2688:	90 93 e8 04 	sts	0x04E8, r25
    268c:	a0 93 e9 04 	sts	0x04E9, r26
    2690:	b0 93 ea 04 	sts	0x04EA, r27
        Current_state.gps.v_z |= ((uint32_t) last_byte)<<24;
    2694:	80 91 e7 04 	lds	r24, 0x04E7
    2698:	90 91 e8 04 	lds	r25, 0x04E8
    269c:	a0 91 e9 04 	lds	r26, 0x04E9
    26a0:	b0 91 ea 04 	lds	r27, 0x04EA
    26a4:	20 91 50 02 	lds	r18, 0x0250
    26a8:	b2 2b       	or	r27, r18
    26aa:	80 93 e7 04 	sts	0x04E7, r24
    26ae:	90 93 e8 04 	sts	0x04E8, r25
    26b2:	a0 93 e9 04 	sts	0x04E9, r26
    26b6:	b0 93 ea 04 	sts	0x04EA, r27
    26ba:	b4 ce       	rjmp	.-664    	; 0x2424 <__vector_18+0x1b6>
        Current_state.gps.x |= ((uint32_t) last_byte)<<24;
        //sprintf(arrayx,"%x %x",last_byte);transmit_string_UART0(arrayx);
		
		//transmit_UART0('\r');*/
	}
	else if (pos<8)
    26bc:	80 91 11 01 	lds	r24, 0x0111
    26c0:	88 30       	cpi	r24, 0x08	; 8
    26c2:	08 f4       	brcc	.+2      	; 0x26c6 <__vector_18+0x458>
    26c4:	1d c1       	rjmp	.+570    	; 0x2900 <__vector_18+0x692>
		//sprintf(arrayy,"%x %x",last_byte);transmit_string_UART0(arrayy);
		
		//transmit_UART0('\r');*/
	}
	
	else if(pos<12)
    26c6:	80 91 11 01 	lds	r24, 0x0111
    26ca:	8c 30       	cpi	r24, 0x0C	; 12
    26cc:	08 f0       	brcs	.+2      	; 0x26d0 <__vector_18+0x462>
    26ce:	5c ce       	rjmp	.-840    	; 0x2388 <__vector_18+0x11a>
	{
		Current_state.gps.z = Current_state.gps.z >> 8;
    26d0:	80 91 db 04 	lds	r24, 0x04DB
    26d4:	90 91 dc 04 	lds	r25, 0x04DC
    26d8:	a0 91 dd 04 	lds	r26, 0x04DD
    26dc:	b0 91 de 04 	lds	r27, 0x04DE
    26e0:	89 2f       	mov	r24, r25
    26e2:	9a 2f       	mov	r25, r26
    26e4:	ab 2f       	mov	r26, r27
    26e6:	bb 27       	eor	r27, r27
    26e8:	a7 fd       	sbrc	r26, 7
    26ea:	ba 95       	dec	r27
    26ec:	80 93 db 04 	sts	0x04DB, r24
    26f0:	90 93 dc 04 	sts	0x04DC, r25
    26f4:	a0 93 dd 04 	sts	0x04DD, r26
    26f8:	b0 93 de 04 	sts	0x04DE, r27
		Current_state.gps.z &= 0x00FFFFFF;
    26fc:	80 91 db 04 	lds	r24, 0x04DB
    2700:	90 91 dc 04 	lds	r25, 0x04DC
    2704:	a0 91 dd 04 	lds	r26, 0x04DD
    2708:	b0 91 de 04 	lds	r27, 0x04DE
    270c:	bb 27       	eor	r27, r27
    270e:	80 93 db 04 	sts	0x04DB, r24
    2712:	90 93 dc 04 	sts	0x04DC, r25
    2716:	a0 93 dd 04 	sts	0x04DD, r26
    271a:	b0 93 de 04 	sts	0x04DE, r27
		Current_state.gps.z |= ((uint32_t) last_byte)<<24;
    271e:	80 91 db 04 	lds	r24, 0x04DB
    2722:	90 91 dc 04 	lds	r25, 0x04DC
    2726:	a0 91 dd 04 	lds	r26, 0x04DD
    272a:	b0 91 de 04 	lds	r27, 0x04DE
    272e:	20 91 50 02 	lds	r18, 0x0250
    2732:	b2 2b       	or	r27, r18
    2734:	80 93 db 04 	sts	0x04DB, r24
    2738:	90 93 dc 04 	sts	0x04DC, r25
    273c:	a0 93 dd 04 	sts	0x04DD, r26
    2740:	b0 93 de 04 	sts	0x04DE, r27
    2744:	21 ce       	rjmp	.-958    	; 0x2388 <__vector_18+0x11a>
  
  ///Check if the last byte was for Geodetic position
  if(geo < 16)
  {
	if(geo < 4);  
    else if(geo < 8)
    2746:	80 91 0e 01 	lds	r24, 0x010E
    274a:	88 30       	cpi	r24, 0x08	; 8
    274c:	08 f4       	brcc	.+2      	; 0x2750 <__vector_18+0x4e2>
    274e:	9d c0       	rjmp	.+314    	; 0x288a <__vector_18+0x61c>
	{
		Current_state.gps.lat = Current_state.gps.lat >> 8;
		Current_state.gps.lat &= 0x00FFFFFF;
		Current_state.gps.lat |= ((uint32_t) last_byte)<<24;
	}
	else if(geo < 12)
    2750:	80 91 0e 01 	lds	r24, 0x010E
    2754:	8c 30       	cpi	r24, 0x0C	; 12
    2756:	08 f0       	brcs	.+2      	; 0x275a <__vector_18+0x4ec>
    2758:	19 c1       	rjmp	.+562    	; 0x298c <__vector_18+0x71e>
	{
		Current_state.gps.lon = Current_state.gps.lon >> 8;
    275a:	80 91 ef 04 	lds	r24, 0x04EF
    275e:	90 91 f0 04 	lds	r25, 0x04F0
    2762:	a0 91 f1 04 	lds	r26, 0x04F1
    2766:	b0 91 f2 04 	lds	r27, 0x04F2
    276a:	89 2f       	mov	r24, r25
    276c:	9a 2f       	mov	r25, r26
    276e:	ab 2f       	mov	r26, r27
    2770:	bb 27       	eor	r27, r27
    2772:	a7 fd       	sbrc	r26, 7
    2774:	ba 95       	dec	r27
    2776:	80 93 ef 04 	sts	0x04EF, r24
    277a:	90 93 f0 04 	sts	0x04F0, r25
    277e:	a0 93 f1 04 	sts	0x04F1, r26
    2782:	b0 93 f2 04 	sts	0x04F2, r27
		Current_state.gps.lon &= 0x00FFFFFF;
    2786:	80 91 ef 04 	lds	r24, 0x04EF
    278a:	90 91 f0 04 	lds	r25, 0x04F0
    278e:	a0 91 f1 04 	lds	r26, 0x04F1
    2792:	b0 91 f2 04 	lds	r27, 0x04F2
    2796:	bb 27       	eor	r27, r27
    2798:	80 93 ef 04 	sts	0x04EF, r24
    279c:	90 93 f0 04 	sts	0x04F0, r25
    27a0:	a0 93 f1 04 	sts	0x04F1, r26
    27a4:	b0 93 f2 04 	sts	0x04F2, r27
		Current_state.gps.lon |= ((uint32_t) last_byte)<<24;
    27a8:	80 91 ef 04 	lds	r24, 0x04EF
    27ac:	90 91 f0 04 	lds	r25, 0x04F0
    27b0:	a0 91 f1 04 	lds	r26, 0x04F1
    27b4:	b0 91 f2 04 	lds	r27, 0x04F2
    27b8:	20 91 50 02 	lds	r18, 0x0250
    27bc:	b2 2b       	or	r27, r18
    27be:	80 93 ef 04 	sts	0x04EF, r24
    27c2:	90 93 f0 04 	sts	0x04F0, r25
    27c6:	a0 93 f1 04 	sts	0x04F1, r26
    27ca:	b0 93 f2 04 	sts	0x04F2, r27
    27ce:	6d ce       	rjmp	.-806    	; 0x24aa <__vector_18+0x23c>
  
  ///Check the buffer against message ID's
  ///Position
  if(buffer == 0x3F3F04AC)
  {
    message_end = 0;
    27d0:	10 92 4f 02 	sts	0x024F, r1
    pos = 0;
    27d4:	10 92 11 01 	sts	0x0111, r1
    27d8:	ce ce       	rjmp	.-612    	; 0x2576 <__vector_18+0x308>
  }
  ///Velocity
  else if(buffer == 0x3F3F05AC)
    vel = 0;
    27da:	10 92 10 01 	sts	0x0110, r1
    27de:	cb ce       	rjmp	.-618    	; 0x2576 <__vector_18+0x308>
  ///DOP
  else if(buffer == 0x3F3F0BAC)
    dop = 0;
    27e0:	10 92 0f 01 	sts	0x010F, r1
    27e4:	c8 ce       	rjmp	.-624    	; 0x2576 <__vector_18+0x308>
//    *((uint8_t *)&gps.lat + (geo - 4)) = last_byte;
    
    geo++;
    if(geo == 16)
	{
      geo = 0xFF;
    27e6:	8f ef       	ldi	r24, 0xFF	; 255
    27e8:	80 93 0e 01 	sts	0x010E, r24
    27ec:	68 ce       	rjmp	.-816    	; 0x24be <__vector_18+0x250>
         Current_state.gps.pdop |= ((uint16_t) last_byte)<<8;
     }
//	*((uint8_t *)&pdop + (dop - 2)) = last_byte;
	dop++;
    if(dop == 4)
      dop = 0xFF;
    27ee:	8f ef       	ldi	r24, 0xFF	; 255
    27f0:	80 93 0f 01 	sts	0x010F, r24
    27f4:	51 ce       	rjmp	.-862    	; 0x2498 <__vector_18+0x22a>
	}
    ///* Increment position and terminate it if full
    pos++;
    if(pos == 12)
	{
      pos = 0xFF;
    27f6:	8f ef       	ldi	r24, 0xFF	; 255
    27f8:	80 93 11 01 	sts	0x0111, r24
    27fc:	cf cd       	rjmp	.-1122   	; 0x239c <__vector_18+0x12e>
	}
	//*((uint8_t *)&gps.v_x + vel) = last_byte;
	vel++;
    if(vel == 12)
     {
		  vel = 0xFF;
    27fe:	8f ef       	ldi	r24, 0xFF	; 255
    2800:	80 93 10 01 	sts	0x0110, r24
    2804:	19 ce       	rjmp	.-974    	; 0x2438 <__vector_18+0x1ca>
    //*((uint8_t *)&gps.hours + time) = last_byte;
    
    time++;
    if(time == 7)
    {
      time = 0xFF;
    2806:	8f ef       	ldi	r24, 0xFF	; 255
    2808:	80 93 0d 01 	sts	0x010D, r24
      ///* * The Entire message has been read
      message_end = 1;
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	80 93 4f 02 	sts	0x024F, r24
    2812:	6b ce       	rjmp	.-810    	; 0x24ea <__vector_18+0x27c>
		
	}
	else if(vel < 8)
	{
		
		Current_state.gps.v_y = Current_state.gps.v_y >> 8;
    2814:	80 91 e3 04 	lds	r24, 0x04E3
    2818:	90 91 e4 04 	lds	r25, 0x04E4
    281c:	a0 91 e5 04 	lds	r26, 0x04E5
    2820:	b0 91 e6 04 	lds	r27, 0x04E6
    2824:	89 2f       	mov	r24, r25
    2826:	9a 2f       	mov	r25, r26
    2828:	ab 2f       	mov	r26, r27
    282a:	bb 27       	eor	r27, r27
    282c:	a7 fd       	sbrc	r26, 7
    282e:	ba 95       	dec	r27
    2830:	80 93 e3 04 	sts	0x04E3, r24
    2834:	90 93 e4 04 	sts	0x04E4, r25
    2838:	a0 93 e5 04 	sts	0x04E5, r26
    283c:	b0 93 e6 04 	sts	0x04E6, r27
		Current_state.gps.v_y &= 0x00FFFFFF;
    2840:	80 91 e3 04 	lds	r24, 0x04E3
    2844:	90 91 e4 04 	lds	r25, 0x04E4
    2848:	a0 91 e5 04 	lds	r26, 0x04E5
    284c:	b0 91 e6 04 	lds	r27, 0x04E6
    2850:	bb 27       	eor	r27, r27
    2852:	80 93 e3 04 	sts	0x04E3, r24
    2856:	90 93 e4 04 	sts	0x04E4, r25
    285a:	a0 93 e5 04 	sts	0x04E5, r26
    285e:	b0 93 e6 04 	sts	0x04E6, r27
        Current_state.gps.v_y |= ((uint32_t) last_byte)<<24;
    2862:	80 91 e3 04 	lds	r24, 0x04E3
    2866:	90 91 e4 04 	lds	r25, 0x04E4
    286a:	a0 91 e5 04 	lds	r26, 0x04E5
    286e:	b0 91 e6 04 	lds	r27, 0x04E6
    2872:	20 91 50 02 	lds	r18, 0x0250
    2876:	b2 2b       	or	r27, r18
    2878:	80 93 e3 04 	sts	0x04E3, r24
    287c:	90 93 e4 04 	sts	0x04E4, r25
    2880:	a0 93 e5 04 	sts	0x04E5, r26
    2884:	b0 93 e6 04 	sts	0x04E6, r27
    2888:	cd cd       	rjmp	.-1126   	; 0x2424 <__vector_18+0x1b6>
  if(geo < 16)
  {
	if(geo < 4);  
    else if(geo < 8)
	{
		Current_state.gps.lat = Current_state.gps.lat >> 8;
    288a:	80 91 eb 04 	lds	r24, 0x04EB
    288e:	90 91 ec 04 	lds	r25, 0x04EC
    2892:	a0 91 ed 04 	lds	r26, 0x04ED
    2896:	b0 91 ee 04 	lds	r27, 0x04EE
    289a:	89 2f       	mov	r24, r25
    289c:	9a 2f       	mov	r25, r26
    289e:	ab 2f       	mov	r26, r27
    28a0:	bb 27       	eor	r27, r27
    28a2:	a7 fd       	sbrc	r26, 7
    28a4:	ba 95       	dec	r27
    28a6:	80 93 eb 04 	sts	0x04EB, r24
    28aa:	90 93 ec 04 	sts	0x04EC, r25
    28ae:	a0 93 ed 04 	sts	0x04ED, r26
    28b2:	b0 93 ee 04 	sts	0x04EE, r27
		Current_state.gps.lat &= 0x00FFFFFF;
    28b6:	80 91 eb 04 	lds	r24, 0x04EB
    28ba:	90 91 ec 04 	lds	r25, 0x04EC
    28be:	a0 91 ed 04 	lds	r26, 0x04ED
    28c2:	b0 91 ee 04 	lds	r27, 0x04EE
    28c6:	bb 27       	eor	r27, r27
    28c8:	80 93 eb 04 	sts	0x04EB, r24
    28cc:	90 93 ec 04 	sts	0x04EC, r25
    28d0:	a0 93 ed 04 	sts	0x04ED, r26
    28d4:	b0 93 ee 04 	sts	0x04EE, r27
		Current_state.gps.lat |= ((uint32_t) last_byte)<<24;
    28d8:	80 91 eb 04 	lds	r24, 0x04EB
    28dc:	90 91 ec 04 	lds	r25, 0x04EC
    28e0:	a0 91 ed 04 	lds	r26, 0x04ED
    28e4:	b0 91 ee 04 	lds	r27, 0x04EE
    28e8:	20 91 50 02 	lds	r18, 0x0250
    28ec:	b2 2b       	or	r27, r18
    28ee:	80 93 eb 04 	sts	0x04EB, r24
    28f2:	90 93 ec 04 	sts	0x04EC, r25
    28f6:	a0 93 ed 04 	sts	0x04ED, r26
    28fa:	b0 93 ee 04 	sts	0x04EE, r27
    28fe:	d5 cd       	rjmp	.-1110   	; 0x24aa <__vector_18+0x23c>
		
		//transmit_UART0('\r');*/
	}
	else if (pos<8)
	{
		Current_state.gps.y = Current_state.gps.y >> 8;
    2900:	80 91 d7 04 	lds	r24, 0x04D7
    2904:	90 91 d8 04 	lds	r25, 0x04D8
    2908:	a0 91 d9 04 	lds	r26, 0x04D9
    290c:	b0 91 da 04 	lds	r27, 0x04DA
    2910:	89 2f       	mov	r24, r25
    2912:	9a 2f       	mov	r25, r26
    2914:	ab 2f       	mov	r26, r27
    2916:	bb 27       	eor	r27, r27
    2918:	a7 fd       	sbrc	r26, 7
    291a:	ba 95       	dec	r27
    291c:	80 93 d7 04 	sts	0x04D7, r24
    2920:	90 93 d8 04 	sts	0x04D8, r25
    2924:	a0 93 d9 04 	sts	0x04D9, r26
    2928:	b0 93 da 04 	sts	0x04DA, r27
		Current_state.gps.y &= 0x00FFFFFF;
    292c:	80 91 d7 04 	lds	r24, 0x04D7
    2930:	90 91 d8 04 	lds	r25, 0x04D8
    2934:	a0 91 d9 04 	lds	r26, 0x04D9
    2938:	b0 91 da 04 	lds	r27, 0x04DA
    293c:	bb 27       	eor	r27, r27
    293e:	80 93 d7 04 	sts	0x04D7, r24
    2942:	90 93 d8 04 	sts	0x04D8, r25
    2946:	a0 93 d9 04 	sts	0x04D9, r26
    294a:	b0 93 da 04 	sts	0x04DA, r27
		Current_state.gps.y |= ((uint32_t) last_byte)<<24;
    294e:	80 91 d7 04 	lds	r24, 0x04D7
    2952:	90 91 d8 04 	lds	r25, 0x04D8
    2956:	a0 91 d9 04 	lds	r26, 0x04D9
    295a:	b0 91 da 04 	lds	r27, 0x04DA
    295e:	20 91 50 02 	lds	r18, 0x0250
    2962:	b2 2b       	or	r27, r18
    2964:	80 93 d7 04 	sts	0x04D7, r24
    2968:	90 93 d8 04 	sts	0x04D8, r25
    296c:	a0 93 d9 04 	sts	0x04D9, r26
    2970:	b0 93 da 04 	sts	0x04DA, r27
    2974:	09 cd       	rjmp	.-1518   	; 0x2388 <__vector_18+0x11a>
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
    geo = 0;
  ///Time
  else if(buffer == 0x3F3F0FAC)
    time = 0;
    2976:	10 92 0d 01 	sts	0x010D, r1
    297a:	fd cd       	rjmp	.-1030   	; 0x2576 <__vector_18+0x308>
	  {
		  Current_state.gps.hours = last_byte;
	  }
	  else if(time == 1)
	  {
		  Current_state.gps.minutes = last_byte;
    297c:	80 91 50 02 	lds	r24, 0x0250
    2980:	80 93 f8 04 	sts	0x04F8, r24
    2984:	a8 cd       	rjmp	.-1200   	; 0x24d6 <__vector_18+0x268>
  ///DOP
  else if(buffer == 0x3F3F0BAC)
    dop = 0;
  ///Geodetic System
  else if(buffer == 0x3F3F0EAC)
    geo = 0;
    2986:	10 92 0e 01 	sts	0x010E, r1
    298a:	f5 cd       	rjmp	.-1046   	; 0x2576 <__vector_18+0x308>
	{
		Current_state.gps.lon = Current_state.gps.lon >> 8;
		Current_state.gps.lon &= 0x00FFFFFF;
		Current_state.gps.lon |= ((uint32_t) last_byte)<<24;
	}
	else if(geo < 16 )
    298c:	80 91 0e 01 	lds	r24, 0x010E
    2990:	80 31       	cpi	r24, 0x10	; 16
    2992:	08 f0       	brcs	.+2      	; 0x2996 <__vector_18+0x728>
    2994:	8a cd       	rjmp	.-1260   	; 0x24aa <__vector_18+0x23c>
	{
		Current_state.gps.alt = Current_state.gps.alt >> 8;
    2996:	80 91 f3 04 	lds	r24, 0x04F3
    299a:	90 91 f4 04 	lds	r25, 0x04F4
    299e:	a0 91 f5 04 	lds	r26, 0x04F5
    29a2:	b0 91 f6 04 	lds	r27, 0x04F6
    29a6:	89 2f       	mov	r24, r25
    29a8:	9a 2f       	mov	r25, r26
    29aa:	ab 2f       	mov	r26, r27
    29ac:	bb 27       	eor	r27, r27
    29ae:	a7 fd       	sbrc	r26, 7
    29b0:	ba 95       	dec	r27
    29b2:	80 93 f3 04 	sts	0x04F3, r24
    29b6:	90 93 f4 04 	sts	0x04F4, r25
    29ba:	a0 93 f5 04 	sts	0x04F5, r26
    29be:	b0 93 f6 04 	sts	0x04F6, r27
		Current_state.gps.alt &= 0x00FFFFFF;
    29c2:	80 91 f3 04 	lds	r24, 0x04F3
    29c6:	90 91 f4 04 	lds	r25, 0x04F4
    29ca:	a0 91 f5 04 	lds	r26, 0x04F5
    29ce:	b0 91 f6 04 	lds	r27, 0x04F6
    29d2:	bb 27       	eor	r27, r27
    29d4:	80 93 f3 04 	sts	0x04F3, r24
    29d8:	90 93 f4 04 	sts	0x04F4, r25
    29dc:	a0 93 f5 04 	sts	0x04F5, r26
    29e0:	b0 93 f6 04 	sts	0x04F6, r27
		Current_state.gps.alt |= ((uint32_t) last_byte)<<24;
    29e4:	80 91 f3 04 	lds	r24, 0x04F3
    29e8:	90 91 f4 04 	lds	r25, 0x04F4
    29ec:	a0 91 f5 04 	lds	r26, 0x04F5
    29f0:	b0 91 f6 04 	lds	r27, 0x04F6
    29f4:	20 91 50 02 	lds	r18, 0x0250
    29f8:	b2 2b       	or	r27, r18
    29fa:	80 93 f3 04 	sts	0x04F3, r24
    29fe:	90 93 f4 04 	sts	0x04F4, r25
    2a02:	a0 93 f5 04 	sts	0x04F5, r26
    2a06:	b0 93 f6 04 	sts	0x04F6, r27
    2a0a:	4f cd       	rjmp	.-1378   	; 0x24aa <__vector_18+0x23c>
	  {
		  Current_state.gps.minutes = last_byte;
	  }
	  else if(time == 2)
	  {
		  Current_state.gps.seconds = last_byte;
    2a0c:	80 91 50 02 	lds	r24, 0x0250
    2a10:	80 93 f9 04 	sts	0x04F9, r24
    2a14:	60 cd       	rjmp	.-1344   	; 0x24d6 <__vector_18+0x268>
	  }
	  else if(time == 3)
	  {
		  Current_state.gps.date = last_byte;
    2a16:	80 91 50 02 	lds	r24, 0x0250
    2a1a:	80 93 fa 04 	sts	0x04FA, r24
    2a1e:	5b cd       	rjmp	.-1354   	; 0x24d6 <__vector_18+0x268>
	  }else if(time == 4)
	  {
		  Current_state.gps.month = last_byte;
    2a20:	80 91 50 02 	lds	r24, 0x0250
    2a24:	80 93 fb 04 	sts	0x04FB, r24
    2a28:	56 cd       	rjmp	.-1364   	; 0x24d6 <__vector_18+0x268>

00002a2a <igrf>:
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
    2a2a:	2f 92       	push	r2
    2a2c:	3f 92       	push	r3
    2a2e:	4f 92       	push	r4
    2a30:	5f 92       	push	r5
    2a32:	6f 92       	push	r6
    2a34:	7f 92       	push	r7
    2a36:	8f 92       	push	r8
    2a38:	9f 92       	push	r9
    2a3a:	af 92       	push	r10
    2a3c:	bf 92       	push	r11
    2a3e:	cf 92       	push	r12
    2a40:	df 92       	push	r13
    2a42:	ef 92       	push	r14
    2a44:	ff 92       	push	r15
    2a46:	0f 93       	push	r16
    2a48:	1f 93       	push	r17
    2a4a:	cf 93       	push	r28
    2a4c:	df 93       	push	r29
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
    2a52:	c7 55       	subi	r28, 0x57	; 87
    2a54:	d1 09       	sbc	r29, r1
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	de bf       	out	0x3e, r29	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	cd bf       	out	0x3d, r28	; 61
    2a60:	fc 01       	movw	r30, r24
    2a62:	49 87       	std	Y+9, r20	; 0x09
    2a64:	5a 87       	std	Y+10, r21	; 0x0a
    2a66:	6b 87       	std	Y+11, r22	; 0x0b
    2a68:	7c 87       	std	Y+12, r23	; 0x0c
    2a6a:	32 2e       	mov	r3, r18
    2a6c:	66 96       	adiw	r28, 0x16	; 22
    2a6e:	1f af       	std	Y+63, r17	; 0x3f
    2a70:	0e af       	std	Y+62, r16	; 0x3e
    2a72:	66 97       	sbiw	r28, 0x16	; 22
  float lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;
    2a74:	80 80       	ld	r8, Z
    2a76:	91 80       	ldd	r9, Z+1	; 0x01
    2a78:	a2 80       	ldd	r10, Z+2	; 0x02
    2a7a:	b3 80       	ldd	r11, Z+3	; 0x03
    2a7c:	c4 80       	ldd	r12, Z+4	; 0x04
    2a7e:	d5 80       	ldd	r13, Z+5	; 0x05
    2a80:	e6 80       	ldd	r14, Z+6	; 0x06
    2a82:	f7 80       	ldd	r15, Z+7	; 0x07
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	4a e7       	ldi	r20, 0x7A	; 122
    2a8a:	54 e4       	ldi	r21, 0x44	; 68
    2a8c:	60 85       	ldd	r22, Z+8	; 0x08
    2a8e:	71 85       	ldd	r23, Z+9	; 0x09
    2a90:	82 85       	ldd	r24, Z+10	; 0x0a
    2a92:	93 85       	ldd	r25, Z+11	; 0x0b
    2a94:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    2a98:	6d 87       	std	Y+13, r22	; 0x0d
    2a9a:	7e 87       	std	Y+14, r23	; 0x0e
    2a9c:	8f 87       	std	Y+15, r24	; 0x0f
    2a9e:	98 8b       	std	Y+16, r25	; 0x10
  float x = 0.0, y = 0.0, z = 0.0, one, two, three, four;
  float slat = sin(lat), clat = cos(lat), cd, sd;
    2aa0:	c5 01       	movw	r24, r10
    2aa2:	b4 01       	movw	r22, r8
    2aa4:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <sin>
    2aa8:	2b 01       	movw	r4, r22
    2aaa:	3c 01       	movw	r6, r24
    2aac:	c5 01       	movw	r24, r10
    2aae:	b4 01       	movw	r22, r8
    2ab0:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <cos>
    2ab4:	6d 83       	std	Y+5, r22	; 0x05
    2ab6:	7e 83       	std	Y+6, r23	; 0x06
    2ab8:	8f 83       	std	Y+7, r24	; 0x07
    2aba:	98 87       	std	Y+8, r25	; 0x08
  float ratio, r, rr = 0.0, t = years - IGRF_YEAR;
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 ee       	ldi	r19, 0xE0	; 224
    2ac0:	4b ef       	ldi	r20, 0xFB	; 251
    2ac2:	54 e4       	ldi	r21, 0x44	; 68
    2ac4:	69 85       	ldd	r22, Y+9	; 0x09
    2ac6:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ac8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2aca:	9c 85       	ldd	r25, Y+12	; 0x0c
    2acc:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    2ad0:	23 96       	adiw	r28, 0x03	; 3
    2ad2:	6c af       	std	Y+60, r22	; 0x3c
    2ad4:	7d af       	std	Y+61, r23	; 0x3d
    2ad6:	8e af       	std	Y+62, r24	; 0x3e
    2ad8:	9f af       	std	Y+63, r25	; 0x3f
    2ada:	23 97       	sbiw	r28, 0x03	; 3
  float agh_p, dgh_p;
  uint8_t l = 1, m = 1, n = 0, max, k, fn = 0, fm;
  
  cl[1] = cos(lon);
    2adc:	c7 01       	movw	r24, r14
    2ade:	b6 01       	movw	r22, r12
    2ae0:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <cos>
    2ae4:	60 93 95 02 	sts	0x0295, r22
    2ae8:	70 93 96 02 	sts	0x0296, r23
    2aec:	80 93 97 02 	sts	0x0297, r24
    2af0:	90 93 98 02 	sts	0x0298, r25
  sl[1] = sin(lon);
    2af4:	c7 01       	movw	r24, r14
    2af6:	b6 01       	movw	r22, r12
    2af8:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <sin>
    2afc:	60 93 59 02 	sts	0x0259, r22
    2b00:	70 93 5a 02 	sts	0x025A, r23
    2b04:	80 93 5b 02 	sts	0x025B, r24
    2b08:	90 93 5c 02 	sts	0x025C, r25
  one = A2 * clat * clat;
    2b0c:	2e e2       	ldi	r18, 0x2E	; 46
    2b0e:	3f e2       	ldi	r19, 0x2F	; 47
    2b10:	4b e1       	ldi	r20, 0x1B	; 27
    2b12:	5c e4       	ldi	r21, 0x4C	; 76
    2b14:	6d 81       	ldd	r22, Y+5	; 0x05
    2b16:	7e 81       	ldd	r23, Y+6	; 0x06
    2b18:	8f 81       	ldd	r24, Y+7	; 0x07
    2b1a:	98 85       	ldd	r25, Y+8	; 0x08
    2b1c:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2b20:	2d 81       	ldd	r18, Y+5	; 0x05
    2b22:	3e 81       	ldd	r19, Y+6	; 0x06
    2b24:	4f 81       	ldd	r20, Y+7	; 0x07
    2b26:	58 85       	ldd	r21, Y+8	; 0x08
    2b28:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2b2c:	4b 01       	movw	r8, r22
    2b2e:	5c 01       	movw	r10, r24
  two = B2 * slat * slat;
    2b30:	2b e3       	ldi	r18, 0x3B	; 59
    2b32:	35 e2       	ldi	r19, 0x25	; 37
    2b34:	4a e1       	ldi	r20, 0x1A	; 26
    2b36:	5c e4       	ldi	r21, 0x4C	; 76
    2b38:	c3 01       	movw	r24, r6
    2b3a:	b2 01       	movw	r22, r4
    2b3c:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2b40:	a3 01       	movw	r20, r6
    2b42:	92 01       	movw	r18, r4
    2b44:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2b48:	6b 01       	movw	r12, r22
    2b4a:	7c 01       	movw	r14, r24
  three = one + two;
    2b4c:	9b 01       	movw	r18, r22
    2b4e:	ac 01       	movw	r20, r24
    2b50:	c5 01       	movw	r24, r10
    2b52:	b4 01       	movw	r22, r8
    2b54:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    2b58:	69 8f       	std	Y+25, r22	; 0x19
    2b5a:	7a 8f       	std	Y+26, r23	; 0x1a
    2b5c:	8b 8f       	std	Y+27, r24	; 0x1b
    2b5e:	9c 8f       	std	Y+28, r25	; 0x1c
  four = sqrt(three);
    2b60:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <sqrt>
    2b64:	69 87       	std	Y+9, r22	; 0x09
    2b66:	7a 87       	std	Y+10, r23	; 0x0a
    2b68:	8b 87       	std	Y+11, r24	; 0x0b
    2b6a:	9c 87       	std	Y+12, r25	; 0x0c
  r = sqrt(alt * (alt + 2.0 * four) + (A2 * one + B2 * two)/three);
    2b6c:	9b 01       	movw	r18, r22
    2b6e:	ac 01       	movw	r20, r24
    2b70:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    2b74:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b76:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b78:	4f 85       	ldd	r20, Y+15	; 0x0f
    2b7a:	58 89       	ldd	r21, Y+16	; 0x10
    2b7c:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    2b80:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b82:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b84:	4f 85       	ldd	r20, Y+15	; 0x0f
    2b86:	58 89       	ldd	r21, Y+16	; 0x10
    2b88:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2b8c:	6d 8f       	std	Y+29, r22	; 0x1d
    2b8e:	7e 8f       	std	Y+30, r23	; 0x1e
    2b90:	8f 8f       	std	Y+31, r24	; 0x1f
    2b92:	98 a3       	std	Y+32, r25	; 0x20
    2b94:	2e e2       	ldi	r18, 0x2E	; 46
    2b96:	3f e2       	ldi	r19, 0x2F	; 47
    2b98:	4b e1       	ldi	r20, 0x1B	; 27
    2b9a:	5c e4       	ldi	r21, 0x4C	; 76
    2b9c:	c5 01       	movw	r24, r10
    2b9e:	b4 01       	movw	r22, r8
    2ba0:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2ba4:	4b 01       	movw	r8, r22
    2ba6:	5c 01       	movw	r10, r24
    2ba8:	2b e3       	ldi	r18, 0x3B	; 59
    2baa:	35 e2       	ldi	r19, 0x25	; 37
    2bac:	4a e1       	ldi	r20, 0x1A	; 26
    2bae:	5c e4       	ldi	r21, 0x4C	; 76
    2bb0:	c7 01       	movw	r24, r14
    2bb2:	b6 01       	movw	r22, r12
    2bb4:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2bb8:	9b 01       	movw	r18, r22
    2bba:	ac 01       	movw	r20, r24
    2bbc:	c5 01       	movw	r24, r10
    2bbe:	b4 01       	movw	r22, r8
    2bc0:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    2bc4:	29 8d       	ldd	r18, Y+25	; 0x19
    2bc6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2bc8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2bca:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2bcc:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    2bd0:	9b 01       	movw	r18, r22
    2bd2:	ac 01       	movw	r20, r24
    2bd4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2bd6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2bd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bda:	98 a1       	ldd	r25, Y+32	; 0x20
    2bdc:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    2be0:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <sqrt>
    2be4:	4b 01       	movw	r8, r22
    2be6:	5c 01       	movw	r10, r24
  
  one = slat;
  cd = (alt + four) / r;
    2be8:	29 85       	ldd	r18, Y+9	; 0x09
    2bea:	3a 85       	ldd	r19, Y+10	; 0x0a
    2bec:	4b 85       	ldd	r20, Y+11	; 0x0b
    2bee:	5c 85       	ldd	r21, Y+12	; 0x0c
    2bf0:	6d 85       	ldd	r22, Y+13	; 0x0d
    2bf2:	7e 85       	ldd	r23, Y+14	; 0x0e
    2bf4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bf6:	98 89       	ldd	r25, Y+16	; 0x10
    2bf8:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    2bfc:	a5 01       	movw	r20, r10
    2bfe:	94 01       	movw	r18, r8
    2c00:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    2c04:	60 96       	adiw	r28, 0x10	; 16
    2c06:	6c af       	std	Y+60, r22	; 0x3c
    2c08:	7d af       	std	Y+61, r23	; 0x3d
    2c0a:	8e af       	std	Y+62, r24	; 0x3e
    2c0c:	9f af       	std	Y+63, r25	; 0x3f
    2c0e:	60 97       	sbiw	r28, 0x10	; 16
  sd = ((A2 - B2) * slat * clat) / (four * r);
    2c10:	20 e8       	ldi	r18, 0x80	; 128
    2c12:	39 ef       	ldi	r19, 0xF9	; 249
    2c14:	44 e8       	ldi	r20, 0x84	; 132
    2c16:	58 e4       	ldi	r21, 0x48	; 72
    2c18:	c3 01       	movw	r24, r6
    2c1a:	b2 01       	movw	r22, r4
    2c1c:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2c20:	2d 81       	ldd	r18, Y+5	; 0x05
    2c22:	3e 81       	ldd	r19, Y+6	; 0x06
    2c24:	4f 81       	ldd	r20, Y+7	; 0x07
    2c26:	58 85       	ldd	r21, Y+8	; 0x08
    2c28:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2c2c:	6b 01       	movw	r12, r22
    2c2e:	7c 01       	movw	r14, r24
    2c30:	a5 01       	movw	r20, r10
    2c32:	94 01       	movw	r18, r8
    2c34:	69 85       	ldd	r22, Y+9	; 0x09
    2c36:	7a 85       	ldd	r23, Y+10	; 0x0a
    2c38:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c3a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c3c:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2c40:	9b 01       	movw	r18, r22
    2c42:	ac 01       	movw	r20, r24
    2c44:	c7 01       	movw	r24, r14
    2c46:	b6 01       	movw	r22, r12
    2c48:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    2c4c:	64 96       	adiw	r28, 0x14	; 20
    2c4e:	6c af       	std	Y+60, r22	; 0x3c
    2c50:	7d af       	std	Y+61, r23	; 0x3d
    2c52:	8e af       	std	Y+62, r24	; 0x3e
    2c54:	9f af       	std	Y+63, r25	; 0x3f
    2c56:	64 97       	sbiw	r28, 0x14	; 20
  slat = slat * cd - clat * sd;
    2c58:	60 96       	adiw	r28, 0x10	; 16
    2c5a:	2c ad       	ldd	r18, Y+60	; 0x3c
    2c5c:	3d ad       	ldd	r19, Y+61	; 0x3d
    2c5e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c60:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c62:	60 97       	sbiw	r28, 0x10	; 16
    2c64:	c3 01       	movw	r24, r6
    2c66:	b2 01       	movw	r22, r4
    2c68:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2c6c:	6b 01       	movw	r12, r22
    2c6e:	7c 01       	movw	r14, r24
    2c70:	64 96       	adiw	r28, 0x14	; 20
    2c72:	2c ad       	ldd	r18, Y+60	; 0x3c
    2c74:	3d ad       	ldd	r19, Y+61	; 0x3d
    2c76:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c78:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c7a:	64 97       	sbiw	r28, 0x14	; 20
    2c7c:	6d 81       	ldd	r22, Y+5	; 0x05
    2c7e:	7e 81       	ldd	r23, Y+6	; 0x06
    2c80:	8f 81       	ldd	r24, Y+7	; 0x07
    2c82:	98 85       	ldd	r25, Y+8	; 0x08
    2c84:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2c88:	9b 01       	movw	r18, r22
    2c8a:	ac 01       	movw	r20, r24
    2c8c:	c7 01       	movw	r24, r14
    2c8e:	b6 01       	movw	r22, r12
    2c90:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    2c94:	6a a7       	std	Y+42, r22	; 0x2a
    2c96:	7b a7       	std	Y+43, r23	; 0x2b
    2c98:	8c a7       	std	Y+44, r24	; 0x2c
    2c9a:	9d a7       	std	Y+45, r25	; 0x2d
  clat = clat * cd + one * sd;
    2c9c:	60 96       	adiw	r28, 0x10	; 16
    2c9e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2ca0:	3d ad       	ldd	r19, Y+61	; 0x3d
    2ca2:	4e ad       	ldd	r20, Y+62	; 0x3e
    2ca4:	5f ad       	ldd	r21, Y+63	; 0x3f
    2ca6:	60 97       	sbiw	r28, 0x10	; 16
    2ca8:	6d 81       	ldd	r22, Y+5	; 0x05
    2caa:	7e 81       	ldd	r23, Y+6	; 0x06
    2cac:	8f 81       	ldd	r24, Y+7	; 0x07
    2cae:	98 85       	ldd	r25, Y+8	; 0x08
    2cb0:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2cb4:	6b 01       	movw	r12, r22
    2cb6:	7c 01       	movw	r14, r24
    2cb8:	64 96       	adiw	r28, 0x14	; 20
    2cba:	2c ad       	ldd	r18, Y+60	; 0x3c
    2cbc:	3d ad       	ldd	r19, Y+61	; 0x3d
    2cbe:	4e ad       	ldd	r20, Y+62	; 0x3e
    2cc0:	5f ad       	ldd	r21, Y+63	; 0x3f
    2cc2:	64 97       	sbiw	r28, 0x14	; 20
    2cc4:	c3 01       	movw	r24, r6
    2cc6:	b2 01       	movw	r22, r4
    2cc8:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2ccc:	9b 01       	movw	r18, r22
    2cce:	ac 01       	movw	r20, r24
    2cd0:	c7 01       	movw	r24, r14
    2cd2:	b6 01       	movw	r22, r12
    2cd4:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    2cd8:	6e a3       	std	Y+38, r22	; 0x26
    2cda:	7f a3       	std	Y+39, r23	; 0x27
    2cdc:	88 a7       	std	Y+40, r24	; 0x28
    2cde:	99 a7       	std	Y+41, r25	; 0x29
  
  p[1] = 2.0 * slat;
    2ce0:	2a a5       	ldd	r18, Y+42	; 0x2a
    2ce2:	3b a5       	ldd	r19, Y+43	; 0x2b
    2ce4:	4c a5       	ldd	r20, Y+44	; 0x2c
    2ce6:	5d a5       	ldd	r21, Y+45	; 0x2d
    2ce8:	ca 01       	movw	r24, r20
    2cea:	b9 01       	movw	r22, r18
    2cec:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    2cf0:	60 93 99 03 	sts	0x0399, r22
    2cf4:	70 93 9a 03 	sts	0x039A, r23
    2cf8:	80 93 9b 03 	sts	0x039B, r24
    2cfc:	90 93 9c 03 	sts	0x039C, r25
  p[2] = 2.0 * clat;
    2d00:	2e a1       	ldd	r18, Y+38	; 0x26
    2d02:	3f a1       	ldd	r19, Y+39	; 0x27
    2d04:	48 a5       	ldd	r20, Y+40	; 0x28
    2d06:	59 a5       	ldd	r21, Y+41	; 0x29
    2d08:	ca 01       	movw	r24, r20
    2d0a:	b9 01       	movw	r22, r18
    2d0c:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    2d10:	60 93 9d 03 	sts	0x039D, r22
    2d14:	70 93 9e 03 	sts	0x039E, r23
    2d18:	80 93 9f 03 	sts	0x039F, r24
    2d1c:	90 93 a0 03 	sts	0x03A0, r25
  p[3] = 4.5 * slat * slat - 1.5;
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	40 e9       	ldi	r20, 0x90	; 144
    2d26:	50 e4       	ldi	r21, 0x40	; 64
    2d28:	6a a5       	ldd	r22, Y+42	; 0x2a
    2d2a:	7b a5       	ldd	r23, Y+43	; 0x2b
    2d2c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d2e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d30:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2d34:	2a a5       	ldd	r18, Y+42	; 0x2a
    2d36:	3b a5       	ldd	r19, Y+43	; 0x2b
    2d38:	4c a5       	ldd	r20, Y+44	; 0x2c
    2d3a:	5d a5       	ldd	r21, Y+45	; 0x2d
    2d3c:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	40 ec       	ldi	r20, 0xC0	; 192
    2d46:	5f e3       	ldi	r21, 0x3F	; 63
    2d48:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    2d4c:	60 93 a1 03 	sts	0x03A1, r22
    2d50:	70 93 a2 03 	sts	0x03A2, r23
    2d54:	80 93 a3 03 	sts	0x03A3, r24
    2d58:	90 93 a4 03 	sts	0x03A4, r25
  p[4] = sqrt(27) * clat * slat;
    2d5c:	21 ee       	ldi	r18, 0xE1	; 225
    2d5e:	36 e4       	ldi	r19, 0x46	; 70
    2d60:	46 ea       	ldi	r20, 0xA6	; 166
    2d62:	50 e4       	ldi	r21, 0x40	; 64
    2d64:	6e a1       	ldd	r22, Y+38	; 0x26
    2d66:	7f a1       	ldd	r23, Y+39	; 0x27
    2d68:	88 a5       	ldd	r24, Y+40	; 0x28
    2d6a:	99 a5       	ldd	r25, Y+41	; 0x29
    2d6c:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2d70:	2a a5       	ldd	r18, Y+42	; 0x2a
    2d72:	3b a5       	ldd	r19, Y+43	; 0x2b
    2d74:	4c a5       	ldd	r20, Y+44	; 0x2c
    2d76:	5d a5       	ldd	r21, Y+45	; 0x2d
    2d78:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2d7c:	60 93 a5 03 	sts	0x03A5, r22
    2d80:	70 93 a6 03 	sts	0x03A6, r23
    2d84:	80 93 a7 03 	sts	0x03A7, r24
    2d88:	90 93 a8 03 	sts	0x03A8, r25
  q[1] = -1 * clat;
    2d8c:	8e a1       	ldd	r24, Y+38	; 0x26
    2d8e:	9f a1       	ldd	r25, Y+39	; 0x27
    2d90:	a8 a5       	ldd	r26, Y+40	; 0x28
    2d92:	b9 a5       	ldd	r27, Y+41	; 0x29
    2d94:	b0 58       	subi	r27, 0x80	; 128
    2d96:	80 93 d1 02 	sts	0x02D1, r24
    2d9a:	90 93 d2 02 	sts	0x02D2, r25
    2d9e:	a0 93 d3 02 	sts	0x02D3, r26
    2da2:	b0 93 d4 02 	sts	0x02D4, r27
  q[2] = slat;
    2da6:	2a a5       	ldd	r18, Y+42	; 0x2a
    2da8:	3b a5       	ldd	r19, Y+43	; 0x2b
    2daa:	4c a5       	ldd	r20, Y+44	; 0x2c
    2dac:	5d a5       	ldd	r21, Y+45	; 0x2d
    2dae:	20 93 d5 02 	sts	0x02D5, r18
    2db2:	30 93 d6 02 	sts	0x02D6, r19
    2db6:	40 93 d7 02 	sts	0x02D7, r20
    2dba:	50 93 d8 02 	sts	0x02D8, r21
  q[3] = -3.0 * clat * slat;
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	40 e4       	ldi	r20, 0x40	; 64
    2dc4:	50 ec       	ldi	r21, 0xC0	; 192
    2dc6:	6e a1       	ldd	r22, Y+38	; 0x26
    2dc8:	7f a1       	ldd	r23, Y+39	; 0x27
    2dca:	88 a5       	ldd	r24, Y+40	; 0x28
    2dcc:	99 a5       	ldd	r25, Y+41	; 0x29
    2dce:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2dd2:	2a a5       	ldd	r18, Y+42	; 0x2a
    2dd4:	3b a5       	ldd	r19, Y+43	; 0x2b
    2dd6:	4c a5       	ldd	r20, Y+44	; 0x2c
    2dd8:	5d a5       	ldd	r21, Y+45	; 0x2d
    2dda:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2dde:	60 93 d9 02 	sts	0x02D9, r22
    2de2:	70 93 da 02 	sts	0x02DA, r23
    2de6:	80 93 db 02 	sts	0x02DB, r24
    2dea:	90 93 dc 02 	sts	0x02DC, r25
  q[4] = sqrt(3) * (slat * slat - clat * clat);
    2dee:	2a a5       	ldd	r18, Y+42	; 0x2a
    2df0:	3b a5       	ldd	r19, Y+43	; 0x2b
    2df2:	4c a5       	ldd	r20, Y+44	; 0x2c
    2df4:	5d a5       	ldd	r21, Y+45	; 0x2d
    2df6:	ca 01       	movw	r24, r20
    2df8:	b9 01       	movw	r22, r18
    2dfa:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2dfe:	6b 01       	movw	r12, r22
    2e00:	7c 01       	movw	r14, r24
    2e02:	2e a1       	ldd	r18, Y+38	; 0x26
    2e04:	3f a1       	ldd	r19, Y+39	; 0x27
    2e06:	48 a5       	ldd	r20, Y+40	; 0x28
    2e08:	59 a5       	ldd	r21, Y+41	; 0x29
    2e0a:	ca 01       	movw	r24, r20
    2e0c:	b9 01       	movw	r22, r18
    2e0e:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2e12:	9b 01       	movw	r18, r22
    2e14:	ac 01       	movw	r20, r24
    2e16:	c7 01       	movw	r24, r14
    2e18:	b6 01       	movw	r22, r12
    2e1a:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    2e1e:	27 ed       	ldi	r18, 0xD7	; 215
    2e20:	33 eb       	ldi	r19, 0xB3	; 179
    2e22:	4d ed       	ldi	r20, 0xDD	; 221
    2e24:	5f e3       	ldi	r21, 0x3F	; 63
    2e26:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2e2a:	60 93 dd 02 	sts	0x02DD, r22
    2e2e:	70 93 de 02 	sts	0x02DE, r23
    2e32:	80 93 df 02 	sts	0x02DF, r24
    2e36:	90 93 e0 02 	sts	0x02E0, r25
  
  ratio = RE / r;
    2e3a:	a5 01       	movw	r20, r10
    2e3c:	94 01       	movw	r18, r8
    2e3e:	6a e9       	ldi	r22, 0x9A	; 154
    2e40:	79 e1       	ldi	r23, 0x19	; 25
    2e42:	87 ec       	ldi	r24, 0xC7	; 199
    2e44:	95 e4       	ldi	r25, 0x45	; 69
    2e46:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    2e4a:	2c 96       	adiw	r28, 0x0c	; 12
    2e4c:	6c af       	std	Y+60, r22	; 0x3c
    2e4e:	7d af       	std	Y+61, r23	; 0x3d
    2e50:	8e af       	std	Y+62, r24	; 0x3e
    2e52:	9f af       	std	Y+63, r25	; 0x3f
    2e54:	2c 97       	sbiw	r28, 0x0c	; 12
  
  max = (order * (order + 3)) / 2;
    2e56:	43 2d       	mov	r20, r3
    2e58:	50 e0       	ldi	r21, 0x00	; 0
    2e5a:	9a 01       	movw	r18, r20
    2e5c:	2d 5f       	subi	r18, 0xFD	; 253
    2e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e60:	42 9f       	mul	r20, r18
    2e62:	c0 01       	movw	r24, r0
    2e64:	43 9f       	mul	r20, r19
    2e66:	90 0d       	add	r25, r0
    2e68:	52 9f       	mul	r21, r18
    2e6a:	90 0d       	add	r25, r0
    2e6c:	11 24       	eor	r1, r1
    2e6e:	95 95       	asr	r25
    2e70:	87 95       	ror	r24
    2e72:	24 96       	adiw	r28, 0x04	; 4
    2e74:	8f af       	std	Y+63, r24	; 0x3f
    2e76:	24 97       	sbiw	r28, 0x04	; 4
  for(k = 1; k <= max; k++)
    2e78:	88 23       	and	r24, r24
    2e7a:	09 f4       	brne	.+2      	; 0x2e7e <igrf+0x454>
    2e7c:	95 c4       	rjmp	.+2346   	; 0x37a8 <igrf+0xd7e>
  float lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;
  float x = 0.0, y = 0.0, z = 0.0, one, two, three, four;
  float slat = sin(lat), clat = cos(lat), cd, sd;
  float ratio, r, rr = 0.0, t = years - IGRF_YEAR;
  float agh_p, dgh_p;
  uint8_t l = 1, m = 1, n = 0, max, k, fn = 0, fm;
    2e7e:	19 8e       	std	Y+25, r1	; 0x19
  q[4] = sqrt(3) * (slat * slat - clat * clat);
  
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
    2e80:	31 e0       	ldi	r19, 0x01	; 1
    2e82:	39 87       	std	Y+9, r19	; 0x09
  float lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;
  float x = 0.0, y = 0.0, z = 0.0, one, two, three, four;
  float slat = sin(lat), clat = cos(lat), cd, sd;
  float ratio, r, rr = 0.0, t = years - IGRF_YEAR;
  float agh_p, dgh_p;
  uint8_t l = 1, m = 1, n = 0, max, k, fn = 0, fm;
    2e84:	1d 86       	std	Y+13, r1	; 0x0d
    2e86:	41 e0       	ldi	r20, 0x01	; 1
    2e88:	49 a3       	std	Y+33, r20	; 0x21
    2e8a:	51 e0       	ldi	r21, 0x01	; 1
    2e8c:	5d 8f       	std	Y+29, r21	; 0x1d
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
  float lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;
  float x = 0.0, y = 0.0, z = 0.0, one, two, three, four;
  float slat = sin(lat), clat = cos(lat), cd, sd;
  float ratio, r, rr = 0.0, t = years - IGRF_YEAR;
    2e8e:	1b ae       	std	Y+59, r1	; 0x3b
    2e90:	1c ae       	std	Y+60, r1	; 0x3c
    2e92:	1d ae       	std	Y+61, r1	; 0x3d
    2e94:	1e ae       	std	Y+62, r1	; 0x3e
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
  float lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;
  float x = 0.0, y = 0.0, z = 0.0, one, two, three, four;
    2e96:	1e aa       	std	Y+54, r1	; 0x36
    2e98:	1f aa       	std	Y+55, r1	; 0x37
    2e9a:	18 ae       	std	Y+56, r1	; 0x38
    2e9c:	19 ae       	std	Y+57, r1	; 0x39
    2e9e:	28 96       	adiw	r28, 0x08	; 8
    2ea0:	1c ae       	std	Y+60, r1	; 0x3c
    2ea2:	1d ae       	std	Y+61, r1	; 0x3d
    2ea4:	1e ae       	std	Y+62, r1	; 0x3e
    2ea6:	1f ae       	std	Y+63, r1	; 0x3f
    2ea8:	28 97       	sbiw	r28, 0x08	; 8
    2eaa:	1a aa       	std	Y+50, r1	; 0x32
    2eac:	1b aa       	std	Y+51, r1	; 0x33
    2eae:	1c aa       	std	Y+52, r1	; 0x34
    2eb0:	1d aa       	std	Y+53, r1	; 0x35
    2eb2:	93 c1       	rjmp	.+806    	; 0x31da <igrf+0x7b0>
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
  {
    if(n < m)
    2eb4:	8d 83       	std	Y+5, r24	; 0x05
    2eb6:	a8 2f       	mov	r26, r24
    2eb8:	af 5f       	subi	r26, 0xFF	; 255
    2eba:	a9 a3       	std	Y+33, r26	; 0x21
      n++;
      rr = pow(ratio, n + 2);
      fn = n;
    }
    fm = m;
    if(k >= 5)
    2ebc:	29 85       	ldd	r18, Y+9	; 0x09
    2ebe:	25 30       	cpi	r18, 0x05	; 5
    2ec0:	08 f4       	brcc	.+2      	; 0x2ec4 <igrf+0x49a>
    2ec2:	81 c4       	rjmp	.+2306   	; 0x37c6 <igrf+0xd9c>
    {
      if(m == n)
    2ec4:	3d 81       	ldd	r19, Y+5	; 0x05
    2ec6:	4d 85       	ldd	r20, Y+13	; 0x0d
    2ec8:	34 17       	cp	r19, r20
    2eca:	09 f4       	brne	.+2      	; 0x2ece <igrf+0x4a4>
    2ecc:	29 c3       	rjmp	.+1618   	; 0x3520 <igrf+0xaf6>
        sl[m] = sl[m - 1] * cl[1] + cl[m - 1] * sl[1];
        cl[m] = cl[m - 1] * cl[1] - sl[m - 1] * sl[1];
      }
      else
      {
        one = sqrt(fn * fn - fm * fm);
    2ece:	fd 81       	ldd	r31, Y+5	; 0x05
    2ed0:	ff 9f       	mul	r31, r31
    2ed2:	80 01       	movw	r16, r0
    2ed4:	11 24       	eor	r1, r1
    2ed6:	29 8d       	ldd	r18, Y+25	; 0x19
    2ed8:	22 9f       	mul	r18, r18
    2eda:	b0 01       	movw	r22, r0
    2edc:	11 24       	eor	r1, r1
    2ede:	60 1b       	sub	r22, r16
    2ee0:	71 0b       	sbc	r23, r17
    2ee2:	88 27       	eor	r24, r24
    2ee4:	77 fd       	sbrc	r23, 7
    2ee6:	80 95       	com	r24
    2ee8:	98 2f       	mov	r25, r24
    2eea:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
    2eee:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <sqrt>
    2ef2:	4b 01       	movw	r8, r22
    2ef4:	5c 01       	movw	r10, r24
        two = sqrt(pow(fn - 1.0, 2) - fm * fm) / one;
    2ef6:	39 8d       	ldd	r19, Y+25	; 0x19
    2ef8:	63 2f       	mov	r22, r19
    2efa:	70 e0       	ldi	r23, 0x00	; 0
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
    2f04:	2b 01       	movw	r4, r22
    2f06:	3c 01       	movw	r6, r24
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	40 e8       	ldi	r20, 0x80	; 128
    2f0e:	5f e3       	ldi	r21, 0x3F	; 63
    2f10:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    2f14:	69 83       	std	Y+1, r22	; 0x01
    2f16:	7a 83       	std	Y+2, r23	; 0x02
    2f18:	8b 83       	std	Y+3, r24	; 0x03
    2f1a:	9c 83       	std	Y+4, r25	; 0x04
    2f1c:	9b 01       	movw	r18, r22
    2f1e:	ac 01       	movw	r20, r24
    2f20:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2f24:	6b 01       	movw	r12, r22
    2f26:	7c 01       	movw	r14, r24
    2f28:	b8 01       	movw	r22, r16
    2f2a:	88 27       	eor	r24, r24
    2f2c:	77 fd       	sbrc	r23, 7
    2f2e:	80 95       	com	r24
    2f30:	98 2f       	mov	r25, r24
    2f32:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
    2f36:	9b 01       	movw	r18, r22
    2f38:	ac 01       	movw	r20, r24
    2f3a:	c7 01       	movw	r24, r14
    2f3c:	b6 01       	movw	r22, r12
    2f3e:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    2f42:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <sqrt>
    2f46:	a5 01       	movw	r20, r10
    2f48:	94 01       	movw	r18, r8
    2f4a:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    2f4e:	6b 01       	movw	r12, r22
    2f50:	7c 01       	movw	r14, r24
        three = (2.0 * fn - 1.0) / one;
    2f52:	a3 01       	movw	r20, r6
    2f54:	92 01       	movw	r18, r4
    2f56:	c3 01       	movw	r24, r6
    2f58:	b2 01       	movw	r22, r4
    2f5a:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	40 e8       	ldi	r20, 0x80	; 128
    2f64:	5f e3       	ldi	r21, 0x3F	; 63
    2f66:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    2f6a:	a5 01       	movw	r20, r10
    2f6c:	94 01       	movw	r18, r8
    2f6e:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    2f72:	6a a3       	std	Y+34, r22	; 0x22
    2f74:	7b a3       	std	Y+35, r23	; 0x23
    2f76:	8c a3       	std	Y+36, r24	; 0x24
    2f78:	9d a3       	std	Y+37, r25	; 0x25
        p[k]  = (fn + 1.0) * ((three * slat * p[k - n]) / fn  - (two * p[k - 2 * n + 1])/(fn - 1.0));
    2f7a:	49 85       	ldd	r20, Y+9	; 0x09
    2f7c:	24 2f       	mov	r18, r20
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	5d 85       	ldd	r21, Y+13	; 0x0d
    2f82:	85 2f       	mov	r24, r21
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	3a 8b       	std	Y+18, r19	; 0x12
    2f88:	29 8b       	std	Y+17, r18	; 0x11
    2f8a:	19 01       	movw	r2, r18
    2f8c:	28 1a       	sub	r2, r24
    2f8e:	39 0a       	sbc	r3, r25
    2f90:	d1 01       	movw	r26, r2
    2f92:	a8 1b       	sub	r26, r24
    2f94:	b9 0b       	sbc	r27, r25
    2f96:	11 96       	adiw	r26, 0x01	; 1
    2f98:	68 96       	adiw	r28, 0x18	; 24
    2f9a:	bf af       	std	Y+63, r27	; 0x3f
    2f9c:	ae af       	std	Y+62, r26	; 0x3e
    2f9e:	68 97       	sbiw	r28, 0x18	; 24
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	40 e8       	ldi	r20, 0x80	; 128
    2fa6:	5f e3       	ldi	r21, 0x3F	; 63
    2fa8:	c3 01       	movw	r24, r6
    2faa:	b2 01       	movw	r22, r4
    2fac:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    2fb0:	4b 01       	movw	r8, r22
    2fb2:	5c 01       	movw	r10, r24
    2fb4:	2a a5       	ldd	r18, Y+42	; 0x2a
    2fb6:	3b a5       	ldd	r19, Y+43	; 0x2b
    2fb8:	4c a5       	ldd	r20, Y+44	; 0x2c
    2fba:	5d a5       	ldd	r21, Y+45	; 0x2d
    2fbc:	6a a1       	ldd	r22, Y+34	; 0x22
    2fbe:	7b a1       	ldd	r23, Y+35	; 0x23
    2fc0:	8c a1       	ldd	r24, Y+36	; 0x24
    2fc2:	9d a1       	ldd	r25, Y+37	; 0x25
    2fc4:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2fc8:	22 0c       	add	r2, r2
    2fca:	33 1c       	adc	r3, r3
    2fcc:	22 0c       	add	r2, r2
    2fce:	33 1c       	adc	r3, r3
    2fd0:	f1 01       	movw	r30, r2
    2fd2:	eb 56       	subi	r30, 0x6B	; 107
    2fd4:	fc 4f       	sbci	r31, 0xFC	; 252
    2fd6:	ff a7       	std	Y+47, r31	; 0x2f
    2fd8:	ee a7       	std	Y+46, r30	; 0x2e
    2fda:	20 81       	ld	r18, Z
    2fdc:	31 81       	ldd	r19, Z+1	; 0x01
    2fde:	42 81       	ldd	r20, Z+2	; 0x02
    2fe0:	53 81       	ldd	r21, Z+3	; 0x03
    2fe2:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    2fe6:	a3 01       	movw	r20, r6
    2fe8:	92 01       	movw	r18, r4
    2fea:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    2fee:	6d 8b       	std	Y+21, r22	; 0x15
    2ff0:	7e 8b       	std	Y+22, r23	; 0x16
    2ff2:	8f 8b       	std	Y+23, r24	; 0x17
    2ff4:	98 8f       	std	Y+24, r25	; 0x18
    2ff6:	68 96       	adiw	r28, 0x18	; 24
    2ff8:	2e ad       	ldd	r18, Y+62	; 0x3e
    2ffa:	3f ad       	ldd	r19, Y+63	; 0x3f
    2ffc:	68 97       	sbiw	r28, 0x18	; 24
    2ffe:	22 0f       	add	r18, r18
    3000:	33 1f       	adc	r19, r19
    3002:	22 0f       	add	r18, r18
    3004:	33 1f       	adc	r19, r19
    3006:	68 96       	adiw	r28, 0x18	; 24
    3008:	3f af       	std	Y+63, r19	; 0x3f
    300a:	2e af       	std	Y+62, r18	; 0x3e
    300c:	68 97       	sbiw	r28, 0x18	; 24
    300e:	f9 01       	movw	r30, r18
    3010:	eb 56       	subi	r30, 0x6B	; 107
    3012:	fc 4f       	sbci	r31, 0xFC	; 252
    3014:	20 81       	ld	r18, Z
    3016:	31 81       	ldd	r19, Z+1	; 0x01
    3018:	42 81       	ldd	r20, Z+2	; 0x02
    301a:	53 81       	ldd	r21, Z+3	; 0x03
    301c:	c7 01       	movw	r24, r14
    301e:	b6 01       	movw	r22, r12
    3020:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3024:	29 81       	ldd	r18, Y+1	; 0x01
    3026:	3a 81       	ldd	r19, Y+2	; 0x02
    3028:	4b 81       	ldd	r20, Y+3	; 0x03
    302a:	5c 81       	ldd	r21, Y+4	; 0x04
    302c:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    3030:	9b 01       	movw	r18, r22
    3032:	ac 01       	movw	r20, r24
    3034:	6d 89       	ldd	r22, Y+21	; 0x15
    3036:	7e 89       	ldd	r23, Y+22	; 0x16
    3038:	8f 89       	ldd	r24, Y+23	; 0x17
    303a:	98 8d       	ldd	r25, Y+24	; 0x18
    303c:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    3040:	9b 01       	movw	r18, r22
    3042:	ac 01       	movw	r20, r24
    3044:	c5 01       	movw	r24, r10
    3046:	b4 01       	movw	r22, r8
    3048:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    304c:	16 2f       	mov	r17, r22
    304e:	7d 8b       	std	Y+21, r23	; 0x15
    3050:	8a af       	std	Y+58, r24	; 0x3a
    3052:	09 2f       	mov	r16, r25
    3054:	49 89       	ldd	r20, Y+17	; 0x11
    3056:	5a 89       	ldd	r21, Y+18	; 0x12
    3058:	44 0f       	add	r20, r20
    305a:	55 1f       	adc	r21, r21
    305c:	44 0f       	add	r20, r20
    305e:	55 1f       	adc	r21, r21
    3060:	5a 83       	std	Y+2, r21	; 0x02
    3062:	49 83       	std	Y+1, r20	; 0x01
    3064:	9a 01       	movw	r18, r20
    3066:	2b 56       	subi	r18, 0x6B	; 107
    3068:	3c 4f       	sbci	r19, 0xFC	; 252
    306a:	86 2f       	mov	r24, r22
    306c:	97 2f       	mov	r25, r23
    306e:	aa ad       	ldd	r26, Y+58	; 0x3a
    3070:	b0 2f       	mov	r27, r16
    3072:	f9 01       	movw	r30, r18
    3074:	80 83       	st	Z, r24
    3076:	91 83       	std	Z+1, r25	; 0x01
    3078:	a2 83       	std	Z+2, r26	; 0x02
    307a:	b3 83       	std	Z+3, r27	; 0x03
        q[k]  = three * (slat * q[k - n] - clat * p[k - n] / fn) - two * q[k - 2 * n + 1];
    307c:	f1 01       	movw	r30, r2
    307e:	e3 53       	subi	r30, 0x33	; 51
    3080:	fd 4f       	sbci	r31, 0xFD	; 253
    3082:	20 81       	ld	r18, Z
    3084:	31 81       	ldd	r19, Z+1	; 0x01
    3086:	42 81       	ldd	r20, Z+2	; 0x02
    3088:	53 81       	ldd	r21, Z+3	; 0x03
    308a:	6a a5       	ldd	r22, Y+42	; 0x2a
    308c:	7b a5       	ldd	r23, Y+43	; 0x2b
    308e:	8c a5       	ldd	r24, Y+44	; 0x2c
    3090:	9d a5       	ldd	r25, Y+45	; 0x2d
    3092:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3096:	4b 01       	movw	r8, r22
    3098:	5c 01       	movw	r10, r24
    309a:	ae a5       	ldd	r26, Y+46	; 0x2e
    309c:	bf a5       	ldd	r27, Y+47	; 0x2f
    309e:	2d 91       	ld	r18, X+
    30a0:	3d 91       	ld	r19, X+
    30a2:	4d 91       	ld	r20, X+
    30a4:	5c 91       	ld	r21, X
    30a6:	6e a1       	ldd	r22, Y+38	; 0x26
    30a8:	7f a1       	ldd	r23, Y+39	; 0x27
    30aa:	88 a5       	ldd	r24, Y+40	; 0x28
    30ac:	99 a5       	ldd	r25, Y+41	; 0x29
    30ae:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    30b2:	a3 01       	movw	r20, r6
    30b4:	92 01       	movw	r18, r4
    30b6:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    30ba:	9b 01       	movw	r18, r22
    30bc:	ac 01       	movw	r20, r24
    30be:	c5 01       	movw	r24, r10
    30c0:	b4 01       	movw	r22, r8
    30c2:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    30c6:	2a a1       	ldd	r18, Y+34	; 0x22
    30c8:	3b a1       	ldd	r19, Y+35	; 0x23
    30ca:	4c a1       	ldd	r20, Y+36	; 0x24
    30cc:	5d a1       	ldd	r21, Y+37	; 0x25
    30ce:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    30d2:	4b 01       	movw	r8, r22
    30d4:	5c 01       	movw	r10, r24
    30d6:	68 96       	adiw	r28, 0x18	; 24
    30d8:	ee ad       	ldd	r30, Y+62	; 0x3e
    30da:	ff ad       	ldd	r31, Y+63	; 0x3f
    30dc:	68 97       	sbiw	r28, 0x18	; 24
    30de:	e3 53       	subi	r30, 0x33	; 51
    30e0:	fd 4f       	sbci	r31, 0xFD	; 253
    30e2:	20 81       	ld	r18, Z
    30e4:	31 81       	ldd	r19, Z+1	; 0x01
    30e6:	42 81       	ldd	r20, Z+2	; 0x02
    30e8:	53 81       	ldd	r21, Z+3	; 0x03
    30ea:	c7 01       	movw	r24, r14
    30ec:	b6 01       	movw	r22, r12
    30ee:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    30f2:	9b 01       	movw	r18, r22
    30f4:	ac 01       	movw	r20, r24
    30f6:	c5 01       	movw	r24, r10
    30f8:	b4 01       	movw	r22, r8
    30fa:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    30fe:	2b 01       	movw	r4, r22
    3100:	3c 01       	movw	r6, r24
    3102:	e9 81       	ldd	r30, Y+1	; 0x01
    3104:	fa 81       	ldd	r31, Y+2	; 0x02
    3106:	e3 53       	subi	r30, 0x33	; 51
    3108:	fd 4f       	sbci	r31, 0xFD	; 253
    310a:	60 83       	st	Z, r22
    310c:	71 83       	std	Z+1, r23	; 0x01
    310e:	82 83       	std	Z+2, r24	; 0x02
    3110:	93 83       	std	Z+3, r25	; 0x03
    3112:	2d 88       	ldd	r2, Y+21	; 0x15
    3114:	3a ac       	ldd	r3, Y+58	; 0x3a
      }
    }
    
    agh_p = pgm_read_float(&agh[l]);
    3116:	bd 8d       	ldd	r27, Y+29	; 0x1d
    3118:	ab 2e       	mov	r10, r27
    311a:	b1 2c       	mov	r11, r1
    311c:	f5 01       	movw	r30, r10
    311e:	ee 0f       	add	r30, r30
    3120:	ff 1f       	adc	r31, r31
    3122:	ee 0f       	add	r30, r30
    3124:	ff 1f       	adc	r31, r31
    3126:	ea 55       	subi	r30, 0x5A	; 90
    3128:	fb 4f       	sbci	r31, 0xFB	; 251
    312a:	c5 90       	lpm	r12, Z+
    312c:	d5 90       	lpm	r13, Z+
    312e:	e5 90       	lpm	r14, Z+
    3130:	f4 90       	lpm	r15, Z
    dgh_p = pgm_read_float(&dgh[l]);
    3132:	f5 01       	movw	r30, r10
    3134:	ee 0f       	add	r30, r30
    3136:	ff 1f       	adc	r31, r31
    3138:	ee 0f       	add	r30, r30
    313a:	ff 1f       	adc	r31, r31
    313c:	ea 56       	subi	r30, 0x6A	; 106
    313e:	fe 4f       	sbci	r31, 0xFE	; 254
    3140:	25 91       	lpm	r18, Z+
    3142:	35 91       	lpm	r19, Z+
    3144:	45 91       	lpm	r20, Z+
    3146:	54 91       	lpm	r21, Z
    one = (agh_p + dgh_p * t) * rr;
    3148:	23 96       	adiw	r28, 0x03	; 3
    314a:	6c ad       	ldd	r22, Y+60	; 0x3c
    314c:	7d ad       	ldd	r23, Y+61	; 0x3d
    314e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3150:	9f ad       	ldd	r25, Y+63	; 0x3f
    3152:	23 97       	sbiw	r28, 0x03	; 3
    3154:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3158:	9b 01       	movw	r18, r22
    315a:	ac 01       	movw	r20, r24
    315c:	c7 01       	movw	r24, r14
    315e:	b6 01       	movw	r22, r12
    3160:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    3164:	2b ad       	ldd	r18, Y+59	; 0x3b
    3166:	3c ad       	ldd	r19, Y+60	; 0x3c
    3168:	4d ad       	ldd	r20, Y+61	; 0x3d
    316a:	5e ad       	ldd	r21, Y+62	; 0x3e
    316c:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3170:	6b 01       	movw	r12, r22
    3172:	7c 01       	movw	r14, r24
    
    
    if(m == 0)
    3174:	ed 81       	ldd	r30, Y+5	; 0x05
    3176:	e1 11       	cpse	r30, r1
    3178:	56 c0       	rjmp	.+172    	; 0x3226 <igrf+0x7fc>
    {
      x += one * q[k];
    317a:	a3 01       	movw	r20, r6
    317c:	92 01       	movw	r18, r4
    317e:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3182:	9b 01       	movw	r18, r22
    3184:	ac 01       	movw	r20, r24
    3186:	6a a9       	ldd	r22, Y+50	; 0x32
    3188:	7b a9       	ldd	r23, Y+51	; 0x33
    318a:	8c a9       	ldd	r24, Y+52	; 0x34
    318c:	9d a9       	ldd	r25, Y+53	; 0x35
    318e:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    3192:	6a ab       	std	Y+50, r22	; 0x32
    3194:	7b ab       	std	Y+51, r23	; 0x33
    3196:	8c ab       	std	Y+52, r24	; 0x34
    3198:	9d ab       	std	Y+53, r25	; 0x35
      z -= one * p[k];
    319a:	21 2f       	mov	r18, r17
    319c:	32 2d       	mov	r19, r2
    319e:	43 2d       	mov	r20, r3
    31a0:	50 2f       	mov	r21, r16
    31a2:	c7 01       	movw	r24, r14
    31a4:	b6 01       	movw	r22, r12
    31a6:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    31aa:	9b 01       	movw	r18, r22
    31ac:	ac 01       	movw	r20, r24
    31ae:	6e a9       	ldd	r22, Y+54	; 0x36
    31b0:	7f a9       	ldd	r23, Y+55	; 0x37
    31b2:	88 ad       	ldd	r24, Y+56	; 0x38
    31b4:	99 ad       	ldd	r25, Y+57	; 0x39
    31b6:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    31ba:	6e ab       	std	Y+54, r22	; 0x36
    31bc:	7f ab       	std	Y+55, r23	; 0x37
    31be:	88 af       	std	Y+56, r24	; 0x38
    31c0:	99 af       	std	Y+57, r25	; 0x39
      l++;
    31c2:	fd 8d       	ldd	r31, Y+29	; 0x1d
    31c4:	ff 5f       	subi	r31, 0xFF	; 255
    31c6:	fd 8f       	std	Y+29, r31	; 0x1d
  q[4] = sqrt(3) * (slat * slat - clat * clat);
  
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
    31c8:	39 85       	ldd	r19, Y+9	; 0x09
    31ca:	3f 5f       	subi	r19, 0xFF	; 255
    31cc:	39 87       	std	Y+9, r19	; 0x09
    31ce:	24 96       	adiw	r28, 0x04	; 4
    31d0:	4f ad       	ldd	r20, Y+63	; 0x3f
    31d2:	24 97       	sbiw	r28, 0x04	; 4
    31d4:	43 17       	cp	r20, r19
    31d6:	08 f4       	brcc	.+2      	; 0x31da <igrf+0x7b0>
    31d8:	2c c1       	rjmp	.+600    	; 0x3432 <igrf+0xa08>
  {
    if(n < m)
    31da:	89 a1       	ldd	r24, Y+33	; 0x21
    31dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    31de:	98 17       	cp	r25, r24
    31e0:	08 f0       	brcs	.+2      	; 0x31e4 <igrf+0x7ba>
    31e2:	68 ce       	rjmp	.-816    	; 0x2eb4 <igrf+0x48a>
    {
      m = 0;
      n++;
    31e4:	bd 85       	ldd	r27, Y+13	; 0x0d
    31e6:	bf 5f       	subi	r27, 0xFF	; 255
    31e8:	bd 87       	std	Y+13, r27	; 0x0d
      rr = pow(ratio, n + 2);
    31ea:	6b 2f       	mov	r22, r27
    31ec:	70 e0       	ldi	r23, 0x00	; 0
    31ee:	6e 5f       	subi	r22, 0xFE	; 254
    31f0:	7f 4f       	sbci	r23, 0xFF	; 255
    31f2:	88 27       	eor	r24, r24
    31f4:	77 fd       	sbrc	r23, 7
    31f6:	80 95       	com	r24
    31f8:	98 2f       	mov	r25, r24
    31fa:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
    31fe:	9b 01       	movw	r18, r22
    3200:	ac 01       	movw	r20, r24
    3202:	2c 96       	adiw	r28, 0x0c	; 12
    3204:	6c ad       	ldd	r22, Y+60	; 0x3c
    3206:	7d ad       	ldd	r23, Y+61	; 0x3d
    3208:	8e ad       	ldd	r24, Y+62	; 0x3e
    320a:	9f ad       	ldd	r25, Y+63	; 0x3f
    320c:	2c 97       	sbiw	r28, 0x0c	; 12
    320e:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <pow>
    3212:	6b af       	std	Y+59, r22	; 0x3b
    3214:	7c af       	std	Y+60, r23	; 0x3c
    3216:	8d af       	std	Y+61, r24	; 0x3d
    3218:	9e af       	std	Y+62, r25	; 0x3e
      fn = n;
    321a:	ed 85       	ldd	r30, Y+13	; 0x0d
    321c:	e9 8f       	std	Y+25, r30	; 0x19
  {
    if(n < m)
    {
      m = 0;
      n++;
      rr = pow(ratio, n + 2);
    321e:	f1 e0       	ldi	r31, 0x01	; 1
    3220:	f9 a3       	std	Y+33, r31	; 0x21
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
  {
    if(n < m)
    {
      m = 0;
    3222:	1d 82       	std	Y+5, r1	; 0x05
    3224:	4b ce       	rjmp	.-874    	; 0x2ebc <igrf+0x492>
      z -= one * p[k];
      l++;
    }
    else
    {
      agh_p = pgm_read_float(&agh[l + 1]);
    3226:	c5 01       	movw	r24, r10
    3228:	01 96       	adiw	r24, 0x01	; 1
    322a:	fc 01       	movw	r30, r24
    322c:	ee 0f       	add	r30, r30
    322e:	ff 1f       	adc	r31, r31
    3230:	ee 0f       	add	r30, r30
    3232:	ff 1f       	adc	r31, r31
    3234:	ea 55       	subi	r30, 0x5A	; 90
    3236:	fb 4f       	sbci	r31, 0xFB	; 251
    3238:	85 90       	lpm	r8, Z+
    323a:	95 90       	lpm	r9, Z+
    323c:	a5 90       	lpm	r10, Z+
    323e:	b4 90       	lpm	r11, Z
      dgh_p = pgm_read_float(&dgh[l + 1]);
    3240:	fc 01       	movw	r30, r24
    3242:	ee 0f       	add	r30, r30
    3244:	ff 1f       	adc	r31, r31
    3246:	ee 0f       	add	r30, r30
    3248:	ff 1f       	adc	r31, r31
    324a:	ea 56       	subi	r30, 0x6A	; 106
    324c:	fe 4f       	sbci	r31, 0xFE	; 254
    324e:	25 91       	lpm	r18, Z+
    3250:	35 91       	lpm	r19, Z+
    3252:	45 91       	lpm	r20, Z+
    3254:	54 91       	lpm	r21, Z
      two = (agh_p + dgh_p * t) * rr;
    3256:	23 96       	adiw	r28, 0x03	; 3
    3258:	6c ad       	ldd	r22, Y+60	; 0x3c
    325a:	7d ad       	ldd	r23, Y+61	; 0x3d
    325c:	8e ad       	ldd	r24, Y+62	; 0x3e
    325e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3260:	23 97       	sbiw	r28, 0x03	; 3
    3262:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3266:	9b 01       	movw	r18, r22
    3268:	ac 01       	movw	r20, r24
    326a:	c5 01       	movw	r24, r10
    326c:	b4 01       	movw	r22, r8
    326e:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    3272:	2b ad       	ldd	r18, Y+59	; 0x3b
    3274:	3c ad       	ldd	r19, Y+60	; 0x3c
    3276:	4d ad       	ldd	r20, Y+61	; 0x3d
    3278:	5e ad       	ldd	r21, Y+62	; 0x3e
    327a:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    327e:	69 8b       	std	Y+17, r22	; 0x11
    3280:	7a 8b       	std	Y+18, r23	; 0x12
    3282:	8b 8b       	std	Y+19, r24	; 0x13
    3284:	9c 8b       	std	Y+20, r25	; 0x14
      three = one * cl[m] + two * sl[m];
    3286:	3d 81       	ldd	r19, Y+5	; 0x05
    3288:	23 2f       	mov	r18, r19
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	3e 8b       	std	Y+22, r19	; 0x16
    328e:	2d 8b       	std	Y+21, r18	; 0x15
    3290:	c9 01       	movw	r24, r18
    3292:	88 0f       	add	r24, r24
    3294:	99 1f       	adc	r25, r25
    3296:	88 0f       	add	r24, r24
    3298:	99 1f       	adc	r25, r25
    329a:	fc 01       	movw	r30, r24
    329c:	ef 56       	subi	r30, 0x6F	; 111
    329e:	fd 4f       	sbci	r31, 0xFD	; 253
    32a0:	20 81       	ld	r18, Z
    32a2:	31 81       	ldd	r19, Z+1	; 0x01
    32a4:	42 81       	ldd	r20, Z+2	; 0x02
    32a6:	53 81       	ldd	r21, Z+3	; 0x03
    32a8:	2d 83       	std	Y+5, r18	; 0x05
    32aa:	3e 83       	std	Y+6, r19	; 0x06
    32ac:	4f 83       	std	Y+7, r20	; 0x07
    32ae:	58 87       	std	Y+8, r21	; 0x08
    32b0:	9c 01       	movw	r18, r24
    32b2:	2b 5a       	subi	r18, 0xAB	; 171
    32b4:	3d 4f       	sbci	r19, 0xFD	; 253
    32b6:	d9 01       	movw	r26, r18
    32b8:	8d 91       	ld	r24, X+
    32ba:	9d 91       	ld	r25, X+
    32bc:	0d 90       	ld	r0, X+
    32be:	bc 91       	ld	r27, X
    32c0:	a0 2d       	mov	r26, r0
    32c2:	89 83       	std	Y+1, r24	; 0x01
    32c4:	9a 83       	std	Y+2, r25	; 0x02
    32c6:	ab 83       	std	Y+3, r26	; 0x03
    32c8:	bc 83       	std	Y+4, r27	; 0x04
    32ca:	a7 01       	movw	r20, r14
    32cc:	96 01       	movw	r18, r12
    32ce:	6d 81       	ldd	r22, Y+5	; 0x05
    32d0:	7e 81       	ldd	r23, Y+6	; 0x06
    32d2:	8f 81       	ldd	r24, Y+7	; 0x07
    32d4:	98 85       	ldd	r25, Y+8	; 0x08
    32d6:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    32da:	4b 01       	movw	r8, r22
    32dc:	5c 01       	movw	r10, r24
    32de:	29 89       	ldd	r18, Y+17	; 0x11
    32e0:	3a 89       	ldd	r19, Y+18	; 0x12
    32e2:	4b 89       	ldd	r20, Y+19	; 0x13
    32e4:	5c 89       	ldd	r21, Y+20	; 0x14
    32e6:	69 81       	ldd	r22, Y+1	; 0x01
    32e8:	7a 81       	ldd	r23, Y+2	; 0x02
    32ea:	8b 81       	ldd	r24, Y+3	; 0x03
    32ec:	9c 81       	ldd	r25, Y+4	; 0x04
    32ee:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    32f2:	9b 01       	movw	r18, r22
    32f4:	ac 01       	movw	r20, r24
    32f6:	c5 01       	movw	r24, r10
    32f8:	b4 01       	movw	r22, r8
    32fa:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    32fe:	4b 01       	movw	r8, r22
    3300:	5c 01       	movw	r10, r24
      x += three * q[k];
    3302:	a3 01       	movw	r20, r6
    3304:	92 01       	movw	r18, r4
    3306:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    330a:	9b 01       	movw	r18, r22
    330c:	ac 01       	movw	r20, r24
    330e:	6a a9       	ldd	r22, Y+50	; 0x32
    3310:	7b a9       	ldd	r23, Y+51	; 0x33
    3312:	8c a9       	ldd	r24, Y+52	; 0x34
    3314:	9d a9       	ldd	r25, Y+53	; 0x35
    3316:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    331a:	6a ab       	std	Y+50, r22	; 0x32
    331c:	7b ab       	std	Y+51, r23	; 0x33
    331e:	8c ab       	std	Y+52, r24	; 0x34
    3320:	9d ab       	std	Y+53, r25	; 0x35
      z -= three * p[k];
    3322:	21 2f       	mov	r18, r17
    3324:	32 2d       	mov	r19, r2
    3326:	43 2d       	mov	r20, r3
    3328:	50 2f       	mov	r21, r16
    332a:	c5 01       	movw	r24, r10
    332c:	b4 01       	movw	r22, r8
    332e:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3332:	9b 01       	movw	r18, r22
    3334:	ac 01       	movw	r20, r24
    3336:	6e a9       	ldd	r22, Y+54	; 0x36
    3338:	7f a9       	ldd	r23, Y+55	; 0x37
    333a:	88 ad       	ldd	r24, Y+56	; 0x38
    333c:	99 ad       	ldd	r25, Y+57	; 0x39
    333e:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    3342:	6e ab       	std	Y+54, r22	; 0x36
    3344:	7f ab       	std	Y+55, r23	; 0x37
    3346:	88 af       	std	Y+56, r24	; 0x38
    3348:	99 af       	std	Y+57, r25	; 0x39
      
      if(clat > 0)
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	a9 01       	movw	r20, r18
    3350:	6e a1       	ldd	r22, Y+38	; 0x26
    3352:	7f a1       	ldd	r23, Y+39	; 0x27
    3354:	88 a5       	ldd	r24, Y+40	; 0x28
    3356:	99 a5       	ldd	r25, Y+41	; 0x29
    3358:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__gesf2>
        y += ((one * sl[m] - two * cl[m]) * fm * p[k]) / ((fn + 1.0) * clat);
    335c:	29 81       	ldd	r18, Y+1	; 0x01
    335e:	3a 81       	ldd	r19, Y+2	; 0x02
    3360:	4b 81       	ldd	r20, Y+3	; 0x03
    3362:	5c 81       	ldd	r21, Y+4	; 0x04
      two = (agh_p + dgh_p * t) * rr;
      three = one * cl[m] + two * sl[m];
      x += three * q[k];
      z -= three * p[k];
      
      if(clat > 0)
    3364:	18 16       	cp	r1, r24
    3366:	0c f0       	brlt	.+2      	; 0x336a <igrf+0x940>
    3368:	ee c1       	rjmp	.+988    	; 0x3746 <igrf+0xd1c>
        y += ((one * sl[m] - two * cl[m]) * fm * p[k]) / ((fn + 1.0) * clat);
    336a:	c7 01       	movw	r24, r14
    336c:	b6 01       	movw	r22, r12
    336e:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3372:	6b 01       	movw	r12, r22
    3374:	7c 01       	movw	r14, r24
    3376:	2d 81       	ldd	r18, Y+5	; 0x05
    3378:	3e 81       	ldd	r19, Y+6	; 0x06
    337a:	4f 81       	ldd	r20, Y+7	; 0x07
    337c:	58 85       	ldd	r21, Y+8	; 0x08
    337e:	69 89       	ldd	r22, Y+17	; 0x11
    3380:	7a 89       	ldd	r23, Y+18	; 0x12
    3382:	8b 89       	ldd	r24, Y+19	; 0x13
    3384:	9c 89       	ldd	r25, Y+20	; 0x14
    3386:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    338a:	9b 01       	movw	r18, r22
    338c:	ac 01       	movw	r20, r24
    338e:	c7 01       	movw	r24, r14
    3390:	b6 01       	movw	r22, r12
    3392:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    3396:	6b 01       	movw	r12, r22
    3398:	7c 01       	movw	r14, r24
    339a:	ed 89       	ldd	r30, Y+21	; 0x15
    339c:	fe 89       	ldd	r31, Y+22	; 0x16
    339e:	bf 01       	movw	r22, r30
    33a0:	88 27       	eor	r24, r24
    33a2:	77 fd       	sbrc	r23, 7
    33a4:	80 95       	com	r24
    33a6:	98 2f       	mov	r25, r24
    33a8:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
    33ac:	9b 01       	movw	r18, r22
    33ae:	ac 01       	movw	r20, r24
    33b0:	c7 01       	movw	r24, r14
    33b2:	b6 01       	movw	r22, r12
    33b4:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    33b8:	21 2f       	mov	r18, r17
    33ba:	32 2d       	mov	r19, r2
    33bc:	43 2d       	mov	r20, r3
    33be:	50 2f       	mov	r21, r16
    33c0:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    33c4:	6b 01       	movw	r12, r22
    33c6:	7c 01       	movw	r14, r24
    33c8:	f9 8d       	ldd	r31, Y+25	; 0x19
    33ca:	6f 2f       	mov	r22, r31
    33cc:	70 e0       	ldi	r23, 0x00	; 0
    33ce:	80 e0       	ldi	r24, 0x00	; 0
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	40 e8       	ldi	r20, 0x80	; 128
    33dc:	5f e3       	ldi	r21, 0x3F	; 63
    33de:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    33e2:	2e a1       	ldd	r18, Y+38	; 0x26
    33e4:	3f a1       	ldd	r19, Y+39	; 0x27
    33e6:	48 a5       	ldd	r20, Y+40	; 0x28
    33e8:	59 a5       	ldd	r21, Y+41	; 0x29
    33ea:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    33ee:	9b 01       	movw	r18, r22
    33f0:	ac 01       	movw	r20, r24
    33f2:	c7 01       	movw	r24, r14
    33f4:	b6 01       	movw	r22, r12
    33f6:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    33fa:	9b 01       	movw	r18, r22
    33fc:	ac 01       	movw	r20, r24
    33fe:	28 96       	adiw	r28, 0x08	; 8
    3400:	6c ad       	ldd	r22, Y+60	; 0x3c
    3402:	7d ad       	ldd	r23, Y+61	; 0x3d
    3404:	8e ad       	ldd	r24, Y+62	; 0x3e
    3406:	9f ad       	ldd	r25, Y+63	; 0x3f
    3408:	28 97       	sbiw	r28, 0x08	; 8
    340a:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    340e:	28 96       	adiw	r28, 0x08	; 8
    3410:	6c af       	std	Y+60, r22	; 0x3c
    3412:	7d af       	std	Y+61, r23	; 0x3d
    3414:	8e af       	std	Y+62, r24	; 0x3e
    3416:	9f af       	std	Y+63, r25	; 0x3f
    3418:	28 97       	sbiw	r28, 0x08	; 8
      else
        y += (one * sl[m] - two * cl[m]) * q[k] * slat;
        
      l += 2;
    341a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    341c:	2e 5f       	subi	r18, 0xFE	; 254
    341e:	2d 8f       	std	Y+29, r18	; 0x1d
  q[4] = sqrt(3) * (slat * slat - clat * clat);
  
  ratio = RE / r;
  
  max = (order * (order + 3)) / 2;
  for(k = 1; k <= max; k++)
    3420:	39 85       	ldd	r19, Y+9	; 0x09
    3422:	3f 5f       	subi	r19, 0xFF	; 255
    3424:	39 87       	std	Y+9, r19	; 0x09
    3426:	24 96       	adiw	r28, 0x04	; 4
    3428:	4f ad       	ldd	r20, Y+63	; 0x3f
    342a:	24 97       	sbiw	r28, 0x04	; 4
    342c:	43 17       	cp	r20, r19
    342e:	08 f0       	brcs	.+2      	; 0x3432 <igrf+0xa08>
    3430:	d4 ce       	rjmp	.-600    	; 0x31da <igrf+0x7b0>
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
  z = z * cd - one * sd;
    3432:	60 96       	adiw	r28, 0x10	; 16
    3434:	2c ad       	ldd	r18, Y+60	; 0x3c
    3436:	3d ad       	ldd	r19, Y+61	; 0x3d
    3438:	4e ad       	ldd	r20, Y+62	; 0x3e
    343a:	5f ad       	ldd	r21, Y+63	; 0x3f
    343c:	60 97       	sbiw	r28, 0x10	; 16
    343e:	6e a9       	ldd	r22, Y+54	; 0x36
    3440:	7f a9       	ldd	r23, Y+55	; 0x37
    3442:	88 ad       	ldd	r24, Y+56	; 0x38
    3444:	99 ad       	ldd	r25, Y+57	; 0x39
    3446:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    344a:	6b 01       	movw	r12, r22
    344c:	7c 01       	movw	r14, r24
    }
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
    344e:	60 96       	adiw	r28, 0x10	; 16
    3450:	2c ad       	ldd	r18, Y+60	; 0x3c
    3452:	3d ad       	ldd	r19, Y+61	; 0x3d
    3454:	4e ad       	ldd	r20, Y+62	; 0x3e
    3456:	5f ad       	ldd	r21, Y+63	; 0x3f
    3458:	60 97       	sbiw	r28, 0x10	; 16
    345a:	6a a9       	ldd	r22, Y+50	; 0x32
    345c:	7b a9       	ldd	r23, Y+51	; 0x33
    345e:	8c a9       	ldd	r24, Y+52	; 0x34
    3460:	9d a9       	ldd	r25, Y+53	; 0x35
    3462:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3466:	4b 01       	movw	r8, r22
    3468:	5c 01       	movw	r10, r24
    346a:	64 96       	adiw	r28, 0x14	; 20
    346c:	2c ad       	ldd	r18, Y+60	; 0x3c
    346e:	3d ad       	ldd	r19, Y+61	; 0x3d
    3470:	4e ad       	ldd	r20, Y+62	; 0x3e
    3472:	5f ad       	ldd	r21, Y+63	; 0x3f
    3474:	64 97       	sbiw	r28, 0x14	; 20
    3476:	6e a9       	ldd	r22, Y+54	; 0x36
    3478:	7f a9       	ldd	r23, Y+55	; 0x37
    347a:	88 ad       	ldd	r24, Y+56	; 0x38
    347c:	99 ad       	ldd	r25, Y+57	; 0x39
    347e:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3482:	9b 01       	movw	r18, r22
    3484:	ac 01       	movw	r20, r24
    3486:	c5 01       	movw	r24, r10
    3488:	b4 01       	movw	r22, r8
    348a:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
  z = z * cd - one * sd;
  
  v_B_ned[0] = x;
    348e:	66 96       	adiw	r28, 0x16	; 22
    3490:	ae ad       	ldd	r26, Y+62	; 0x3e
    3492:	bf ad       	ldd	r27, Y+63	; 0x3f
    3494:	66 97       	sbiw	r28, 0x16	; 22
    3496:	6d 93       	st	X+, r22
    3498:	7d 93       	st	X+, r23
    349a:	8d 93       	st	X+, r24
    349c:	9c 93       	st	X, r25
    349e:	13 97       	sbiw	r26, 0x03	; 3
  v_B_ned[1] = y;
    34a0:	28 96       	adiw	r28, 0x08	; 8
    34a2:	2c ad       	ldd	r18, Y+60	; 0x3c
    34a4:	3d ad       	ldd	r19, Y+61	; 0x3d
    34a6:	4e ad       	ldd	r20, Y+62	; 0x3e
    34a8:	5f ad       	ldd	r21, Y+63	; 0x3f
    34aa:	28 97       	sbiw	r28, 0x08	; 8
    34ac:	14 96       	adiw	r26, 0x04	; 4
    34ae:	2d 93       	st	X+, r18
    34b0:	3d 93       	st	X+, r19
    34b2:	4d 93       	st	X+, r20
    34b4:	5c 93       	st	X, r21
    34b6:	17 97       	sbiw	r26, 0x07	; 7
    m++;
  }
  
  one = x;
  x = x * cd + z * sd;
  z = z * cd - one * sd;
    34b8:	64 96       	adiw	r28, 0x14	; 20
    34ba:	2c ad       	ldd	r18, Y+60	; 0x3c
    34bc:	3d ad       	ldd	r19, Y+61	; 0x3d
    34be:	4e ad       	ldd	r20, Y+62	; 0x3e
    34c0:	5f ad       	ldd	r21, Y+63	; 0x3f
    34c2:	64 97       	sbiw	r28, 0x14	; 20
    34c4:	6a a9       	ldd	r22, Y+50	; 0x32
    34c6:	7b a9       	ldd	r23, Y+51	; 0x33
    34c8:	8c a9       	ldd	r24, Y+52	; 0x34
    34ca:	9d a9       	ldd	r25, Y+53	; 0x35
    34cc:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    34d0:	9b 01       	movw	r18, r22
    34d2:	ac 01       	movw	r20, r24
    34d4:	c7 01       	movw	r24, r14
    34d6:	b6 01       	movw	r22, r12
    34d8:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
  
  v_B_ned[0] = x;
  v_B_ned[1] = y;
  v_B_ned[2] = z;
    34dc:	66 96       	adiw	r28, 0x16	; 22
    34de:	ee ad       	ldd	r30, Y+62	; 0x3e
    34e0:	ff ad       	ldd	r31, Y+63	; 0x3f
    34e2:	66 97       	sbiw	r28, 0x16	; 22
    34e4:	60 87       	std	Z+8, r22	; 0x08
    34e6:	71 87       	std	Z+9, r23	; 0x09
    34e8:	82 87       	std	Z+10, r24	; 0x0a
    34ea:	93 87       	std	Z+11, r25	; 0x0b
     
}
    34ec:	c9 5a       	subi	r28, 0xA9	; 169
    34ee:	df 4f       	sbci	r29, 0xFF	; 255
    34f0:	0f b6       	in	r0, 0x3f	; 63
    34f2:	f8 94       	cli
    34f4:	de bf       	out	0x3e, r29	; 62
    34f6:	0f be       	out	0x3f, r0	; 63
    34f8:	cd bf       	out	0x3d, r28	; 61
    34fa:	df 91       	pop	r29
    34fc:	cf 91       	pop	r28
    34fe:	1f 91       	pop	r17
    3500:	0f 91       	pop	r16
    3502:	ff 90       	pop	r15
    3504:	ef 90       	pop	r14
    3506:	df 90       	pop	r13
    3508:	cf 90       	pop	r12
    350a:	bf 90       	pop	r11
    350c:	af 90       	pop	r10
    350e:	9f 90       	pop	r9
    3510:	8f 90       	pop	r8
    3512:	7f 90       	pop	r7
    3514:	6f 90       	pop	r6
    3516:	5f 90       	pop	r5
    3518:	4f 90       	pop	r4
    351a:	3f 90       	pop	r3
    351c:	2f 90       	pop	r2
    351e:	08 95       	ret
    fm = m;
    if(k >= 5)
    {
      if(m == n)
      {
        one = sqrt(1 - (0.5 / fm));
    3520:	83 2f       	mov	r24, r19
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	9e 8b       	std	Y+22, r25	; 0x16
    3526:	8d 8b       	std	Y+21, r24	; 0x15
    3528:	bc 01       	movw	r22, r24
    352a:	88 27       	eor	r24, r24
    352c:	77 fd       	sbrc	r23, 7
    352e:	80 95       	com	r24
    3530:	98 2f       	mov	r25, r24
    3532:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
    3536:	6b 01       	movw	r12, r22
    3538:	7c 01       	movw	r14, r24
    353a:	9b 01       	movw	r18, r22
    353c:	ac 01       	movw	r20, r24
    353e:	60 e0       	ldi	r22, 0x00	; 0
    3540:	70 e0       	ldi	r23, 0x00	; 0
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	9f e3       	ldi	r25, 0x3F	; 63
    3546:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    354a:	9b 01       	movw	r18, r22
    354c:	ac 01       	movw	r20, r24
    354e:	60 e0       	ldi	r22, 0x00	; 0
    3550:	70 e0       	ldi	r23, 0x00	; 0
    3552:	80 e8       	ldi	r24, 0x80	; 128
    3554:	9f e3       	ldi	r25, 0x3F	; 63
    3556:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    355a:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <sqrt>
    355e:	4b 01       	movw	r8, r22
    3560:	5c 01       	movw	r10, r24
        p[k] = (1 + (1.0/fm)) * one * clat * p[k - n - 1];
    3562:	a9 85       	ldd	r26, Y+9	; 0x09
    3564:	0a 2f       	mov	r16, r26
    3566:	10 e0       	ldi	r17, 0x00	; 0
    3568:	38 01       	movw	r6, r16
    356a:	ed 89       	ldd	r30, Y+21	; 0x15
    356c:	fe 89       	ldd	r31, Y+22	; 0x16
    356e:	6e 1a       	sub	r6, r30
    3570:	7f 0a       	sbc	r7, r31
    3572:	f1 e0       	ldi	r31, 0x01	; 1
    3574:	6f 1a       	sub	r6, r31
    3576:	71 08       	sbc	r7, r1
    3578:	a7 01       	movw	r20, r14
    357a:	96 01       	movw	r18, r12
    357c:	60 e0       	ldi	r22, 0x00	; 0
    357e:	70 e0       	ldi	r23, 0x00	; 0
    3580:	80 e8       	ldi	r24, 0x80	; 128
    3582:	9f e3       	ldi	r25, 0x3F	; 63
    3584:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	40 e8       	ldi	r20, 0x80	; 128
    358e:	5f e3       	ldi	r21, 0x3F	; 63
    3590:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    3594:	a5 01       	movw	r20, r10
    3596:	94 01       	movw	r18, r8
    3598:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    359c:	2e a1       	ldd	r18, Y+38	; 0x26
    359e:	3f a1       	ldd	r19, Y+39	; 0x27
    35a0:	48 a5       	ldd	r20, Y+40	; 0x28
    35a2:	59 a5       	ldd	r21, Y+41	; 0x29
    35a4:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    35a8:	66 0c       	add	r6, r6
    35aa:	77 1c       	adc	r7, r7
    35ac:	66 0c       	add	r6, r6
    35ae:	77 1c       	adc	r7, r7
    35b0:	93 01       	movw	r18, r6
    35b2:	2b 56       	subi	r18, 0x6B	; 107
    35b4:	3c 4f       	sbci	r19, 0xFC	; 252
    35b6:	3a 83       	std	Y+2, r19	; 0x02
    35b8:	29 83       	std	Y+1, r18	; 0x01
    35ba:	d9 01       	movw	r26, r18
    35bc:	2d 91       	ld	r18, X+
    35be:	3d 91       	ld	r19, X+
    35c0:	4d 91       	ld	r20, X+
    35c2:	5c 91       	ld	r21, X
    35c4:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    35c8:	36 2e       	mov	r3, r22
    35ca:	27 2e       	mov	r2, r23
    35cc:	89 8b       	std	Y+17, r24	; 0x11
    35ce:	9a a3       	std	Y+34, r25	; 0x22
    35d0:	00 0f       	add	r16, r16
    35d2:	11 1f       	adc	r17, r17
    35d4:	00 0f       	add	r16, r16
    35d6:	11 1f       	adc	r17, r17
    35d8:	98 01       	movw	r18, r16
    35da:	2b 56       	subi	r18, 0x6B	; 107
    35dc:	3c 4f       	sbci	r19, 0xFC	; 252
    35de:	83 2d       	mov	r24, r3
    35e0:	92 2d       	mov	r25, r2
    35e2:	a9 89       	ldd	r26, Y+17	; 0x11
    35e4:	ba a1       	ldd	r27, Y+34	; 0x22
    35e6:	f9 01       	movw	r30, r18
    35e8:	80 83       	st	Z, r24
    35ea:	91 83       	std	Z+1, r25	; 0x01
    35ec:	a2 83       	std	Z+2, r26	; 0x02
    35ee:	b3 83       	std	Z+3, r27	; 0x03
        q[k] = one * (clat * q[k - n - 1] + (slat * p[k - n - 1] ) / fm);
    35f0:	f3 01       	movw	r30, r6
    35f2:	e3 53       	subi	r30, 0x33	; 51
    35f4:	fd 4f       	sbci	r31, 0xFD	; 253
    35f6:	20 81       	ld	r18, Z
    35f8:	31 81       	ldd	r19, Z+1	; 0x01
    35fa:	42 81       	ldd	r20, Z+2	; 0x02
    35fc:	53 81       	ldd	r21, Z+3	; 0x03
    35fe:	6e a1       	ldd	r22, Y+38	; 0x26
    3600:	7f a1       	ldd	r23, Y+39	; 0x27
    3602:	88 a5       	ldd	r24, Y+40	; 0x28
    3604:	99 a5       	ldd	r25, Y+41	; 0x29
    3606:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    360a:	2b 01       	movw	r4, r22
    360c:	3c 01       	movw	r6, r24
    360e:	a9 81       	ldd	r26, Y+1	; 0x01
    3610:	ba 81       	ldd	r27, Y+2	; 0x02
    3612:	2d 91       	ld	r18, X+
    3614:	3d 91       	ld	r19, X+
    3616:	4d 91       	ld	r20, X+
    3618:	5c 91       	ld	r21, X
    361a:	6a a5       	ldd	r22, Y+42	; 0x2a
    361c:	7b a5       	ldd	r23, Y+43	; 0x2b
    361e:	8c a5       	ldd	r24, Y+44	; 0x2c
    3620:	9d a5       	ldd	r25, Y+45	; 0x2d
    3622:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3626:	a7 01       	movw	r20, r14
    3628:	96 01       	movw	r18, r12
    362a:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    362e:	9b 01       	movw	r18, r22
    3630:	ac 01       	movw	r20, r24
    3632:	c3 01       	movw	r24, r6
    3634:	b2 01       	movw	r22, r4
    3636:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    363a:	a5 01       	movw	r20, r10
    363c:	94 01       	movw	r18, r8
    363e:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3642:	2b 01       	movw	r4, r22
    3644:	3c 01       	movw	r6, r24
    3646:	f8 01       	movw	r30, r16
    3648:	e3 53       	subi	r30, 0x33	; 51
    364a:	fd 4f       	sbci	r31, 0xFD	; 253
    364c:	60 83       	st	Z, r22
    364e:	71 83       	std	Z+1, r23	; 0x01
    3650:	82 83       	std	Z+2, r24	; 0x02
    3652:	93 83       	std	Z+3, r25	; 0x03
        sl[m] = sl[m - 1] * cl[1] + cl[m - 1] * sl[1];
    3654:	0d 89       	ldd	r16, Y+21	; 0x15
    3656:	1e 89       	ldd	r17, Y+22	; 0x16
    3658:	01 50       	subi	r16, 0x01	; 1
    365a:	11 09       	sbc	r17, r1
    365c:	c0 90 95 02 	lds	r12, 0x0295
    3660:	d0 90 96 02 	lds	r13, 0x0296
    3664:	e0 90 97 02 	lds	r14, 0x0297
    3668:	f0 90 98 02 	lds	r15, 0x0298
    366c:	00 0f       	add	r16, r16
    366e:	11 1f       	adc	r17, r17
    3670:	00 0f       	add	r16, r16
    3672:	11 1f       	adc	r17, r17
    3674:	f8 01       	movw	r30, r16
    3676:	ef 56       	subi	r30, 0x6F	; 111
    3678:	fd 4f       	sbci	r31, 0xFD	; 253
    367a:	80 80       	ld	r8, Z
    367c:	91 80       	ldd	r9, Z+1	; 0x01
    367e:	a2 80       	ldd	r10, Z+2	; 0x02
    3680:	b3 80       	ldd	r11, Z+3	; 0x03
    3682:	ed 89       	ldd	r30, Y+21	; 0x15
    3684:	fe 89       	ldd	r31, Y+22	; 0x16
    3686:	ee 0f       	add	r30, r30
    3688:	ff 1f       	adc	r31, r31
    368a:	ee 0f       	add	r30, r30
    368c:	ff 1f       	adc	r31, r31
    368e:	fe 8b       	std	Y+22, r31	; 0x16
    3690:	ed 8b       	std	Y+21, r30	; 0x15
    3692:	eb 5a       	subi	r30, 0xAB	; 171
    3694:	fd 4f       	sbci	r31, 0xFD	; 253
    3696:	fa 83       	std	Y+2, r31	; 0x02
    3698:	e9 83       	std	Y+1, r30	; 0x01
    369a:	0b 5a       	subi	r16, 0xAB	; 171
    369c:	1d 4f       	sbci	r17, 0xFD	; 253
    369e:	d8 01       	movw	r26, r16
    36a0:	2d 91       	ld	r18, X+
    36a2:	3d 91       	ld	r19, X+
    36a4:	4d 91       	ld	r20, X+
    36a6:	5c 91       	ld	r21, X
    36a8:	c7 01       	movw	r24, r14
    36aa:	b6 01       	movw	r22, r12
    36ac:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    36b0:	6e a7       	std	Y+46, r22	; 0x2e
    36b2:	7f a7       	std	Y+47, r23	; 0x2f
    36b4:	88 ab       	std	Y+48, r24	; 0x30
    36b6:	99 ab       	std	Y+49, r25	; 0x31
    36b8:	20 91 59 02 	lds	r18, 0x0259
    36bc:	30 91 5a 02 	lds	r19, 0x025A
    36c0:	40 91 5b 02 	lds	r20, 0x025B
    36c4:	50 91 5c 02 	lds	r21, 0x025C
    36c8:	c5 01       	movw	r24, r10
    36ca:	b4 01       	movw	r22, r8
    36cc:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    36d0:	9b 01       	movw	r18, r22
    36d2:	ac 01       	movw	r20, r24
    36d4:	6e a5       	ldd	r22, Y+46	; 0x2e
    36d6:	7f a5       	ldd	r23, Y+47	; 0x2f
    36d8:	88 a9       	ldd	r24, Y+48	; 0x30
    36da:	99 a9       	ldd	r25, Y+49	; 0x31
    36dc:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    36e0:	e9 81       	ldd	r30, Y+1	; 0x01
    36e2:	fa 81       	ldd	r31, Y+2	; 0x02
    36e4:	60 83       	st	Z, r22
    36e6:	71 83       	std	Z+1, r23	; 0x01
    36e8:	82 83       	std	Z+2, r24	; 0x02
    36ea:	93 83       	std	Z+3, r25	; 0x03
        cl[m] = cl[m - 1] * cl[1] - sl[m - 1] * sl[1];
    36ec:	2d 89       	ldd	r18, Y+21	; 0x15
    36ee:	3e 89       	ldd	r19, Y+22	; 0x16
    36f0:	2f 56       	subi	r18, 0x6F	; 111
    36f2:	3d 4f       	sbci	r19, 0xFD	; 253
    36f4:	3a 83       	std	Y+2, r19	; 0x02
    36f6:	29 83       	std	Y+1, r18	; 0x01
    36f8:	a5 01       	movw	r20, r10
    36fa:	94 01       	movw	r18, r8
    36fc:	c7 01       	movw	r24, r14
    36fe:	b6 01       	movw	r22, r12
    3700:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3704:	6b 01       	movw	r12, r22
    3706:	7c 01       	movw	r14, r24
    3708:	20 91 59 02 	lds	r18, 0x0259
    370c:	30 91 5a 02 	lds	r19, 0x025A
    3710:	40 91 5b 02 	lds	r20, 0x025B
    3714:	50 91 5c 02 	lds	r21, 0x025C
    3718:	d8 01       	movw	r26, r16
    371a:	6d 91       	ld	r22, X+
    371c:	7d 91       	ld	r23, X+
    371e:	8d 91       	ld	r24, X+
    3720:	9c 91       	ld	r25, X
    3722:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3726:	9b 01       	movw	r18, r22
    3728:	ac 01       	movw	r20, r24
    372a:	c7 01       	movw	r24, r14
    372c:	b6 01       	movw	r22, r12
    372e:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    3732:	e9 81       	ldd	r30, Y+1	; 0x01
    3734:	fa 81       	ldd	r31, Y+2	; 0x02
    3736:	60 83       	st	Z, r22
    3738:	71 83       	std	Z+1, r23	; 0x01
    373a:	82 83       	std	Z+2, r24	; 0x02
    373c:	93 83       	std	Z+3, r25	; 0x03
    373e:	13 2d       	mov	r17, r3
    3740:	39 88       	ldd	r3, Y+17	; 0x11
    3742:	0a a1       	ldd	r16, Y+34	; 0x22
    3744:	e8 cc       	rjmp	.-1584   	; 0x3116 <igrf+0x6ec>
      z -= three * p[k];
      
      if(clat > 0)
        y += ((one * sl[m] - two * cl[m]) * fm * p[k]) / ((fn + 1.0) * clat);
      else
        y += (one * sl[m] - two * cl[m]) * q[k] * slat;
    3746:	c7 01       	movw	r24, r14
    3748:	b6 01       	movw	r22, r12
    374a:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    374e:	6b 01       	movw	r12, r22
    3750:	7c 01       	movw	r14, r24
    3752:	2d 81       	ldd	r18, Y+5	; 0x05
    3754:	3e 81       	ldd	r19, Y+6	; 0x06
    3756:	4f 81       	ldd	r20, Y+7	; 0x07
    3758:	58 85       	ldd	r21, Y+8	; 0x08
    375a:	69 89       	ldd	r22, Y+17	; 0x11
    375c:	7a 89       	ldd	r23, Y+18	; 0x12
    375e:	8b 89       	ldd	r24, Y+19	; 0x13
    3760:	9c 89       	ldd	r25, Y+20	; 0x14
    3762:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3766:	9b 01       	movw	r18, r22
    3768:	ac 01       	movw	r20, r24
    376a:	c7 01       	movw	r24, r14
    376c:	b6 01       	movw	r22, r12
    376e:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    3772:	a3 01       	movw	r20, r6
    3774:	92 01       	movw	r18, r4
    3776:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    377a:	2a a5       	ldd	r18, Y+42	; 0x2a
    377c:	3b a5       	ldd	r19, Y+43	; 0x2b
    377e:	4c a5       	ldd	r20, Y+44	; 0x2c
    3780:	5d a5       	ldd	r21, Y+45	; 0x2d
    3782:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3786:	9b 01       	movw	r18, r22
    3788:	ac 01       	movw	r20, r24
    378a:	28 96       	adiw	r28, 0x08	; 8
    378c:	6c ad       	ldd	r22, Y+60	; 0x3c
    378e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3790:	8e ad       	ldd	r24, Y+62	; 0x3e
    3792:	9f ad       	ldd	r25, Y+63	; 0x3f
    3794:	28 97       	sbiw	r28, 0x08	; 8
    3796:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    379a:	28 96       	adiw	r28, 0x08	; 8
    379c:	6c af       	std	Y+60, r22	; 0x3c
    379e:	7d af       	std	Y+61, r23	; 0x3d
    37a0:	8e af       	std	Y+62, r24	; 0x3e
    37a2:	9f af       	std	Y+63, r25	; 0x3f
    37a4:	28 97       	sbiw	r28, 0x08	; 8
    37a6:	39 ce       	rjmp	.-910    	; 0x341a <igrf+0x9f0>
 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00 };
*/
void igrf(vector v_lla, float years, uint8_t order, vector v_B_ned)
{
  float lat = v_lla[0], lon = v_lla[1], alt = v_lla[2] / 1000;
  float x = 0.0, y = 0.0, z = 0.0, one, two, three, four;
    37a8:	1e aa       	std	Y+54, r1	; 0x36
    37aa:	1f aa       	std	Y+55, r1	; 0x37
    37ac:	18 ae       	std	Y+56, r1	; 0x38
    37ae:	19 ae       	std	Y+57, r1	; 0x39
    37b0:	28 96       	adiw	r28, 0x08	; 8
    37b2:	1c ae       	std	Y+60, r1	; 0x3c
    37b4:	1d ae       	std	Y+61, r1	; 0x3d
    37b6:	1e ae       	std	Y+62, r1	; 0x3e
    37b8:	1f ae       	std	Y+63, r1	; 0x3f
    37ba:	28 97       	sbiw	r28, 0x08	; 8
    37bc:	1a aa       	std	Y+50, r1	; 0x32
    37be:	1b aa       	std	Y+51, r1	; 0x33
    37c0:	1c aa       	std	Y+52, r1	; 0x34
    37c2:	1d aa       	std	Y+53, r1	; 0x35
    37c4:	36 ce       	rjmp	.-916    	; 0x3432 <igrf+0xa08>
    37c6:	82 2f       	mov	r24, r18
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	88 0f       	add	r24, r24
    37cc:	99 1f       	adc	r25, r25
    37ce:	88 0f       	add	r24, r24
    37d0:	99 1f       	adc	r25, r25
    37d2:	fc 01       	movw	r30, r24
    37d4:	e3 53       	subi	r30, 0x33	; 51
    37d6:	fd 4f       	sbci	r31, 0xFD	; 253
    37d8:	40 80       	ld	r4, Z
    37da:	51 80       	ldd	r5, Z+1	; 0x01
    37dc:	62 80       	ldd	r6, Z+2	; 0x02
    37de:	73 80       	ldd	r7, Z+3	; 0x03
    37e0:	fc 01       	movw	r30, r24
    37e2:	eb 56       	subi	r30, 0x6B	; 107
    37e4:	fc 4f       	sbci	r31, 0xFC	; 252
    37e6:	10 81       	ld	r17, Z
    37e8:	21 80       	ldd	r2, Z+1	; 0x01
    37ea:	32 80       	ldd	r3, Z+2	; 0x02
    37ec:	03 81       	ldd	r16, Z+3	; 0x03
    37ee:	93 cc       	rjmp	.-1754   	; 0x3116 <igrf+0x6ec>

000037f0 <init_UART_MM>:
#include "peripherals.h"
#include "uart.h"


void init_UART_MM(void )
{
    37f0:	cf 93       	push	r28
    37f2:	df 93       	push	r29

  UCSR1A = 0;
    37f4:	cb e9       	ldi	r28, 0x9B	; 155
    37f6:	d0 e0       	ldi	r29, 0x00	; 0
    37f8:	18 82       	st	Y, r1
  UCSR1B = 0;
    37fa:	aa e9       	ldi	r26, 0x9A	; 154
    37fc:	b0 e0       	ldi	r27, 0x00	; 0
    37fe:	1c 92       	st	X, r1
  UCSR1C = 0;
    3800:	ed e9       	ldi	r30, 0x9D	; 157
    3802:	f0 e0       	ldi	r31, 0x00	; 0
    3804:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR1A |= _BV(U2X1);
    3806:	88 81       	ld	r24, Y
    3808:	82 60       	ori	r24, 0x02	; 2
    380a:	88 83       	st	Y, r24
  ///Enable Transmission and Reception
  UCSR1B |= _BV(TXEN1) | _BV(RXEN1) |  _BV(RXCIE1);
    380c:	8c 91       	ld	r24, X
    380e:	88 69       	ori	r24, 0x98	; 152
    3810:	8c 93       	st	X, r24
  ///8-bit Data Byte
  UCSR1C |= _BV(UCSZ11) | _BV(UCSZ10);
    3812:	80 81       	ld	r24, Z
    3814:	86 60       	ori	r24, 0x06	; 6
    3816:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR1L = 103;
    3818:	87 e6       	ldi	r24, 0x67	; 103
    381a:	80 93 99 00 	sts	0x0099, r24
  UBRR1H = 0;
    381e:	10 92 98 00 	sts	0x0098, r1
}
    3822:	df 91       	pop	r29
    3824:	cf 91       	pop	r28
    3826:	08 95       	ret

00003828 <poll_MM1>:

static volatile uint8_t t;
void poll_MM1(void)
{
    3828:	ef 92       	push	r14
    382a:	ff 92       	push	r15
    382c:	0f 93       	push	r16
    382e:	1f 93       	push	r17
    3830:	cf 93       	push	r28
    3832:	df 93       	push	r29
	 uint16_t Bx;
	 uint16_t By;
	 uint16_t Bz;
	 uint8_t c= 80;
	 
	 transmit_UART0(c);
    3834:	80 e5       	ldi	r24, 0x50	; 80
    3836:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <transmit_UART0>
	 Bx=(uint16_t)receive_UART0();
    383a:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <receive_UART0>
    383e:	08 2f       	mov	r16, r24
    3840:	10 e0       	ldi	r17, 0x00	; 0
	 Bx=(Bx<<8);
    3842:	10 2f       	mov	r17, r16
    3844:	00 27       	eor	r16, r16
	 Bx &= 0xFF00;
	 Bx|=(uint16_t)receive_UART0();
    3846:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <receive_UART0>
    384a:	08 2b       	or	r16, r24
	 Current_state.mm.B_x = ((float) Bx) / 15000;
    384c:	b8 01       	movw	r22, r16
    384e:	80 e0       	ldi	r24, 0x00	; 0
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	0e 94 0d 2c 	call	0x581a	; 0x581a <__floatunsisf>
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	30 e6       	ldi	r19, 0x60	; 96
    385a:	4a e6       	ldi	r20, 0x6A	; 106
    385c:	56 e4       	ldi	r21, 0x46	; 70
    385e:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    3862:	60 93 26 05 	sts	0x0526, r22
    3866:	70 93 27 05 	sts	0x0527, r23
    386a:	80 93 28 05 	sts	0x0528, r24
    386e:	90 93 29 05 	sts	0x0529, r25
	 // sprintf(sx,"x is %f",Current_state.mm.B_x);
	 
	 //transmit_UART0('x');
	 By=(uint16_t)receive_UART0();
    3872:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <receive_UART0>
    3876:	c8 2f       	mov	r28, r24
    3878:	d0 e0       	ldi	r29, 0x00	; 0
	 By=(By<<8);
    387a:	dc 2f       	mov	r29, r28
    387c:	cc 27       	eor	r28, r28
	 By &= 0xFF00;
	 By|=(uint16_t)receive_UART0();
    387e:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <receive_UART0>
    3882:	c8 2b       	or	r28, r24
	 Current_state.mm.B_y = ((float) By) / 15000;
    3884:	be 01       	movw	r22, r28
    3886:	80 e0       	ldi	r24, 0x00	; 0
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	0e 94 0d 2c 	call	0x581a	; 0x581a <__floatunsisf>
    388e:	20 e0       	ldi	r18, 0x00	; 0
    3890:	30 e6       	ldi	r19, 0x60	; 96
    3892:	4a e6       	ldi	r20, 0x6A	; 106
    3894:	56 e4       	ldi	r21, 0x46	; 70
    3896:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    389a:	60 93 2a 05 	sts	0x052A, r22
    389e:	70 93 2b 05 	sts	0x052B, r23
    38a2:	80 93 2c 05 	sts	0x052C, r24
    38a6:	90 93 2d 05 	sts	0x052D, r25
	 //sprintf(sx,"x is %f",Current_state.mm.B_y);
	 
	 //transmit_UART0('y');
	 Bz=(uint16_t)receive_UART0();
    38aa:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <receive_UART0>
    38ae:	e8 2e       	mov	r14, r24
    38b0:	f1 2c       	mov	r15, r1
	 Bz=(Bz<<8);
    38b2:	fe 2c       	mov	r15, r14
    38b4:	ee 24       	eor	r14, r14
	 Bz &= 0xFF00;
	 Bz|=(uint16_t)receive_UART0();
    38b6:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <receive_UART0>
    38ba:	e8 2a       	or	r14, r24
	 Current_state.mm.B_z = ((float) Bz) / 15000;
    38bc:	b7 01       	movw	r22, r14
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	0e 94 0d 2c 	call	0x581a	; 0x581a <__floatunsisf>
    38c6:	20 e0       	ldi	r18, 0x00	; 0
    38c8:	30 e6       	ldi	r19, 0x60	; 96
    38ca:	4a e6       	ldi	r20, 0x6A	; 106
    38cc:	56 e4       	ldi	r21, 0x46	; 70
    38ce:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    38d2:	60 93 2e 05 	sts	0x052E, r22
    38d6:	70 93 2f 05 	sts	0x052F, r23
    38da:	80 93 30 05 	sts	0x0530, r24
    38de:	90 93 31 05 	sts	0x0531, r25
	 //sprintf(sx,"x is %f",Current_state.mm.B_z);
	 
	 //transmit_UART0('cr');
	 //receive_MM();
	 
	 if(Bx > 30000)
    38e2:	01 33       	cpi	r16, 0x31	; 49
    38e4:	85 e7       	ldi	r24, 0x75	; 117
    38e6:	18 07       	cpc	r17, r24
    38e8:	a8 f0       	brcs	.+42     	; 0x3914 <poll_MM1+0xec>
	 {   Bx1 = Bx - 65536;
		 Current_state.mm.B_x = ((float) Bx1) / 15000;
    38ea:	b8 01       	movw	r22, r16
    38ec:	88 27       	eor	r24, r24
    38ee:	77 fd       	sbrc	r23, 7
    38f0:	80 95       	com	r24
    38f2:	98 2f       	mov	r25, r24
    38f4:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
    38f8:	20 e0       	ldi	r18, 0x00	; 0
    38fa:	30 e6       	ldi	r19, 0x60	; 96
    38fc:	4a e6       	ldi	r20, 0x6A	; 106
    38fe:	56 e4       	ldi	r21, 0x46	; 70
    3900:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    3904:	60 93 26 05 	sts	0x0526, r22
    3908:	70 93 27 05 	sts	0x0527, r23
    390c:	80 93 28 05 	sts	0x0528, r24
    3910:	90 93 29 05 	sts	0x0529, r25
		 //sprintf(sx,"x is %f",Current_state.mm.B_x);
	 }
	 
	 if(By > 30000)
    3914:	c1 33       	cpi	r28, 0x31	; 49
    3916:	85 e7       	ldi	r24, 0x75	; 117
    3918:	d8 07       	cpc	r29, r24
    391a:	a8 f0       	brcs	.+42     	; 0x3946 <poll_MM1+0x11e>
	 {   By1 = By - 65536;
		 Current_state.mm.B_y = ((float) By1) / 15000;
    391c:	be 01       	movw	r22, r28
    391e:	88 27       	eor	r24, r24
    3920:	77 fd       	sbrc	r23, 7
    3922:	80 95       	com	r24
    3924:	98 2f       	mov	r25, r24
    3926:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
    392a:	20 e0       	ldi	r18, 0x00	; 0
    392c:	30 e6       	ldi	r19, 0x60	; 96
    392e:	4a e6       	ldi	r20, 0x6A	; 106
    3930:	56 e4       	ldi	r21, 0x46	; 70
    3932:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    3936:	60 93 2a 05 	sts	0x052A, r22
    393a:	70 93 2b 05 	sts	0x052B, r23
    393e:	80 93 2c 05 	sts	0x052C, r24
    3942:	90 93 2d 05 	sts	0x052D, r25
		 // sprintf(sy,"y is %f",By1);
	 }
	 
	 if(Bz > 30000)
    3946:	81 e3       	ldi	r24, 0x31	; 49
    3948:	e8 16       	cp	r14, r24
    394a:	85 e7       	ldi	r24, 0x75	; 117
    394c:	f8 06       	cpc	r15, r24
    394e:	a8 f0       	brcs	.+42     	; 0x397a <poll_MM1+0x152>
	 {Bz1 = Bz - 65536;Current_state.mm.B_z = ((float) Bz1) / 15000;
    3950:	b7 01       	movw	r22, r14
    3952:	88 27       	eor	r24, r24
    3954:	77 fd       	sbrc	r23, 7
    3956:	80 95       	com	r24
    3958:	98 2f       	mov	r25, r24
    395a:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	30 e6       	ldi	r19, 0x60	; 96
    3962:	4a e6       	ldi	r20, 0x6A	; 106
    3964:	56 e4       	ldi	r21, 0x46	; 70
    3966:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    396a:	60 93 2e 05 	sts	0x052E, r22
    396e:	70 93 2f 05 	sts	0x052F, r23
    3972:	80 93 30 05 	sts	0x0530, r24
    3976:	90 93 31 05 	sts	0x0531, r25
      transmit_string_UART0(sy);
      transmit_UART0(' ');
      transmit_string_UART0(sz);
      transmit_UART0('\r');
	  */
}
    397a:	df 91       	pop	r29
    397c:	cf 91       	pop	r28
    397e:	1f 91       	pop	r17
    3980:	0f 91       	pop	r16
    3982:	ff 90       	pop	r15
    3984:	ef 90       	pop	r14
    3986:	08 95       	ret

00003988 <main>:
 */

int main(void){
    
  /// Initialise Interfaces - UART of Magnetometer and GPS and the SPI bus
  init_UART_MM();
    3988:	33 df       	rcall	.-410    	; 0x37f0 <init_UART_MM>
  init_UART_GPS();
    398a:	0e 94 c6 10 	call	0x218c	; 0x218c <init_UART_GPS>
  init_SPI();
    398e:	0e 94 0e 2a 	call	0x541c	; 0x541c <init_SPI>
  init_UART0();
    3992:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <init_UART0>
  ///Configure the magnetometer
  //configure_MM();
  DDRA=0xf0;
    3996:	80 ef       	ldi	r24, 0xF0	; 240
    3998:	8a bb       	out	0x1a, r24	; 26
  PORTA = 0xE0;
    399a:	80 ee       	ldi	r24, 0xE0	; 224
    399c:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    399e:	2f ef       	ldi	r18, 0xFF	; 255
    39a0:	82 e5       	ldi	r24, 0x52	; 82
    39a2:	97 e0       	ldi	r25, 0x07	; 7
    39a4:	21 50       	subi	r18, 0x01	; 1
    39a6:	80 40       	sbci	r24, 0x00	; 0
    39a8:	90 40       	sbci	r25, 0x00	; 0
    39aa:	e1 f7       	brne	.-8      	; 0x39a4 <main+0x1c>
    39ac:	00 c0       	rjmp	.+0      	; 0x39ae <main+0x26>
    39ae:	00 00       	nop
	  
    ///Wait for all components to switch on
    _delay_ms(300);
    
    ///* Switch on Global interrupts
    sei();
    39b0:	78 94       	sei
    
    ///* Set default mode of Satellite
    //Mode = DETUMBLING;
   // Mode = NOMINAL;
    ///* initialise Timer
    Time = 0;
    39b2:	10 92 42 05 	sts	0x0542, r1
    39b6:	10 92 43 05 	sts	0x0543, r1
    39ba:	10 92 44 05 	sts	0x0544, r1
    39be:	10 92 45 05 	sts	0x0545, r1
    39c2:	10 92 46 05 	sts	0x0546, r1
    39c6:	10 92 47 05 	sts	0x0547, r1
    39ca:	10 92 48 05 	sts	0x0548, r1
    39ce:	10 92 49 05 	sts	0x0549, r1
      /**
      * * * * Task 1: Control codes
       * @ref control
       */
	  
      control();
    39d2:	0e 94 de 07 	call	0xfbc	; 0xfbc <control>
      * @ref comm
      */
      //comm();
      
      ///* * Increment the Timer
      Time += FRAME_TIME;
    39d6:	20 91 42 05 	lds	r18, 0x0542
    39da:	30 91 43 05 	lds	r19, 0x0543
    39de:	40 91 44 05 	lds	r20, 0x0544
    39e2:	50 91 45 05 	lds	r21, 0x0545
    39e6:	60 91 46 05 	lds	r22, 0x0546
    39ea:	70 91 47 05 	lds	r23, 0x0547
    39ee:	80 91 48 05 	lds	r24, 0x0548
    39f2:	90 91 49 05 	lds	r25, 0x0549
    39f6:	a2 e0       	ldi	r26, 0x02	; 2
    39f8:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <__adddi3_s8>
    39fc:	20 93 42 05 	sts	0x0542, r18
    3a00:	30 93 43 05 	sts	0x0543, r19
    3a04:	40 93 44 05 	sts	0x0544, r20
    3a08:	50 93 45 05 	sts	0x0545, r21
    3a0c:	60 93 46 05 	sts	0x0546, r22
    3a10:	70 93 47 05 	sts	0x0547, r23
    3a14:	80 93 48 05 	sts	0x0548, r24
    3a18:	90 93 49 05 	sts	0x0549, r25
    3a1c:	da cf       	rjmp	.-76     	; 0x39d2 <main+0x4a>

00003a1e <copy_vector>:
*/
#include "common.h"
#include "mathutil.h"

void copy_vector(vector v_src, vector v_dest)
{
    3a1e:	cf 93       	push	r28
    3a20:	df 93       	push	r29
    3a22:	fc 01       	movw	r30, r24
    3a24:	eb 01       	movw	r28, r22
  uint8_t i;
  for(i = 0; i < 3; i++)
    v_dest[i] = v_src[i];
    3a26:	40 81       	ld	r20, Z
    3a28:	51 81       	ldd	r21, Z+1	; 0x01
    3a2a:	62 81       	ldd	r22, Z+2	; 0x02
    3a2c:	73 81       	ldd	r23, Z+3	; 0x03
    3a2e:	48 83       	st	Y, r20
    3a30:	59 83       	std	Y+1, r21	; 0x01
    3a32:	6a 83       	std	Y+2, r22	; 0x02
    3a34:	7b 83       	std	Y+3, r23	; 0x03
    3a36:	44 81       	ldd	r20, Z+4	; 0x04
    3a38:	55 81       	ldd	r21, Z+5	; 0x05
    3a3a:	66 81       	ldd	r22, Z+6	; 0x06
    3a3c:	77 81       	ldd	r23, Z+7	; 0x07
    3a3e:	4c 83       	std	Y+4, r20	; 0x04
    3a40:	5d 83       	std	Y+5, r21	; 0x05
    3a42:	6e 83       	std	Y+6, r22	; 0x06
    3a44:	7f 83       	std	Y+7, r23	; 0x07
    3a46:	80 85       	ldd	r24, Z+8	; 0x08
    3a48:	91 85       	ldd	r25, Z+9	; 0x09
    3a4a:	a2 85       	ldd	r26, Z+10	; 0x0a
    3a4c:	b3 85       	ldd	r27, Z+11	; 0x0b
    3a4e:	88 87       	std	Y+8, r24	; 0x08
    3a50:	99 87       	std	Y+9, r25	; 0x09
    3a52:	aa 87       	std	Y+10, r26	; 0x0a
    3a54:	bb 87       	std	Y+11, r27	; 0x0b
}
    3a56:	df 91       	pop	r29
    3a58:	cf 91       	pop	r28
    3a5a:	08 95       	ret

00003a5c <copy_quaternion>:

void copy_quaternion(quaternion q_src, quaternion q_dest)
{
    3a5c:	dc 01       	movw	r26, r24
    3a5e:	fb 01       	movw	r30, r22
    3a60:	84 e0       	ldi	r24, 0x04	; 4
  uint8_t i;
  for(i = 0; i < 4; i++)
    q_dest[i] = q_src[i];
    3a62:	4d 91       	ld	r20, X+
    3a64:	5d 91       	ld	r21, X+
    3a66:	6d 91       	ld	r22, X+
    3a68:	7d 91       	ld	r23, X+
    3a6a:	41 93       	st	Z+, r20
    3a6c:	51 93       	st	Z+, r21
    3a6e:	61 93       	st	Z+, r22
    3a70:	71 93       	st	Z+, r23
    3a72:	81 50       	subi	r24, 0x01	; 1
}

void copy_quaternion(quaternion q_src, quaternion q_dest)
{
  uint8_t i;
  for(i = 0; i < 4; i++)
    3a74:	b1 f7       	brne	.-20     	; 0x3a62 <copy_quaternion+0x6>
    q_dest[i] = q_src[i];
}
    3a76:	08 95       	ret

00003a78 <vector_norm>:


float vector_norm(vector v)
{
    3a78:	4f 92       	push	r4
    3a7a:	5f 92       	push	r5
    3a7c:	6f 92       	push	r6
    3a7e:	7f 92       	push	r7
    3a80:	8f 92       	push	r8
    3a82:	9f 92       	push	r9
    3a84:	af 92       	push	r10
    3a86:	bf 92       	push	r11
    3a88:	cf 92       	push	r12
    3a8a:	df 92       	push	r13
    3a8c:	ef 92       	push	r14
    3a8e:	ff 92       	push	r15
    3a90:	fc 01       	movw	r30, r24
  return sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
    3a92:	60 81       	ld	r22, Z
    3a94:	71 81       	ldd	r23, Z+1	; 0x01
    3a96:	82 81       	ldd	r24, Z+2	; 0x02
    3a98:	93 81       	ldd	r25, Z+3	; 0x03
    3a9a:	84 80       	ldd	r8, Z+4	; 0x04
    3a9c:	95 80       	ldd	r9, Z+5	; 0x05
    3a9e:	a6 80       	ldd	r10, Z+6	; 0x06
    3aa0:	b7 80       	ldd	r11, Z+7	; 0x07
    3aa2:	c0 84       	ldd	r12, Z+8	; 0x08
    3aa4:	d1 84       	ldd	r13, Z+9	; 0x09
    3aa6:	e2 84       	ldd	r14, Z+10	; 0x0a
    3aa8:	f3 84       	ldd	r15, Z+11	; 0x0b
    3aaa:	9b 01       	movw	r18, r22
    3aac:	ac 01       	movw	r20, r24
    3aae:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3ab2:	2b 01       	movw	r4, r22
    3ab4:	3c 01       	movw	r6, r24
    3ab6:	a5 01       	movw	r20, r10
    3ab8:	94 01       	movw	r18, r8
    3aba:	c5 01       	movw	r24, r10
    3abc:	b4 01       	movw	r22, r8
    3abe:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3ac2:	9b 01       	movw	r18, r22
    3ac4:	ac 01       	movw	r20, r24
    3ac6:	c3 01       	movw	r24, r6
    3ac8:	b2 01       	movw	r22, r4
    3aca:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    3ace:	4b 01       	movw	r8, r22
    3ad0:	5c 01       	movw	r10, r24
    3ad2:	a7 01       	movw	r20, r14
    3ad4:	96 01       	movw	r18, r12
    3ad6:	c7 01       	movw	r24, r14
    3ad8:	b6 01       	movw	r22, r12
    3ada:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3ade:	9b 01       	movw	r18, r22
    3ae0:	ac 01       	movw	r20, r24
    3ae2:	c5 01       	movw	r24, r10
    3ae4:	b4 01       	movw	r22, r8
    3ae6:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
}
    3aea:	ff 90       	pop	r15
    3aec:	ef 90       	pop	r14
    3aee:	df 90       	pop	r13
    3af0:	cf 90       	pop	r12
    3af2:	bf 90       	pop	r11
    3af4:	af 90       	pop	r10
    3af6:	9f 90       	pop	r9
    3af8:	8f 90       	pop	r8
    3afa:	7f 90       	pop	r7
    3afc:	6f 90       	pop	r6
    3afe:	5f 90       	pop	r5
    3b00:	4f 90       	pop	r4
}


float vector_norm(vector v)
{
  return sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
    3b02:	0c 94 4b 2e 	jmp	0x5c96	; 0x5c96 <sqrt>

00003b06 <quaternion_norm>:
}

float quaternion_norm(quaternion q)
{
    3b06:	4f 92       	push	r4
    3b08:	5f 92       	push	r5
    3b0a:	6f 92       	push	r6
    3b0c:	7f 92       	push	r7
    3b0e:	8f 92       	push	r8
    3b10:	9f 92       	push	r9
    3b12:	af 92       	push	r10
    3b14:	bf 92       	push	r11
    3b16:	cf 92       	push	r12
    3b18:	df 92       	push	r13
    3b1a:	ef 92       	push	r14
    3b1c:	ff 92       	push	r15
    3b1e:	cf 93       	push	r28
    3b20:	df 93       	push	r29
    3b22:	00 d0       	rcall	.+0      	; 0x3b24 <quaternion_norm+0x1e>
    3b24:	00 d0       	rcall	.+0      	; 0x3b26 <quaternion_norm+0x20>
    3b26:	cd b7       	in	r28, 0x3d	; 61
    3b28:	de b7       	in	r29, 0x3e	; 62
    3b2a:	fc 01       	movw	r30, r24
  return sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    3b2c:	60 81       	ld	r22, Z
    3b2e:	71 81       	ldd	r23, Z+1	; 0x01
    3b30:	82 81       	ldd	r24, Z+2	; 0x02
    3b32:	93 81       	ldd	r25, Z+3	; 0x03
    3b34:	84 80       	ldd	r8, Z+4	; 0x04
    3b36:	95 80       	ldd	r9, Z+5	; 0x05
    3b38:	a6 80       	ldd	r10, Z+6	; 0x06
    3b3a:	b7 80       	ldd	r11, Z+7	; 0x07
    3b3c:	c0 84       	ldd	r12, Z+8	; 0x08
    3b3e:	d1 84       	ldd	r13, Z+9	; 0x09
    3b40:	e2 84       	ldd	r14, Z+10	; 0x0a
    3b42:	f3 84       	ldd	r15, Z+11	; 0x0b
    3b44:	44 84       	ldd	r4, Z+12	; 0x0c
    3b46:	55 84       	ldd	r5, Z+13	; 0x0d
    3b48:	66 84       	ldd	r6, Z+14	; 0x0e
    3b4a:	77 84       	ldd	r7, Z+15	; 0x0f
    3b4c:	9b 01       	movw	r18, r22
    3b4e:	ac 01       	movw	r20, r24
    3b50:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3b54:	69 83       	std	Y+1, r22	; 0x01
    3b56:	7a 83       	std	Y+2, r23	; 0x02
    3b58:	8b 83       	std	Y+3, r24	; 0x03
    3b5a:	9c 83       	std	Y+4, r25	; 0x04
    3b5c:	a5 01       	movw	r20, r10
    3b5e:	94 01       	movw	r18, r8
    3b60:	c5 01       	movw	r24, r10
    3b62:	b4 01       	movw	r22, r8
    3b64:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3b68:	9b 01       	movw	r18, r22
    3b6a:	ac 01       	movw	r20, r24
    3b6c:	69 81       	ldd	r22, Y+1	; 0x01
    3b6e:	7a 81       	ldd	r23, Y+2	; 0x02
    3b70:	8b 81       	ldd	r24, Y+3	; 0x03
    3b72:	9c 81       	ldd	r25, Y+4	; 0x04
    3b74:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    3b78:	4b 01       	movw	r8, r22
    3b7a:	5c 01       	movw	r10, r24
    3b7c:	a7 01       	movw	r20, r14
    3b7e:	96 01       	movw	r18, r12
    3b80:	c7 01       	movw	r24, r14
    3b82:	b6 01       	movw	r22, r12
    3b84:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3b88:	9b 01       	movw	r18, r22
    3b8a:	ac 01       	movw	r20, r24
    3b8c:	c5 01       	movw	r24, r10
    3b8e:	b4 01       	movw	r22, r8
    3b90:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    3b94:	6b 01       	movw	r12, r22
    3b96:	7c 01       	movw	r14, r24
    3b98:	a3 01       	movw	r20, r6
    3b9a:	92 01       	movw	r18, r4
    3b9c:	c3 01       	movw	r24, r6
    3b9e:	b2 01       	movw	r22, r4
    3ba0:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3ba4:	9b 01       	movw	r18, r22
    3ba6:	ac 01       	movw	r20, r24
    3ba8:	c7 01       	movw	r24, r14
    3baa:	b6 01       	movw	r22, r12
    3bac:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
}
    3bb0:	0f 90       	pop	r0
    3bb2:	0f 90       	pop	r0
    3bb4:	0f 90       	pop	r0
    3bb6:	0f 90       	pop	r0
    3bb8:	df 91       	pop	r29
    3bba:	cf 91       	pop	r28
    3bbc:	ff 90       	pop	r15
    3bbe:	ef 90       	pop	r14
    3bc0:	df 90       	pop	r13
    3bc2:	cf 90       	pop	r12
    3bc4:	bf 90       	pop	r11
    3bc6:	af 90       	pop	r10
    3bc8:	9f 90       	pop	r9
    3bca:	8f 90       	pop	r8
    3bcc:	7f 90       	pop	r7
    3bce:	6f 90       	pop	r6
    3bd0:	5f 90       	pop	r5
    3bd2:	4f 90       	pop	r4
  return sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
}

float quaternion_norm(quaternion q)
{
  return sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    3bd4:	0c 94 4b 2e 	jmp	0x5c96	; 0x5c96 <sqrt>

00003bd8 <vector_dot_product>:
}

float vector_dot_product(vector v_a, vector v_b)
{
    3bd8:	cf 92       	push	r12
    3bda:	df 92       	push	r13
    3bdc:	ef 92       	push	r14
    3bde:	ff 92       	push	r15
    3be0:	0f 93       	push	r16
    3be2:	1f 93       	push	r17
    3be4:	cf 93       	push	r28
    3be6:	df 93       	push	r29
    3be8:	ec 01       	movw	r28, r24
    3bea:	8b 01       	movw	r16, r22
  return v_a[0] * v_b[0] + v_a[1] * v_b[1] + v_a[2] * v_b[2];
    3bec:	fb 01       	movw	r30, r22
    3bee:	20 81       	ld	r18, Z
    3bf0:	31 81       	ldd	r19, Z+1	; 0x01
    3bf2:	42 81       	ldd	r20, Z+2	; 0x02
    3bf4:	53 81       	ldd	r21, Z+3	; 0x03
    3bf6:	68 81       	ld	r22, Y
    3bf8:	79 81       	ldd	r23, Y+1	; 0x01
    3bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    3bfc:	9b 81       	ldd	r25, Y+3	; 0x03
    3bfe:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3c02:	6b 01       	movw	r12, r22
    3c04:	7c 01       	movw	r14, r24
    3c06:	f8 01       	movw	r30, r16
    3c08:	24 81       	ldd	r18, Z+4	; 0x04
    3c0a:	35 81       	ldd	r19, Z+5	; 0x05
    3c0c:	46 81       	ldd	r20, Z+6	; 0x06
    3c0e:	57 81       	ldd	r21, Z+7	; 0x07
    3c10:	6c 81       	ldd	r22, Y+4	; 0x04
    3c12:	7d 81       	ldd	r23, Y+5	; 0x05
    3c14:	8e 81       	ldd	r24, Y+6	; 0x06
    3c16:	9f 81       	ldd	r25, Y+7	; 0x07
    3c18:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3c1c:	9b 01       	movw	r18, r22
    3c1e:	ac 01       	movw	r20, r24
    3c20:	c7 01       	movw	r24, r14
    3c22:	b6 01       	movw	r22, r12
    3c24:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    3c28:	6b 01       	movw	r12, r22
    3c2a:	7c 01       	movw	r14, r24
    3c2c:	f8 01       	movw	r30, r16
    3c2e:	20 85       	ldd	r18, Z+8	; 0x08
    3c30:	31 85       	ldd	r19, Z+9	; 0x09
    3c32:	42 85       	ldd	r20, Z+10	; 0x0a
    3c34:	53 85       	ldd	r21, Z+11	; 0x0b
    3c36:	68 85       	ldd	r22, Y+8	; 0x08
    3c38:	79 85       	ldd	r23, Y+9	; 0x09
    3c3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c3e:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3c42:	9b 01       	movw	r18, r22
    3c44:	ac 01       	movw	r20, r24
    3c46:	c7 01       	movw	r24, r14
    3c48:	b6 01       	movw	r22, r12
    3c4a:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
}
    3c4e:	df 91       	pop	r29
    3c50:	cf 91       	pop	r28
    3c52:	1f 91       	pop	r17
    3c54:	0f 91       	pop	r16
    3c56:	ff 90       	pop	r15
    3c58:	ef 90       	pop	r14
    3c5a:	df 90       	pop	r13
    3c5c:	cf 90       	pop	r12
    3c5e:	08 95       	ret

00003c60 <add_vectors>:

void add_vectors(vector v_a, vector v_b, vector v_res)
{
    3c60:	df 92       	push	r13
    3c62:	ef 92       	push	r14
    3c64:	ff 92       	push	r15
    3c66:	0f 93       	push	r16
    3c68:	1f 93       	push	r17
    3c6a:	cf 93       	push	r28
    3c6c:	df 93       	push	r29
    3c6e:	7c 01       	movw	r14, r24
    3c70:	8b 01       	movw	r16, r22
    3c72:	ea 01       	movw	r28, r20
  uint8_t i;
  for(i = 0; i < 3; i++)
    3c74:	d1 2c       	mov	r13, r1
    v_res[i] = v_a[i] + v_b[i];
    3c76:	f7 01       	movw	r30, r14
    3c78:	61 91       	ld	r22, Z+
    3c7a:	71 91       	ld	r23, Z+
    3c7c:	81 91       	ld	r24, Z+
    3c7e:	91 91       	ld	r25, Z+
    3c80:	7f 01       	movw	r14, r30
    3c82:	f8 01       	movw	r30, r16
    3c84:	21 91       	ld	r18, Z+
    3c86:	31 91       	ld	r19, Z+
    3c88:	41 91       	ld	r20, Z+
    3c8a:	51 91       	ld	r21, Z+
    3c8c:	8f 01       	movw	r16, r30
    3c8e:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    3c92:	69 93       	st	Y+, r22
    3c94:	79 93       	st	Y+, r23
    3c96:	89 93       	st	Y+, r24
    3c98:	99 93       	st	Y+, r25
}

void add_vectors(vector v_a, vector v_b, vector v_res)
{
  uint8_t i;
  for(i = 0; i < 3; i++)
    3c9a:	d3 94       	inc	r13
    3c9c:	f3 e0       	ldi	r31, 0x03	; 3
    3c9e:	df 12       	cpse	r13, r31
    3ca0:	ea cf       	rjmp	.-44     	; 0x3c76 <add_vectors+0x16>
    v_res[i] = v_a[i] + v_b[i];
}
    3ca2:	df 91       	pop	r29
    3ca4:	cf 91       	pop	r28
    3ca6:	1f 91       	pop	r17
    3ca8:	0f 91       	pop	r16
    3caa:	ff 90       	pop	r15
    3cac:	ef 90       	pop	r14
    3cae:	df 90       	pop	r13
    3cb0:	08 95       	ret

00003cb2 <vector_into_matrix>:

void vector_into_matrix(vector v, matrix m, vector v_res)
{
    3cb2:	3f 92       	push	r3
    3cb4:	4f 92       	push	r4
    3cb6:	5f 92       	push	r5
    3cb8:	6f 92       	push	r6
    3cba:	7f 92       	push	r7
    3cbc:	8f 92       	push	r8
    3cbe:	9f 92       	push	r9
    3cc0:	af 92       	push	r10
    3cc2:	bf 92       	push	r11
    3cc4:	cf 92       	push	r12
    3cc6:	df 92       	push	r13
    3cc8:	ef 92       	push	r14
    3cca:	ff 92       	push	r15
    3ccc:	0f 93       	push	r16
    3cce:	1f 93       	push	r17
    3cd0:	cf 93       	push	r28
    3cd2:	df 93       	push	r29
    3cd4:	38 2e       	mov	r3, r24
    3cd6:	89 2e       	mov	r8, r25
    3cd8:	5b 01       	movw	r10, r22
    3cda:	7a 01       	movw	r14, r20
    3cdc:	c1 2c       	mov	r12, r1
    3cde:	d1 2c       	mov	r13, r1
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
  {
    v_res[i] = 0;
    3ce0:	f7 01       	movw	r30, r14
    3ce2:	10 82       	st	Z, r1
    3ce4:	11 82       	std	Z+1, r1	; 0x01
    3ce6:	12 82       	std	Z+2, r1	; 0x02
    3ce8:	13 82       	std	Z+3, r1	; 0x03
    3cea:	03 2d       	mov	r16, r3
    3cec:	18 2d       	mov	r17, r8
    3cee:	e5 01       	movw	r28, r10
    3cf0:	cc 0d       	add	r28, r12
    3cf2:	dd 1d       	adc	r29, r13
    3cf4:	83 e0       	ldi	r24, 0x03	; 3
    3cf6:	98 2e       	mov	r9, r24
    3cf8:	41 2c       	mov	r4, r1
    3cfa:	51 2c       	mov	r5, r1
    3cfc:	32 01       	movw	r6, r4
    for(j = 0; j < 3; j++)
      v_res[i] += v[j] * m[j][i];
    3cfe:	f8 01       	movw	r30, r16
    3d00:	61 91       	ld	r22, Z+
    3d02:	71 91       	ld	r23, Z+
    3d04:	81 91       	ld	r24, Z+
    3d06:	91 91       	ld	r25, Z+
    3d08:	8f 01       	movw	r16, r30
    3d0a:	28 81       	ld	r18, Y
    3d0c:	39 81       	ldd	r19, Y+1	; 0x01
    3d0e:	4a 81       	ldd	r20, Y+2	; 0x02
    3d10:	5b 81       	ldd	r21, Y+3	; 0x03
    3d12:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3d16:	9b 01       	movw	r18, r22
    3d18:	ac 01       	movw	r20, r24
    3d1a:	c3 01       	movw	r24, r6
    3d1c:	b2 01       	movw	r22, r4
    3d1e:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    3d22:	2b 01       	movw	r4, r22
    3d24:	3c 01       	movw	r6, r24
    3d26:	f7 01       	movw	r30, r14
    3d28:	60 83       	st	Z, r22
    3d2a:	71 83       	std	Z+1, r23	; 0x01
    3d2c:	82 83       	std	Z+2, r24	; 0x02
    3d2e:	93 83       	std	Z+3, r25	; 0x03
    3d30:	9a 94       	dec	r9
    3d32:	2c 96       	adiw	r28, 0x0c	; 12
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
  {
    v_res[i] = 0;
    for(j = 0; j < 3; j++)
    3d34:	91 10       	cpse	r9, r1
    3d36:	e3 cf       	rjmp	.-58     	; 0x3cfe <vector_into_matrix+0x4c>
    3d38:	f4 e0       	ldi	r31, 0x04	; 4
    3d3a:	ef 0e       	add	r14, r31
    3d3c:	f1 1c       	adc	r15, r1
    3d3e:	84 e0       	ldi	r24, 0x04	; 4
    3d40:	c8 0e       	add	r12, r24
    3d42:	d1 1c       	adc	r13, r1

void vector_into_matrix(vector v, matrix m, vector v_res)
{
  uint8_t i, j;
  
  for(i = 0; i < 3; i++)
    3d44:	ec e0       	ldi	r30, 0x0C	; 12
    3d46:	ce 16       	cp	r12, r30
    3d48:	d1 04       	cpc	r13, r1
    3d4a:	51 f6       	brne	.-108    	; 0x3ce0 <vector_into_matrix+0x2e>
  {
    v_res[i] = 0;
    for(j = 0; j < 3; j++)
      v_res[i] += v[j] * m[j][i];
  }
}
    3d4c:	df 91       	pop	r29
    3d4e:	cf 91       	pop	r28
    3d50:	1f 91       	pop	r17
    3d52:	0f 91       	pop	r16
    3d54:	ff 90       	pop	r15
    3d56:	ef 90       	pop	r14
    3d58:	df 90       	pop	r13
    3d5a:	cf 90       	pop	r12
    3d5c:	bf 90       	pop	r11
    3d5e:	af 90       	pop	r10
    3d60:	9f 90       	pop	r9
    3d62:	8f 90       	pop	r8
    3d64:	7f 90       	pop	r7
    3d66:	6f 90       	pop	r6
    3d68:	5f 90       	pop	r5
    3d6a:	4f 90       	pop	r4
    3d6c:	3f 90       	pop	r3
    3d6e:	08 95       	ret

00003d70 <vector_cross_product>:

void vector_cross_product(vector v_a, vector v_b, vector v_res)
{
    3d70:	af 92       	push	r10
    3d72:	bf 92       	push	r11
    3d74:	cf 92       	push	r12
    3d76:	df 92       	push	r13
    3d78:	ef 92       	push	r14
    3d7a:	ff 92       	push	r15
    3d7c:	0f 93       	push	r16
    3d7e:	1f 93       	push	r17
    3d80:	cf 93       	push	r28
    3d82:	df 93       	push	r29
    3d84:	ec 01       	movw	r28, r24
    3d86:	8b 01       	movw	r16, r22
    3d88:	5a 01       	movw	r10, r20
  v_res[0] = v_a[1] * v_b[2] - v_a[2] * v_b[1];
    3d8a:	fb 01       	movw	r30, r22
    3d8c:	20 85       	ldd	r18, Z+8	; 0x08
    3d8e:	31 85       	ldd	r19, Z+9	; 0x09
    3d90:	42 85       	ldd	r20, Z+10	; 0x0a
    3d92:	53 85       	ldd	r21, Z+11	; 0x0b
    3d94:	6c 81       	ldd	r22, Y+4	; 0x04
    3d96:	7d 81       	ldd	r23, Y+5	; 0x05
    3d98:	8e 81       	ldd	r24, Y+6	; 0x06
    3d9a:	9f 81       	ldd	r25, Y+7	; 0x07
    3d9c:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3da0:	6b 01       	movw	r12, r22
    3da2:	7c 01       	movw	r14, r24
    3da4:	f8 01       	movw	r30, r16
    3da6:	24 81       	ldd	r18, Z+4	; 0x04
    3da8:	35 81       	ldd	r19, Z+5	; 0x05
    3daa:	46 81       	ldd	r20, Z+6	; 0x06
    3dac:	57 81       	ldd	r21, Z+7	; 0x07
    3dae:	68 85       	ldd	r22, Y+8	; 0x08
    3db0:	79 85       	ldd	r23, Y+9	; 0x09
    3db2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3db4:	9b 85       	ldd	r25, Y+11	; 0x0b
    3db6:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3dba:	9b 01       	movw	r18, r22
    3dbc:	ac 01       	movw	r20, r24
    3dbe:	c7 01       	movw	r24, r14
    3dc0:	b6 01       	movw	r22, r12
    3dc2:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    3dc6:	f5 01       	movw	r30, r10
    3dc8:	60 83       	st	Z, r22
    3dca:	71 83       	std	Z+1, r23	; 0x01
    3dcc:	82 83       	std	Z+2, r24	; 0x02
    3dce:	93 83       	std	Z+3, r25	; 0x03
	v_res[1] = v_a[2] * v_b[0] - v_a[0] * v_b[2];
    3dd0:	f8 01       	movw	r30, r16
    3dd2:	20 81       	ld	r18, Z
    3dd4:	31 81       	ldd	r19, Z+1	; 0x01
    3dd6:	42 81       	ldd	r20, Z+2	; 0x02
    3dd8:	53 81       	ldd	r21, Z+3	; 0x03
    3dda:	68 85       	ldd	r22, Y+8	; 0x08
    3ddc:	79 85       	ldd	r23, Y+9	; 0x09
    3dde:	8a 85       	ldd	r24, Y+10	; 0x0a
    3de0:	9b 85       	ldd	r25, Y+11	; 0x0b
    3de2:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3de6:	6b 01       	movw	r12, r22
    3de8:	7c 01       	movw	r14, r24
    3dea:	f8 01       	movw	r30, r16
    3dec:	20 85       	ldd	r18, Z+8	; 0x08
    3dee:	31 85       	ldd	r19, Z+9	; 0x09
    3df0:	42 85       	ldd	r20, Z+10	; 0x0a
    3df2:	53 85       	ldd	r21, Z+11	; 0x0b
    3df4:	68 81       	ld	r22, Y
    3df6:	79 81       	ldd	r23, Y+1	; 0x01
    3df8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dfa:	9b 81       	ldd	r25, Y+3	; 0x03
    3dfc:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3e00:	9b 01       	movw	r18, r22
    3e02:	ac 01       	movw	r20, r24
    3e04:	c7 01       	movw	r24, r14
    3e06:	b6 01       	movw	r22, r12
    3e08:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    3e0c:	f5 01       	movw	r30, r10
    3e0e:	64 83       	std	Z+4, r22	; 0x04
    3e10:	75 83       	std	Z+5, r23	; 0x05
    3e12:	86 83       	std	Z+6, r24	; 0x06
    3e14:	97 83       	std	Z+7, r25	; 0x07
	v_res[2] = v_a[0] * v_b[1] - v_a[1] * v_b[0];
    3e16:	f8 01       	movw	r30, r16
    3e18:	24 81       	ldd	r18, Z+4	; 0x04
    3e1a:	35 81       	ldd	r19, Z+5	; 0x05
    3e1c:	46 81       	ldd	r20, Z+6	; 0x06
    3e1e:	57 81       	ldd	r21, Z+7	; 0x07
    3e20:	68 81       	ld	r22, Y
    3e22:	79 81       	ldd	r23, Y+1	; 0x01
    3e24:	8a 81       	ldd	r24, Y+2	; 0x02
    3e26:	9b 81       	ldd	r25, Y+3	; 0x03
    3e28:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3e2c:	6b 01       	movw	r12, r22
    3e2e:	7c 01       	movw	r14, r24
    3e30:	f8 01       	movw	r30, r16
    3e32:	20 81       	ld	r18, Z
    3e34:	31 81       	ldd	r19, Z+1	; 0x01
    3e36:	42 81       	ldd	r20, Z+2	; 0x02
    3e38:	53 81       	ldd	r21, Z+3	; 0x03
    3e3a:	6c 81       	ldd	r22, Y+4	; 0x04
    3e3c:	7d 81       	ldd	r23, Y+5	; 0x05
    3e3e:	8e 81       	ldd	r24, Y+6	; 0x06
    3e40:	9f 81       	ldd	r25, Y+7	; 0x07
    3e42:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3e46:	9b 01       	movw	r18, r22
    3e48:	ac 01       	movw	r20, r24
    3e4a:	c7 01       	movw	r24, r14
    3e4c:	b6 01       	movw	r22, r12
    3e4e:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    3e52:	f5 01       	movw	r30, r10
    3e54:	60 87       	std	Z+8, r22	; 0x08
    3e56:	71 87       	std	Z+9, r23	; 0x09
    3e58:	82 87       	std	Z+10, r24	; 0x0a
    3e5a:	93 87       	std	Z+11, r25	; 0x0b
}
    3e5c:	df 91       	pop	r29
    3e5e:	cf 91       	pop	r28
    3e60:	1f 91       	pop	r17
    3e62:	0f 91       	pop	r16
    3e64:	ff 90       	pop	r15
    3e66:	ef 90       	pop	r14
    3e68:	df 90       	pop	r13
    3e6a:	cf 90       	pop	r12
    3e6c:	bf 90       	pop	r11
    3e6e:	af 90       	pop	r10
    3e70:	08 95       	ret

00003e72 <scalar_into_vector>:

void scalar_into_vector(vector v, float s)
{
    3e72:	cf 92       	push	r12
    3e74:	df 92       	push	r13
    3e76:	ef 92       	push	r14
    3e78:	ff 92       	push	r15
    3e7a:	cf 93       	push	r28
    3e7c:	df 93       	push	r29
    3e7e:	ec 01       	movw	r28, r24
    3e80:	6a 01       	movw	r12, r20
    3e82:	7b 01       	movw	r14, r22
  uint8_t i;
  for(i = 0; i < 3; i++)
    v[i] = v[i] * s;
    3e84:	9a 01       	movw	r18, r20
    3e86:	ab 01       	movw	r20, r22
    3e88:	68 81       	ld	r22, Y
    3e8a:	79 81       	ldd	r23, Y+1	; 0x01
    3e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e90:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3e94:	68 83       	st	Y, r22
    3e96:	79 83       	std	Y+1, r23	; 0x01
    3e98:	8a 83       	std	Y+2, r24	; 0x02
    3e9a:	9b 83       	std	Y+3, r25	; 0x03
    3e9c:	a7 01       	movw	r20, r14
    3e9e:	96 01       	movw	r18, r12
    3ea0:	6c 81       	ldd	r22, Y+4	; 0x04
    3ea2:	7d 81       	ldd	r23, Y+5	; 0x05
    3ea4:	8e 81       	ldd	r24, Y+6	; 0x06
    3ea6:	9f 81       	ldd	r25, Y+7	; 0x07
    3ea8:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3eac:	6c 83       	std	Y+4, r22	; 0x04
    3eae:	7d 83       	std	Y+5, r23	; 0x05
    3eb0:	8e 83       	std	Y+6, r24	; 0x06
    3eb2:	9f 83       	std	Y+7, r25	; 0x07
    3eb4:	a7 01       	movw	r20, r14
    3eb6:	96 01       	movw	r18, r12
    3eb8:	68 85       	ldd	r22, Y+8	; 0x08
    3eba:	79 85       	ldd	r23, Y+9	; 0x09
    3ebc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ebe:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ec0:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3ec4:	68 87       	std	Y+8, r22	; 0x08
    3ec6:	79 87       	std	Y+9, r23	; 0x09
    3ec8:	8a 87       	std	Y+10, r24	; 0x0a
    3eca:	9b 87       	std	Y+11, r25	; 0x0b
}
    3ecc:	df 91       	pop	r29
    3ece:	cf 91       	pop	r28
    3ed0:	ff 90       	pop	r15
    3ed2:	ef 90       	pop	r14
    3ed4:	df 90       	pop	r13
    3ed6:	cf 90       	pop	r12
    3ed8:	08 95       	ret

00003eda <scalar_into_quaternion>:

void scalar_into_quaternion(quaternion q, float s)
{
    3eda:	cf 92       	push	r12
    3edc:	df 92       	push	r13
    3ede:	ef 92       	push	r14
    3ee0:	ff 92       	push	r15
    3ee2:	1f 93       	push	r17
    3ee4:	cf 93       	push	r28
    3ee6:	df 93       	push	r29
    3ee8:	6a 01       	movw	r12, r20
    3eea:	7b 01       	movw	r14, r22
    3eec:	ec 01       	movw	r28, r24
  uint8_t i;
  for(i = 0; i < 4; i++)
    3eee:	10 e0       	ldi	r17, 0x00	; 0
    q[i] = q[i] * s;
    3ef0:	a7 01       	movw	r20, r14
    3ef2:	96 01       	movw	r18, r12
    3ef4:	68 81       	ld	r22, Y
    3ef6:	79 81       	ldd	r23, Y+1	; 0x01
    3ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    3efa:	9b 81       	ldd	r25, Y+3	; 0x03
    3efc:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    3f00:	69 93       	st	Y+, r22
    3f02:	79 93       	st	Y+, r23
    3f04:	89 93       	st	Y+, r24
    3f06:	99 93       	st	Y+, r25
}

void scalar_into_quaternion(quaternion q, float s)
{
  uint8_t i;
  for(i = 0; i < 4; i++)
    3f08:	1f 5f       	subi	r17, 0xFF	; 255
    3f0a:	14 30       	cpi	r17, 0x04	; 4
    3f0c:	89 f7       	brne	.-30     	; 0x3ef0 <scalar_into_quaternion+0x16>
    q[i] = q[i] * s;
}
    3f0e:	df 91       	pop	r29
    3f10:	cf 91       	pop	r28
    3f12:	1f 91       	pop	r17
    3f14:	ff 90       	pop	r15
    3f16:	ef 90       	pop	r14
    3f18:	df 90       	pop	r13
    3f1a:	cf 90       	pop	r12
    3f1c:	08 95       	ret

00003f1e <convert_unit_vector>:

void convert_unit_vector(vector v)
{
    3f1e:	cf 92       	push	r12
    3f20:	df 92       	push	r13
    3f22:	ef 92       	push	r14
    3f24:	ff 92       	push	r15
    3f26:	cf 93       	push	r28
    3f28:	df 93       	push	r29
    3f2a:	ec 01       	movw	r28, r24
  uint8_t i;
  float norm;
  
  norm = vector_norm(v);
    3f2c:	a5 dd       	rcall	.-1206   	; 0x3a78 <vector_norm>
    3f2e:	6b 01       	movw	r12, r22
    3f30:	7c 01       	movw	r14, r24
  
  for(i = 0; i < 3; i++)
    v[i] = v[i] / norm;
    3f32:	9b 01       	movw	r18, r22
    3f34:	ac 01       	movw	r20, r24
    3f36:	68 81       	ld	r22, Y
    3f38:	79 81       	ldd	r23, Y+1	; 0x01
    3f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f3c:	9b 81       	ldd	r25, Y+3	; 0x03
    3f3e:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    3f42:	68 83       	st	Y, r22
    3f44:	79 83       	std	Y+1, r23	; 0x01
    3f46:	8a 83       	std	Y+2, r24	; 0x02
    3f48:	9b 83       	std	Y+3, r25	; 0x03
    3f4a:	a7 01       	movw	r20, r14
    3f4c:	96 01       	movw	r18, r12
    3f4e:	6c 81       	ldd	r22, Y+4	; 0x04
    3f50:	7d 81       	ldd	r23, Y+5	; 0x05
    3f52:	8e 81       	ldd	r24, Y+6	; 0x06
    3f54:	9f 81       	ldd	r25, Y+7	; 0x07
    3f56:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    3f5a:	6c 83       	std	Y+4, r22	; 0x04
    3f5c:	7d 83       	std	Y+5, r23	; 0x05
    3f5e:	8e 83       	std	Y+6, r24	; 0x06
    3f60:	9f 83       	std	Y+7, r25	; 0x07
    3f62:	a7 01       	movw	r20, r14
    3f64:	96 01       	movw	r18, r12
    3f66:	68 85       	ldd	r22, Y+8	; 0x08
    3f68:	79 85       	ldd	r23, Y+9	; 0x09
    3f6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f6e:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    3f72:	68 87       	std	Y+8, r22	; 0x08
    3f74:	79 87       	std	Y+9, r23	; 0x09
    3f76:	8a 87       	std	Y+10, r24	; 0x0a
    3f78:	9b 87       	std	Y+11, r25	; 0x0b
}
    3f7a:	df 91       	pop	r29
    3f7c:	cf 91       	pop	r28
    3f7e:	ff 90       	pop	r15
    3f80:	ef 90       	pop	r14
    3f82:	df 90       	pop	r13
    3f84:	cf 90       	pop	r12
    3f86:	08 95       	ret

00003f88 <convert_unit_quaternion>:

void convert_unit_quaternion(quaternion q)
{
    3f88:	cf 92       	push	r12
    3f8a:	df 92       	push	r13
    3f8c:	ef 92       	push	r14
    3f8e:	ff 92       	push	r15
    3f90:	0f 93       	push	r16
    3f92:	1f 93       	push	r17
    3f94:	cf 93       	push	r28
    3f96:	df 93       	push	r29
    3f98:	8c 01       	movw	r16, r24
  uint8_t i;
  float norm;
  
  norm = quaternion_norm(q);
    3f9a:	b5 dd       	rcall	.-1174   	; 0x3b06 <quaternion_norm>
    3f9c:	6b 01       	movw	r12, r22
    3f9e:	7c 01       	movw	r14, r24
    3fa0:	e8 01       	movw	r28, r16
  
  for(i = 0; i < 4; i++)
    3fa2:	10 e0       	ldi	r17, 0x00	; 0
    q[i] = q[i] / norm;
    3fa4:	a7 01       	movw	r20, r14
    3fa6:	96 01       	movw	r18, r12
    3fa8:	68 81       	ld	r22, Y
    3faa:	79 81       	ldd	r23, Y+1	; 0x01
    3fac:	8a 81       	ldd	r24, Y+2	; 0x02
    3fae:	9b 81       	ldd	r25, Y+3	; 0x03
    3fb0:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    3fb4:	69 93       	st	Y+, r22
    3fb6:	79 93       	st	Y+, r23
    3fb8:	89 93       	st	Y+, r24
    3fba:	99 93       	st	Y+, r25
  uint8_t i;
  float norm;
  
  norm = quaternion_norm(q);
  
  for(i = 0; i < 4; i++)
    3fbc:	1f 5f       	subi	r17, 0xFF	; 255
    3fbe:	14 30       	cpi	r17, 0x04	; 4
    3fc0:	89 f7       	brne	.-30     	; 0x3fa4 <convert_unit_quaternion+0x1c>
    q[i] = q[i] / norm;
}
    3fc2:	df 91       	pop	r29
    3fc4:	cf 91       	pop	r28
    3fc6:	1f 91       	pop	r17
    3fc8:	0f 91       	pop	r16
    3fca:	ff 90       	pop	r15
    3fcc:	ef 90       	pop	r14
    3fce:	df 90       	pop	r13
    3fd0:	cf 90       	pop	r12
    3fd2:	08 95       	ret

00003fd4 <read_GPS>:
}

void read_GPS(void){
  ///* Switch on the GPS interrupt
  
  UCSR0B |= _BV(RXCIE0);
    3fd4:	57 9a       	sbi	0x0a, 7	; 10
    3fd6:	08 95       	ret

00003fd8 <read_SS>:
  
  ///Configure the Sunsensor ADC IC
  //configure_SS();
  
  ///Poll the ADC for readings
  poll_SS();
    3fd8:	0c 94 1a 2a 	jmp	0x5434	; 0x5434 <poll_SS>

00003fdc <read_MM>:

void read_MM(void){
  
  //power_up_peripheral(PMAG);
  ///Poll the magnetometer for readings
  poll_MM1();
    3fdc:	25 cc       	rjmp	.-1974   	; 0x3828 <poll_MM1>

00003fde <copy_gps_reading>:
vector v_sat;

extern volatile struct GPS_reading gps;

void copy_gps_reading(void)
{
    3fde:	ef 92       	push	r14
    3fe0:	ff 92       	push	r15
    3fe2:	0f 93       	push	r16
    3fe4:	1f 93       	push	r17
    3fe6:	cf 93       	push	r28
    3fe8:	df 93       	push	r29
	
  static vector v_r_ecef, v_v_ecef;
  
 // Current_state.gps = gps;
  
  Current_state.gps.time_since_reading = 0;
    3fea:	10 92 01 05 	sts	0x0501, r1
    3fee:	10 92 00 05 	sts	0x0500, r1
  //increase a zero at end
  //int32_t test = -181930228;
  v_r_ecef[0] = ((float)Current_state.gps.x)/100;//((float)test/100);//
    3ff2:	60 91 d3 04 	lds	r22, 0x04D3
    3ff6:	70 91 d4 04 	lds	r23, 0x04D4
    3ffa:	80 91 d5 04 	lds	r24, 0x04D5
    3ffe:	90 91 d6 04 	lds	r25, 0x04D6
    4002:	09 e6       	ldi	r16, 0x69	; 105
    4004:	14 e0       	ldi	r17, 0x04	; 4
    4006:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
    400a:	20 e0       	ldi	r18, 0x00	; 0
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	48 ec       	ldi	r20, 0xC8	; 200
    4010:	52 e4       	ldi	r21, 0x42	; 66
    4012:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    4016:	f8 01       	movw	r30, r16
    4018:	60 83       	st	Z, r22
    401a:	71 83       	std	Z+1, r23	; 0x01
    401c:	82 83       	std	Z+2, r24	; 0x02
    401e:	93 83       	std	Z+3, r25	; 0x03
  v_r_ecef[1] = ((float)Current_state.gps.y) / 100;//((float)test/100);//
    4020:	60 91 d7 04 	lds	r22, 0x04D7
    4024:	70 91 d8 04 	lds	r23, 0x04D8
    4028:	80 91 d9 04 	lds	r24, 0x04D9
    402c:	90 91 da 04 	lds	r25, 0x04DA
    4030:	cd e6       	ldi	r28, 0x6D	; 109
    4032:	d4 e0       	ldi	r29, 0x04	; 4
    4034:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
    4038:	20 e0       	ldi	r18, 0x00	; 0
    403a:	30 e0       	ldi	r19, 0x00	; 0
    403c:	48 ec       	ldi	r20, 0xC8	; 200
    403e:	52 e4       	ldi	r21, 0x42	; 66
    4040:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    4044:	68 83       	st	Y, r22
    4046:	79 83       	std	Y+1, r23	; 0x01
    4048:	8a 83       	std	Y+2, r24	; 0x02
    404a:	9b 83       	std	Y+3, r25	; 0x03
  v_r_ecef[2] = ((float)Current_state.gps.z) / 100;//((float)test/100);//
    404c:	60 91 db 04 	lds	r22, 0x04DB
    4050:	70 91 dc 04 	lds	r23, 0x04DC
    4054:	80 91 dd 04 	lds	r24, 0x04DD
    4058:	90 91 de 04 	lds	r25, 0x04DE
    405c:	21 e7       	ldi	r18, 0x71	; 113
    405e:	e2 2e       	mov	r14, r18
    4060:	24 e0       	ldi	r18, 0x04	; 4
    4062:	f2 2e       	mov	r15, r18
    4064:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
    4068:	20 e0       	ldi	r18, 0x00	; 0
    406a:	30 e0       	ldi	r19, 0x00	; 0
    406c:	48 ec       	ldi	r20, 0xC8	; 200
    406e:	52 e4       	ldi	r21, 0x42	; 66
    4070:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    4074:	f7 01       	movw	r30, r14
    4076:	60 83       	st	Z, r22
    4078:	71 83       	std	Z+1, r23	; 0x01
    407a:	82 83       	std	Z+2, r24	; 0x02
    407c:	93 83       	std	Z+3, r25	; 0x03
  
  v_v_ecef[0] = (float)Current_state.gps.v_x / 1;
    407e:	60 91 df 04 	lds	r22, 0x04DF
    4082:	70 91 e0 04 	lds	r23, 0x04E0
    4086:	80 91 e1 04 	lds	r24, 0x04E1
    408a:	90 91 e2 04 	lds	r25, 0x04E2
    408e:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
    4092:	60 93 5d 04 	sts	0x045D, r22
    4096:	70 93 5e 04 	sts	0x045E, r23
    409a:	80 93 5f 04 	sts	0x045F, r24
    409e:	90 93 60 04 	sts	0x0460, r25
  v_v_ecef[1] = (float)Current_state.gps.v_y / 1;
    40a2:	60 91 e3 04 	lds	r22, 0x04E3
    40a6:	70 91 e4 04 	lds	r23, 0x04E4
    40aa:	80 91 e5 04 	lds	r24, 0x04E5
    40ae:	90 91 e6 04 	lds	r25, 0x04E6
    40b2:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
    40b6:	60 93 61 04 	sts	0x0461, r22
    40ba:	70 93 62 04 	sts	0x0462, r23
    40be:	80 93 63 04 	sts	0x0463, r24
    40c2:	90 93 64 04 	sts	0x0464, r25
  v_v_ecef[2] = (float)Current_state.gps.v_z / 1;
    40c6:	60 91 e7 04 	lds	r22, 0x04E7
    40ca:	70 91 e8 04 	lds	r23, 0x04E8
    40ce:	80 91 e9 04 	lds	r24, 0x04E9
    40d2:	90 91 ea 04 	lds	r25, 0x04EA
    40d6:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
    40da:	60 93 65 04 	sts	0x0465, r22
    40de:	70 93 66 04 	sts	0x0466, r23
    40e2:	80 93 67 04 	sts	0x0467, r24
    40e6:	90 93 68 04 	sts	0x0468, r25
   
  get_seconds_since_equinox();//check
    40ea:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <get_seconds_since_equinox>
   
  r_ecef_ash[0] = v_r_ecef[0];
    40ee:	f8 01       	movw	r30, r16
    40f0:	80 81       	ld	r24, Z
    40f2:	91 81       	ldd	r25, Z+1	; 0x01
    40f4:	a2 81       	ldd	r26, Z+2	; 0x02
    40f6:	b3 81       	ldd	r27, Z+3	; 0x03
    40f8:	80 93 85 04 	sts	0x0485, r24
    40fc:	90 93 86 04 	sts	0x0486, r25
    4100:	a0 93 87 04 	sts	0x0487, r26
    4104:	b0 93 88 04 	sts	0x0488, r27
  r_ecef_ash[1] = v_r_ecef[1];
    4108:	88 81       	ld	r24, Y
    410a:	99 81       	ldd	r25, Y+1	; 0x01
    410c:	aa 81       	ldd	r26, Y+2	; 0x02
    410e:	bb 81       	ldd	r27, Y+3	; 0x03
    4110:	80 93 89 04 	sts	0x0489, r24
    4114:	90 93 8a 04 	sts	0x048A, r25
    4118:	a0 93 8b 04 	sts	0x048B, r26
    411c:	b0 93 8c 04 	sts	0x048C, r27
  r_ecef_ash[2] = v_r_ecef[2];
    4120:	f7 01       	movw	r30, r14
    4122:	80 81       	ld	r24, Z
    4124:	91 81       	ldd	r25, Z+1	; 0x01
    4126:	a2 81       	ldd	r26, Z+2	; 0x02
    4128:	b3 81       	ldd	r27, Z+3	; 0x03
    412a:	80 93 8d 04 	sts	0x048D, r24
    412e:	90 93 8e 04 	sts	0x048E, r25
    4132:	a0 93 8f 04 	sts	0x048F, r26
    4136:	b0 93 90 04 	sts	0x0490, r27
  ecef2eci(v_r_ecef, v_r);
    413a:	61 e9       	ldi	r22, 0x91	; 145
    413c:	74 e0       	ldi	r23, 0x04	; 4
    413e:	c8 01       	movw	r24, r16
    4140:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <ecef2eci>
  ecef2eci(v_v_ecef, v_v);
    4144:	69 e7       	ldi	r22, 0x79	; 121
    4146:	74 e0       	ldi	r23, 0x04	; 4
    4148:	8d e5       	ldi	r24, 0x5D	; 93
    414a:	94 e0       	ldi	r25, 0x04	; 4
    414c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <ecef2eci>
	  transmit_UART0(b);
	  transmit_UART0(c);
	  transmit_UART0(d);
  }
  */
  v_sat[0] = (((float)Current_state.gps.lat) / 10000000) * (M_PI / 180);// check scale factor
    4150:	60 91 eb 04 	lds	r22, 0x04EB
    4154:	70 91 ec 04 	lds	r23, 0x04EC
    4158:	80 91 ed 04 	lds	r24, 0x04ED
    415c:	90 91 ee 04 	lds	r25, 0x04EE
    4160:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
    4164:	20 e8       	ldi	r18, 0x80	; 128
    4166:	36 e9       	ldi	r19, 0x96	; 150
    4168:	48 e1       	ldi	r20, 0x18	; 24
    416a:	5b e4       	ldi	r21, 0x4B	; 75
    416c:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    4170:	25 e3       	ldi	r18, 0x35	; 53
    4172:	3a ef       	ldi	r19, 0xFA	; 250
    4174:	4e e8       	ldi	r20, 0x8E	; 142
    4176:	5c e3       	ldi	r21, 0x3C	; 60
    4178:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    417c:	60 93 4a 05 	sts	0x054A, r22
    4180:	70 93 4b 05 	sts	0x054B, r23
    4184:	80 93 4c 05 	sts	0x054C, r24
    4188:	90 93 4d 05 	sts	0x054D, r25
  v_sat[1] = (((float)Current_state.gps.lon) / 10000000) * (M_PI / 180);
    418c:	60 91 ef 04 	lds	r22, 0x04EF
    4190:	70 91 f0 04 	lds	r23, 0x04F0
    4194:	80 91 f1 04 	lds	r24, 0x04F1
    4198:	90 91 f2 04 	lds	r25, 0x04F2
    419c:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
    41a0:	20 e8       	ldi	r18, 0x80	; 128
    41a2:	36 e9       	ldi	r19, 0x96	; 150
    41a4:	48 e1       	ldi	r20, 0x18	; 24
    41a6:	5b e4       	ldi	r21, 0x4B	; 75
    41a8:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    41ac:	25 e3       	ldi	r18, 0x35	; 53
    41ae:	3a ef       	ldi	r19, 0xFA	; 250
    41b0:	4e e8       	ldi	r20, 0x8E	; 142
    41b2:	5c e3       	ldi	r21, 0x3C	; 60
    41b4:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    41b8:	60 93 4e 05 	sts	0x054E, r22
    41bc:	70 93 4f 05 	sts	0x054F, r23
    41c0:	80 93 50 05 	sts	0x0550, r24
    41c4:	90 93 51 05 	sts	0x0551, r25
  
  GPS_done = 0;
    41c8:	10 92 13 01 	sts	0x0113, r1
}
    41cc:	df 91       	pop	r29
    41ce:	cf 91       	pop	r28
    41d0:	1f 91       	pop	r17
    41d2:	0f 91       	pop	r16
    41d4:	ff 90       	pop	r15
    41d6:	ef 90       	pop	r14
    41d8:	08 95       	ret

000041da <sgp_get_acceleration>:

void sgp_get_acceleration(vector v_g)// only j2 perturbations taken
{
    41da:	4f 92       	push	r4
    41dc:	5f 92       	push	r5
    41de:	6f 92       	push	r6
    41e0:	7f 92       	push	r7
    41e2:	8f 92       	push	r8
    41e4:	9f 92       	push	r9
    41e6:	af 92       	push	r10
    41e8:	bf 92       	push	r11
    41ea:	cf 92       	push	r12
    41ec:	df 92       	push	r13
    41ee:	ef 92       	push	r14
    41f0:	ff 92       	push	r15
    41f2:	0f 93       	push	r16
    41f4:	1f 93       	push	r17
    41f6:	cf 93       	push	r28
    41f8:	df 93       	push	r29
    41fa:	cd b7       	in	r28, 0x3d	; 61
    41fc:	de b7       	in	r29, 0x3e	; 62
    41fe:	64 97       	sbiw	r28, 0x14	; 20
    4200:	0f b6       	in	r0, 0x3f	; 63
    4202:	f8 94       	cli
    4204:	de bf       	out	0x3e, r29	; 62
    4206:	0f be       	out	0x3f, r0	; 63
    4208:	cd bf       	out	0x3d, r28	; 61
    420a:	8c 01       	movw	r16, r24
  vector v_r_ecef, v_g_ecef;
  float R, R2, R3, R4;
 
  //eci2ecef(v_r, v_r_ecef);//see change
  
  R = vector_norm(r_ecef_ash);  //
    420c:	85 e8       	ldi	r24, 0x85	; 133
    420e:	94 e0       	ldi	r25, 0x04	; 4
    4210:	33 dc       	rcall	.-1946   	; 0x3a78 <vector_norm>
    4212:	2b 01       	movw	r4, r22
    4214:	3c 01       	movw	r6, r24
  R2 = pow(R, 2);
    4216:	9b 01       	movw	r18, r22
    4218:	ac 01       	movw	r20, r24
    421a:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    421e:	9b 01       	movw	r18, r22
    4220:	ac 01       	movw	r20, r24
  R2 = (1.5 * J2 * R_E2) / R2;
    4222:	61 eb       	ldi	r22, 0xB1	; 177
    4224:	7a e1       	ldi	r23, 0x1A	; 26
    4226:	86 e7       	ldi	r24, 0x76	; 118
    4228:	91 e5       	ldi	r25, 0x51	; 81
    422a:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    422e:	6d 87       	std	Y+13, r22	; 0x0d
    4230:	7e 87       	std	Y+14, r23	; 0x0e
    4232:	8f 87       	std	Y+15, r24	; 0x0f
    4234:	98 8b       	std	Y+16, r25	; 0x10
  
  R3 = pow(R, 3);
    4236:	20 e0       	ldi	r18, 0x00	; 0
    4238:	30 e0       	ldi	r19, 0x00	; 0
    423a:	40 e4       	ldi	r20, 0x40	; 64
    423c:	50 e4       	ldi	r21, 0x40	; 64
    423e:	c3 01       	movw	r24, r6
    4240:	b2 01       	movw	r22, r4
    4242:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <pow>
    4246:	6b 01       	movw	r12, r22
    4248:	7c 01       	movw	r14, r24
  
  R4 = pow(R, 4);
    424a:	20 e0       	ldi	r18, 0x00	; 0
    424c:	30 e0       	ldi	r19, 0x00	; 0
    424e:	40 e8       	ldi	r20, 0x80	; 128
    4250:	50 e4       	ldi	r21, 0x40	; 64
    4252:	c3 01       	movw	r24, r6
    4254:	b2 01       	movw	r22, r4
    4256:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <pow>
    425a:	2b 01       	movw	r4, r22
    425c:	3c 01       	movw	r6, r24
  R4 = (7.5 * J2 * pow(r_ecef_ash[2],2) * R_E2) / R4; //
    425e:	80 90 8d 04 	lds	r8, 0x048D
    4262:	90 90 8e 04 	lds	r9, 0x048E
    4266:	a0 90 8f 04 	lds	r10, 0x048F
    426a:	b0 90 90 04 	lds	r11, 0x0490
    426e:	a5 01       	movw	r20, r10
    4270:	94 01       	movw	r18, r8
    4272:	c5 01       	movw	r24, r10
    4274:	b4 01       	movw	r22, r8
    4276:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    427a:	28 e9       	ldi	r18, 0x98	; 152
    427c:	38 e0       	ldi	r19, 0x08	; 8
    427e:	45 e0       	ldi	r20, 0x05	; 5
    4280:	5c e3       	ldi	r21, 0x3C	; 60
    4282:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    4286:	2a ec       	ldi	r18, 0xCA	; 202
    4288:	3e ef       	ldi	r19, 0xFE	; 254
    428a:	43 e1       	ldi	r20, 0x13	; 19
    428c:	56 e5       	ldi	r21, 0x56	; 86
    428e:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    4292:	a3 01       	movw	r20, r6
    4294:	92 01       	movw	r18, r4
    4296:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    429a:	69 8b       	std	Y+17, r22	; 0x11
    429c:	7a 8b       	std	Y+18, r23	; 0x12
    429e:	8b 8b       	std	Y+19, r24	; 0x13
    42a0:	9c 8b       	std	Y+20, r25	; 0x14
  
  v_g_ecef[0] = (-1 * GM * r_ecef_ash[0] * (1 + R2 - R4)) / R3;//
    42a2:	20 e0       	ldi	r18, 0x00	; 0
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	40 e8       	ldi	r20, 0x80	; 128
    42a8:	5f e3       	ldi	r21, 0x3F	; 63
    42aa:	6d 85       	ldd	r22, Y+13	; 0x0d
    42ac:	7e 85       	ldd	r23, Y+14	; 0x0e
    42ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    42b0:	98 89       	ldd	r25, Y+16	; 0x10
    42b2:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    42b6:	29 89       	ldd	r18, Y+17	; 0x11
    42b8:	3a 89       	ldd	r19, Y+18	; 0x12
    42ba:	4b 89       	ldd	r20, Y+19	; 0x13
    42bc:	5c 89       	ldd	r21, Y+20	; 0x14
    42be:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    42c2:	2b 01       	movw	r4, r22
    42c4:	3c 01       	movw	r6, r24
    42c6:	21 ef       	ldi	r18, 0xF1	; 241
    42c8:	39 e4       	ldi	r19, 0x49	; 73
    42ca:	45 eb       	ldi	r20, 0xB5	; 181
    42cc:	57 ed       	ldi	r21, 0xD7	; 215
    42ce:	60 91 85 04 	lds	r22, 0x0485
    42d2:	70 91 86 04 	lds	r23, 0x0486
    42d6:	80 91 87 04 	lds	r24, 0x0487
    42da:	90 91 88 04 	lds	r25, 0x0488
    42de:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    42e2:	a3 01       	movw	r20, r6
    42e4:	92 01       	movw	r18, r4
    42e6:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    42ea:	a7 01       	movw	r20, r14
    42ec:	96 01       	movw	r18, r12
    42ee:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    42f2:	69 83       	std	Y+1, r22	; 0x01
    42f4:	7a 83       	std	Y+2, r23	; 0x02
    42f6:	8b 83       	std	Y+3, r24	; 0x03
    42f8:	9c 83       	std	Y+4, r25	; 0x04
  v_g_ecef[1] = (-1 * GM * r_ecef_ash[1] * (1 + R2 - R4)) / R3;//
    42fa:	21 ef       	ldi	r18, 0xF1	; 241
    42fc:	39 e4       	ldi	r19, 0x49	; 73
    42fe:	45 eb       	ldi	r20, 0xB5	; 181
    4300:	57 ed       	ldi	r21, 0xD7	; 215
    4302:	60 91 89 04 	lds	r22, 0x0489
    4306:	70 91 8a 04 	lds	r23, 0x048A
    430a:	80 91 8b 04 	lds	r24, 0x048B
    430e:	90 91 8c 04 	lds	r25, 0x048C
    4312:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    4316:	9b 01       	movw	r18, r22
    4318:	ac 01       	movw	r20, r24
    431a:	c3 01       	movw	r24, r6
    431c:	b2 01       	movw	r22, r4
    431e:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    4322:	a7 01       	movw	r20, r14
    4324:	96 01       	movw	r18, r12
    4326:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    432a:	6d 83       	std	Y+5, r22	; 0x05
    432c:	7e 83       	std	Y+6, r23	; 0x06
    432e:	8f 83       	std	Y+7, r24	; 0x07
    4330:	98 87       	std	Y+8, r25	; 0x08
  v_g_ecef[2] = (-1 * GM * r_ecef_ash[2] * (1 + 3 * R2 - R4)) / R3;//
    4332:	21 ef       	ldi	r18, 0xF1	; 241
    4334:	39 e4       	ldi	r19, 0x49	; 73
    4336:	45 eb       	ldi	r20, 0xB5	; 181
    4338:	57 ed       	ldi	r21, 0xD7	; 215
    433a:	c5 01       	movw	r24, r10
    433c:	b4 01       	movw	r22, r8
    433e:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    4342:	2b 01       	movw	r4, r22
    4344:	3c 01       	movw	r6, r24
    4346:	20 e0       	ldi	r18, 0x00	; 0
    4348:	30 e0       	ldi	r19, 0x00	; 0
    434a:	40 e4       	ldi	r20, 0x40	; 64
    434c:	50 e4       	ldi	r21, 0x40	; 64
    434e:	6d 85       	ldd	r22, Y+13	; 0x0d
    4350:	7e 85       	ldd	r23, Y+14	; 0x0e
    4352:	8f 85       	ldd	r24, Y+15	; 0x0f
    4354:	98 89       	ldd	r25, Y+16	; 0x10
    4356:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    435a:	20 e0       	ldi	r18, 0x00	; 0
    435c:	30 e0       	ldi	r19, 0x00	; 0
    435e:	40 e8       	ldi	r20, 0x80	; 128
    4360:	5f e3       	ldi	r21, 0x3F	; 63
    4362:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    4366:	29 89       	ldd	r18, Y+17	; 0x11
    4368:	3a 89       	ldd	r19, Y+18	; 0x12
    436a:	4b 89       	ldd	r20, Y+19	; 0x13
    436c:	5c 89       	ldd	r21, Y+20	; 0x14
    436e:	0e 94 8f 2a 	call	0x551e	; 0x551e <__subsf3>
    4372:	9b 01       	movw	r18, r22
    4374:	ac 01       	movw	r20, r24
    4376:	c3 01       	movw	r24, r6
    4378:	b2 01       	movw	r22, r4
    437a:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    437e:	a7 01       	movw	r20, r14
    4380:	96 01       	movw	r18, r12
    4382:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    4386:	69 87       	std	Y+9, r22	; 0x09
    4388:	7a 87       	std	Y+10, r23	; 0x0a
    438a:	8b 87       	std	Y+11, r24	; 0x0b
    438c:	9c 87       	std	Y+12, r25	; 0x0c
  
  ecef2eci(v_g_ecef, v_g);
    438e:	b8 01       	movw	r22, r16
    4390:	ce 01       	movw	r24, r28
    4392:	01 96       	adiw	r24, 0x01	; 1
    4394:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <ecef2eci>
	 sent[i] = (uint8_t)((v_g_ecef[i]));
	 transmit_UART0(sent[i]);
 }*/
  
  
}
    4398:	64 96       	adiw	r28, 0x14	; 20
    439a:	0f b6       	in	r0, 0x3f	; 63
    439c:	f8 94       	cli
    439e:	de bf       	out	0x3e, r29	; 62
    43a0:	0f be       	out	0x3f, r0	; 63
    43a2:	cd bf       	out	0x3d, r28	; 61
    43a4:	df 91       	pop	r29
    43a6:	cf 91       	pop	r28
    43a8:	1f 91       	pop	r17
    43aa:	0f 91       	pop	r16
    43ac:	ff 90       	pop	r15
    43ae:	ef 90       	pop	r14
    43b0:	df 90       	pop	r13
    43b2:	cf 90       	pop	r12
    43b4:	bf 90       	pop	r11
    43b6:	af 90       	pop	r10
    43b8:	9f 90       	pop	r9
    43ba:	8f 90       	pop	r8
    43bc:	7f 90       	pop	r7
    43be:	6f 90       	pop	r6
    43c0:	5f 90       	pop	r5
    43c2:	4f 90       	pop	r4
    43c4:	08 95       	ret

000043c6 <sgp_orbit_propagator>:

void sgp_orbit_propagator(void)
{
    43c6:	9f 92       	push	r9
    43c8:	af 92       	push	r10
    43ca:	bf 92       	push	r11
    43cc:	cf 92       	push	r12
    43ce:	df 92       	push	r13
    43d0:	ef 92       	push	r14
    43d2:	ff 92       	push	r15
    43d4:	0f 93       	push	r16
    43d6:	1f 93       	push	r17
    43d8:	cf 93       	push	r28
    43da:	df 93       	push	r29
    43dc:	cd b7       	in	r28, 0x3d	; 61
    43de:	de b7       	in	r29, 0x3e	; 62
    43e0:	68 97       	sbiw	r28, 0x18	; 24
    43e2:	0f b6       	in	r0, 0x3f	; 63
    43e4:	f8 94       	cli
    43e6:	de bf       	out	0x3e, r29	; 62
    43e8:	0f be       	out	0x3f, r0	; 63
    43ea:	cd bf       	out	0x3d, r28	; 61
    43ec:	4a e0       	ldi	r20, 0x0A	; 10
    43ee:	94 2e       	mov	r9, r20
    43f0:	ce 01       	movw	r24, r28
    43f2:	49 96       	adiw	r24, 0x19	; 25
    43f4:	5c 01       	movw	r10, r24
  float delta_t = ((float)FRAME_TIME) / 10;
  uint8_t i, j;
  
  for(i = 0; i < 10; i++)
  {
    sgp_get_acceleration(v_g);
    43f6:	ce 01       	movw	r24, r28
    43f8:	0d 96       	adiw	r24, 0x0d	; 13
    43fa:	ef de       	rcall	.-546    	; 0x41da <sgp_get_acceleration>
    
    copy_vector(v_v, v_v_old);
    43fc:	be 01       	movw	r22, r28
    43fe:	6f 5f       	subi	r22, 0xFF	; 255
    4400:	7f 4f       	sbci	r23, 0xFF	; 255
    4402:	89 e7       	ldi	r24, 0x79	; 121
    4404:	94 e0       	ldi	r25, 0x04	; 4
    4406:	0b db       	rcall	.-2538   	; 0x3a1e <copy_vector>
    4408:	fe 01       	movw	r30, r28
    440a:	3d 96       	adiw	r30, 0x0d	; 13
    440c:	7f 01       	movw	r14, r30
    440e:	09 e7       	ldi	r16, 0x79	; 121
    4410:	14 e0       	ldi	r17, 0x04	; 4
    
    for(j = 0; j < 3; j++)
      v_v[j] += v_g[j] * delta_t;
    4412:	f7 01       	movw	r30, r14
    4414:	61 91       	ld	r22, Z+
    4416:	71 91       	ld	r23, Z+
    4418:	81 91       	ld	r24, Z+
    441a:	91 91       	ld	r25, Z+
    441c:	7f 01       	movw	r14, r30
    441e:	2d ec       	ldi	r18, 0xCD	; 205
    4420:	3c ec       	ldi	r19, 0xCC	; 204
    4422:	4c e4       	ldi	r20, 0x4C	; 76
    4424:	5e e3       	ldi	r21, 0x3E	; 62
    4426:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    442a:	9b 01       	movw	r18, r22
    442c:	ac 01       	movw	r20, r24
    442e:	f8 01       	movw	r30, r16
    4430:	60 81       	ld	r22, Z
    4432:	71 81       	ldd	r23, Z+1	; 0x01
    4434:	82 81       	ldd	r24, Z+2	; 0x02
    4436:	93 81       	ldd	r25, Z+3	; 0x03
    4438:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    443c:	f8 01       	movw	r30, r16
    443e:	61 93       	st	Z+, r22
    4440:	71 93       	st	Z+, r23
    4442:	81 93       	st	Z+, r24
    4444:	91 93       	st	Z+, r25
    4446:	8f 01       	movw	r16, r30
  {
    sgp_get_acceleration(v_g);
    
    copy_vector(v_v, v_v_old);
    
    for(j = 0; j < 3; j++)
    4448:	ea 14       	cp	r14, r10
    444a:	fb 04       	cpc	r15, r11
    444c:	11 f7       	brne	.-60     	; 0x4412 <sgp_orbit_propagator+0x4c>
    444e:	ce 01       	movw	r24, r28
    4450:	01 96       	adiw	r24, 0x01	; 1
    4452:	6c 01       	movw	r12, r24
    4454:	31 e9       	ldi	r19, 0x91	; 145
    4456:	e3 2e       	mov	r14, r19
    4458:	34 e0       	ldi	r19, 0x04	; 4
    445a:	f3 2e       	mov	r15, r19
    445c:	09 e7       	ldi	r16, 0x79	; 121
    445e:	14 e0       	ldi	r17, 0x04	; 4
      v_v[j] += v_g[j] * delta_t;
    
    for(j = 0; j < 3; j++)
      v_r[j] += ((v_v[j] + v_v_old[j]) / 2) * delta_t;// this is also different from controls
    4460:	f8 01       	movw	r30, r16
    4462:	61 91       	ld	r22, Z+
    4464:	71 91       	ld	r23, Z+
    4466:	81 91       	ld	r24, Z+
    4468:	91 91       	ld	r25, Z+
    446a:	8f 01       	movw	r16, r30
    446c:	f6 01       	movw	r30, r12
    446e:	21 91       	ld	r18, Z+
    4470:	31 91       	ld	r19, Z+
    4472:	41 91       	ld	r20, Z+
    4474:	51 91       	ld	r21, Z+
    4476:	6f 01       	movw	r12, r30
    4478:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    447c:	20 e0       	ldi	r18, 0x00	; 0
    447e:	30 e0       	ldi	r19, 0x00	; 0
    4480:	40 e0       	ldi	r20, 0x00	; 0
    4482:	5f e3       	ldi	r21, 0x3F	; 63
    4484:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    4488:	2d ec       	ldi	r18, 0xCD	; 205
    448a:	3c ec       	ldi	r19, 0xCC	; 204
    448c:	4c e4       	ldi	r20, 0x4C	; 76
    448e:	5e e3       	ldi	r21, 0x3E	; 62
    4490:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    4494:	9b 01       	movw	r18, r22
    4496:	ac 01       	movw	r20, r24
    4498:	f7 01       	movw	r30, r14
    449a:	60 81       	ld	r22, Z
    449c:	71 81       	ldd	r23, Z+1	; 0x01
    449e:	82 81       	ldd	r24, Z+2	; 0x02
    44a0:	93 81       	ldd	r25, Z+3	; 0x03
    44a2:	0e 94 90 2a 	call	0x5520	; 0x5520 <__addsf3>
    44a6:	f7 01       	movw	r30, r14
    44a8:	61 93       	st	Z+, r22
    44aa:	71 93       	st	Z+, r23
    44ac:	81 93       	st	Z+, r24
    44ae:	91 93       	st	Z+, r25
    44b0:	7f 01       	movw	r14, r30
    copy_vector(v_v, v_v_old);
    
    for(j = 0; j < 3; j++)
      v_v[j] += v_g[j] * delta_t;
    
    for(j = 0; j < 3; j++)
    44b2:	f4 e0       	ldi	r31, 0x04	; 4
    44b4:	05 38       	cpi	r16, 0x85	; 133
    44b6:	1f 07       	cpc	r17, r31
    44b8:	99 f6       	brne	.-90     	; 0x4460 <sgp_orbit_propagator+0x9a>
    44ba:	9a 94       	dec	r9
  vector v_g;
  vector v_v_old;
  float delta_t = ((float)FRAME_TIME) / 10;
  uint8_t i, j;
  
  for(i = 0; i < 10; i++)
    44bc:	09 f0       	breq	.+2      	; 0x44c0 <sgp_orbit_propagator+0xfa>
    44be:	9b cf       	rjmp	.-202    	; 0x43f6 <sgp_orbit_propagator+0x30>
	  b = (uint8_t)(send[i]>>8);
	  transmit_UART0(a);
	  transmit_UART0(b);
  }*/
  
}
    44c0:	68 96       	adiw	r28, 0x18	; 24
    44c2:	0f b6       	in	r0, 0x3f	; 63
    44c4:	f8 94       	cli
    44c6:	de bf       	out	0x3e, r29	; 62
    44c8:	0f be       	out	0x3f, r0	; 63
    44ca:	cd bf       	out	0x3d, r28	; 61
    44cc:	df 91       	pop	r29
    44ce:	cf 91       	pop	r28
    44d0:	1f 91       	pop	r17
    44d2:	0f 91       	pop	r16
    44d4:	ff 90       	pop	r15
    44d6:	ef 90       	pop	r14
    44d8:	df 90       	pop	r13
    44da:	cf 90       	pop	r12
    44dc:	bf 90       	pop	r11
    44de:	af 90       	pop	r10
    44e0:	9f 90       	pop	r9
    44e2:	08 95       	ret

000044e4 <sun_vector_estimator>:

void sun_vector_estimator(vector v_sun_o)
{
    44e4:	4f 92       	push	r4
    44e6:	5f 92       	push	r5
    44e8:	6f 92       	push	r6
    44ea:	7f 92       	push	r7
    44ec:	8f 92       	push	r8
    44ee:	9f 92       	push	r9
    44f0:	af 92       	push	r10
    44f2:	bf 92       	push	r11
    44f4:	cf 92       	push	r12
    44f6:	df 92       	push	r13
    44f8:	ef 92       	push	r14
    44fa:	ff 92       	push	r15
    44fc:	0f 93       	push	r16
    44fe:	1f 93       	push	r17
    4500:	cf 93       	push	r28
    4502:	df 93       	push	r29
    4504:	cd b7       	in	r28, 0x3d	; 61
    4506:	de b7       	in	r29, 0x3e	; 62
    4508:	2c 97       	sbiw	r28, 0x0c	; 12
    450a:	0f b6       	in	r0, 0x3f	; 63
    450c:	f8 94       	cli
    450e:	de bf       	out	0x3e, r29	; 62
    4510:	0f be       	out	0x3f, r0	; 63
    4512:	cd bf       	out	0x3d, r28	; 61
    4514:	8c 01       	movw	r16, r24
  float time_in_days = ((float)seconds_since_equinox  / 86400);///////////////////////////////////////////////// dekhna padega
    4516:	20 91 cb 04 	lds	r18, 0x04CB
    451a:	30 91 cc 04 	lds	r19, 0x04CC
    451e:	40 91 cd 04 	lds	r20, 0x04CD
    4522:	50 91 ce 04 	lds	r21, 0x04CE
    4526:	60 91 cf 04 	lds	r22, 0x04CF
    452a:	70 91 d0 04 	lds	r23, 0x04D0
    452e:	80 91 d1 04 	lds	r24, 0x04D1
    4532:	90 91 d2 04 	lds	r25, 0x04D2
    4536:	0e 94 4a 2c 	call	0x5894	; 0x5894 <__floatundisf>
    453a:	20 e0       	ldi	r18, 0x00	; 0
    453c:	30 ec       	ldi	r19, 0xC0	; 192
    453e:	48 ea       	ldi	r20, 0xA8	; 168
    4540:	57 e4       	ldi	r21, 0x47	; 71
    4542:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
  float lambda = (2 * M_PI * time_in_days) / 365.256363;
    4546:	2b ed       	ldi	r18, 0xDB	; 219
    4548:	3f e0       	ldi	r19, 0x0F	; 15
    454a:	49 ec       	ldi	r20, 0xC9	; 201
    454c:	50 e4       	ldi	r21, 0x40	; 64
    454e:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    4552:	21 ed       	ldi	r18, 0xD1	; 209
    4554:	30 ea       	ldi	r19, 0xA0	; 160
    4556:	46 eb       	ldi	r20, 0xB6	; 182
    4558:	53 e4       	ldi	r21, 0x43	; 67
    455a:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    455e:	4b 01       	movw	r8, r22
    4560:	5c 01       	movw	r10, r24
  float delta, alpha;
  vector v_sun_eci;
  delta =   asin(sin(EPSILON) * sin(lambda));
    4562:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <sin>
    4566:	20 e9       	ldi	r18, 0x90	; 144
    4568:	3e e2       	ldi	r19, 0x2E	; 46
    456a:	4c ec       	ldi	r20, 0xCC	; 204
    456c:	5e e3       	ldi	r21, 0x3E	; 62
    456e:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    4572:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <asin>
    4576:	6b 01       	movw	r12, r22
    4578:	7c 01       	movw	r14, r24
  alpha = acos(cos(lambda)/cos(delta));
    457a:	c5 01       	movw	r24, r10
    457c:	b4 01       	movw	r22, r8
    457e:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <cos>
    4582:	2b 01       	movw	r4, r22
    4584:	3c 01       	movw	r6, r24
    4586:	c7 01       	movw	r24, r14
    4588:	b6 01       	movw	r22, r12
    458a:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <cos>
    458e:	4b 01       	movw	r8, r22
    4590:	5c 01       	movw	r10, r24
    4592:	9b 01       	movw	r18, r22
    4594:	ac 01       	movw	r20, r24
    4596:	c3 01       	movw	r24, r6
    4598:	b2 01       	movw	r22, r4
    459a:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    459e:	b1 d7       	rcall	.+3938   	; 0x5502 <acos>
    45a0:	2b 01       	movw	r4, r22
    45a2:	3c 01       	movw	r6, r24
  
  if (delta>=0)
    45a4:	20 e0       	ldi	r18, 0x00	; 0
    45a6:	30 e0       	ldi	r19, 0x00	; 0
    45a8:	a9 01       	movw	r20, r18
    45aa:	c7 01       	movw	r24, r14
    45ac:	b6 01       	movw	r22, r12
    45ae:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__gesf2>
    45b2:	87 ff       	sbrs	r24, 7
    45b4:	09 c0       	rjmp	.+18     	; 0x45c8 <sun_vector_estimator+0xe4>
  {
	  alpha=alpha;
  }
  else
  alpha= 2*M_PI-alpha;
    45b6:	a3 01       	movw	r20, r6
    45b8:	92 01       	movw	r18, r4
    45ba:	6b ed       	ldi	r22, 0xDB	; 219
    45bc:	7f e0       	ldi	r23, 0x0F	; 15
    45be:	89 ec       	ldi	r24, 0xC9	; 201
    45c0:	90 e4       	ldi	r25, 0x40	; 64
    45c2:	ad d7       	rcall	.+3930   	; 0x551e <__subsf3>
    45c4:	2b 01       	movw	r4, r22
    45c6:	3c 01       	movw	r6, r24
  
  v_sun_eci[0] = cos(delta) * cos(alpha);//cosdelta*cosalpha;//cos(delta) * cos(alpha);
    45c8:	c3 01       	movw	r24, r6
    45ca:	b2 01       	movw	r22, r4
    45cc:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <cos>
    45d0:	9b 01       	movw	r18, r22
    45d2:	ac 01       	movw	r20, r24
    45d4:	c5 01       	movw	r24, r10
    45d6:	b4 01       	movw	r22, r8
    45d8:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    45dc:	69 83       	std	Y+1, r22	; 0x01
    45de:	7a 83       	std	Y+2, r23	; 0x02
    45e0:	8b 83       	std	Y+3, r24	; 0x03
    45e2:	9c 83       	std	Y+4, r25	; 0x04
  v_sun_eci[1] = cos(delta) * sin(alpha);//cosdelta*sinalpha;//cos(delta) * sin(alpha);
    45e4:	c3 01       	movw	r24, r6
    45e6:	b2 01       	movw	r22, r4
    45e8:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <sin>
    45ec:	9b 01       	movw	r18, r22
    45ee:	ac 01       	movw	r20, r24
    45f0:	c5 01       	movw	r24, r10
    45f2:	b4 01       	movw	r22, r8
    45f4:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    45f8:	6d 83       	std	Y+5, r22	; 0x05
    45fa:	7e 83       	std	Y+6, r23	; 0x06
    45fc:	8f 83       	std	Y+7, r24	; 0x07
    45fe:	98 87       	std	Y+8, r25	; 0x08
  v_sun_eci[2] = sin(delta);//sindelta;//sin(delta);
    4600:	c7 01       	movw	r24, r14
    4602:	b6 01       	movw	r22, r12
    4604:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <sin>
    4608:	69 87       	std	Y+9, r22	; 0x09
    460a:	7a 87       	std	Y+10, r23	; 0x0a
    460c:	8b 87       	std	Y+11, r24	; 0x0b
    460e:	9c 87       	std	Y+12, r25	; 0x0c
  frtm = frtm+0.1;
    4610:	2d ec       	ldi	r18, 0xCD	; 205
    4612:	3c ec       	ldi	r19, 0xCC	; 204
    4614:	4c ec       	ldi	r20, 0xCC	; 204
    4616:	5d e3       	ldi	r21, 0x3D	; 61
    4618:	60 91 75 04 	lds	r22, 0x0475
    461c:	70 91 76 04 	lds	r23, 0x0476
    4620:	80 91 77 04 	lds	r24, 0x0477
    4624:	90 91 78 04 	lds	r25, 0x0478
    4628:	7b d7       	rcall	.+3830   	; 0x5520 <__addsf3>
    462a:	60 93 75 04 	sts	0x0475, r22
    462e:	70 93 76 04 	sts	0x0476, r23
    4632:	80 93 77 04 	sts	0x0477, r24
    4636:	90 93 78 04 	sts	0x0478, r25
  eci2orbit(v_r, v_v, v_sun_eci, v_sun_o);
    463a:	98 01       	movw	r18, r16
    463c:	ae 01       	movw	r20, r28
    463e:	4f 5f       	subi	r20, 0xFF	; 255
    4640:	5f 4f       	sbci	r21, 0xFF	; 255
    4642:	69 e7       	ldi	r22, 0x79	; 121
    4644:	74 e0       	ldi	r23, 0x04	; 4
    4646:	81 e9       	ldi	r24, 0x91	; 145
    4648:	94 e0       	ldi	r25, 0x04	; 4
    464a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <eci2orbit>
	 transmit_UART0(a);
	 transmit_UART0(b);
	 //transmit_UART0(sen);
 }
 */
}
    464e:	2c 96       	adiw	r28, 0x0c	; 12
    4650:	0f b6       	in	r0, 0x3f	; 63
    4652:	f8 94       	cli
    4654:	de bf       	out	0x3e, r29	; 62
    4656:	0f be       	out	0x3f, r0	; 63
    4658:	cd bf       	out	0x3d, r28	; 61
    465a:	df 91       	pop	r29
    465c:	cf 91       	pop	r28
    465e:	1f 91       	pop	r17
    4660:	0f 91       	pop	r16
    4662:	ff 90       	pop	r15
    4664:	ef 90       	pop	r14
    4666:	df 90       	pop	r13
    4668:	cf 90       	pop	r12
    466a:	bf 90       	pop	r11
    466c:	af 90       	pop	r10
    466e:	9f 90       	pop	r9
    4670:	8f 90       	pop	r8
    4672:	7f 90       	pop	r7
    4674:	6f 90       	pop	r6
    4676:	5f 90       	pop	r5
    4678:	4f 90       	pop	r4
    467a:	08 95       	ret

0000467c <magnetic_field_estimator>:

void magnetic_field_estimator(vector v_B_o)
{
    467c:	af 92       	push	r10
    467e:	bf 92       	push	r11
    4680:	cf 92       	push	r12
    4682:	df 92       	push	r13
    4684:	ef 92       	push	r14
    4686:	ff 92       	push	r15
    4688:	0f 93       	push	r16
    468a:	1f 93       	push	r17
    468c:	cf 93       	push	r28
    468e:	df 93       	push	r29
    4690:	cd b7       	in	r28, 0x3d	; 61
    4692:	de b7       	in	r29, 0x3e	; 62
    4694:	e0 97       	sbiw	r28, 0x30	; 48
    4696:	0f b6       	in	r0, 0x3f	; 63
    4698:	f8 94       	cli
    469a:	de bf       	out	0x3e, r29	; 62
    469c:	0f be       	out	0x3f, r0	; 63
    469e:	cd bf       	out	0x3d, r28	; 61
    46a0:	5c 01       	movw	r10, r24
  float time_in_years = 2015 + (float)seconds_since_pivot / SECONDS_IN_YEAR;
    46a2:	20 91 c3 04 	lds	r18, 0x04C3
    46a6:	30 91 c4 04 	lds	r19, 0x04C4
    46aa:	40 91 c5 04 	lds	r20, 0x04C5
    46ae:	50 91 c6 04 	lds	r21, 0x04C6
    46b2:	60 91 c7 04 	lds	r22, 0x04C7
    46b6:	70 91 c8 04 	lds	r23, 0x04C8
    46ba:	80 91 c9 04 	lds	r24, 0x04C9
    46be:	90 91 ca 04 	lds	r25, 0x04CA
    46c2:	0e 94 4a 2c 	call	0x5894	; 0x5894 <__floatundisf>
    46c6:	20 ec       	ldi	r18, 0xC0	; 192
    46c8:	39 e9       	ldi	r19, 0x99	; 153
    46ca:	40 ef       	ldi	r20, 0xF0	; 240
    46cc:	5b e4       	ldi	r21, 0x4B	; 75
    46ce:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__divsf3>
    46d2:	20 e0       	ldi	r18, 0x00	; 0
    46d4:	30 ee       	ldi	r19, 0xE0	; 224
    46d6:	4b ef       	ldi	r20, 0xFB	; 251
    46d8:	54 e4       	ldi	r21, 0x44	; 68
    46da:	22 d7       	rcall	.+3652   	; 0x5520 <__addsf3>
    46dc:	6b 01       	movw	r12, r22
    46de:	7c 01       	movw	r14, r24
  vector v_temp, v_r_lla, v_B_ned, v_B_eci;
  
  eci2ecef(v_r, v_temp);
    46e0:	be 01       	movw	r22, r28
    46e2:	6b 5d       	subi	r22, 0xDB	; 219
    46e4:	7f 4f       	sbci	r23, 0xFF	; 255
    46e6:	81 e9       	ldi	r24, 0x91	; 145
    46e8:	94 e0       	ldi	r25, 0x04	; 4
    46ea:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <eci2ecef>
  ecef2lla(v_temp, v_r_lla);// LLA is need
    46ee:	be 01       	movw	r22, r28
    46f0:	67 5e       	subi	r22, 0xE7	; 231
    46f2:	7f 4f       	sbci	r23, 0xFF	; 255
    46f4:	ce 01       	movw	r24, r28
    46f6:	85 96       	adiw	r24, 0x25	; 37
    46f8:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <ecef2lla>
  ///* Save LLA vector for use in communications check routine
  copy_vector(v_r_lla, v_sat);// why is this required when ,lat long alt coming from GPS
    46fc:	6a e4       	ldi	r22, 0x4A	; 74
    46fe:	75 e0       	ldi	r23, 0x05	; 5
    4700:	ce 01       	movw	r24, r28
    4702:	49 96       	adiw	r24, 0x19	; 25
    4704:	8c d9       	rcall	.-3304   	; 0x3a1e <copy_vector>
  
  igrf(v_r_lla, time_in_years, 8, v_B_ned);// need to check at the end
    4706:	8e 01       	movw	r16, r28
    4708:	03 5f       	subi	r16, 0xF3	; 243
    470a:	1f 4f       	sbci	r17, 0xFF	; 255
    470c:	28 e0       	ldi	r18, 0x08	; 8
    470e:	b7 01       	movw	r22, r14
    4710:	a6 01       	movw	r20, r12
    4712:	ce 01       	movw	r24, r28
    4714:	49 96       	adiw	r24, 0x19	; 25
    4716:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <igrf>
  
  ned2ecef(v_B_ned, v_r_lla, v_temp);
    471a:	ae 01       	movw	r20, r28
    471c:	4b 5d       	subi	r20, 0xDB	; 219
    471e:	5f 4f       	sbci	r21, 0xFF	; 255
    4720:	be 01       	movw	r22, r28
    4722:	67 5e       	subi	r22, 0xE7	; 231
    4724:	7f 4f       	sbci	r23, 0xFF	; 255
    4726:	c8 01       	movw	r24, r16
    4728:	0e 94 11 10 	call	0x2022	; 0x2022 <ned2ecef>
  ecef2eci(v_temp, v_B_eci);
    472c:	be 01       	movw	r22, r28
    472e:	6f 5f       	subi	r22, 0xFF	; 255
    4730:	7f 4f       	sbci	r23, 0xFF	; 255
    4732:	ce 01       	movw	r24, r28
    4734:	85 96       	adiw	r24, 0x25	; 37
    4736:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <ecef2eci>
  eci2orbit(v_r, v_v, v_B_eci, v_B_o); 
    473a:	95 01       	movw	r18, r10
    473c:	ae 01       	movw	r20, r28
    473e:	4f 5f       	subi	r20, 0xFF	; 255
    4740:	5f 4f       	sbci	r21, 0xFF	; 255
    4742:	69 e7       	ldi	r22, 0x79	; 121
    4744:	74 e0       	ldi	r23, 0x04	; 4
    4746:	81 e9       	ldi	r24, 0x91	; 145
    4748:	94 e0       	ldi	r25, 0x04	; 4
    474a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <eci2orbit>
	  sen = (int8_t)st;
	  sen1 = (int8_t)(st>>8);
	  transmit_UART0(sen);
	  transmit_UART0(sen1);
  }*/
}
    474e:	e0 96       	adiw	r28, 0x30	; 48
    4750:	0f b6       	in	r0, 0x3f	; 63
    4752:	f8 94       	cli
    4754:	de bf       	out	0x3e, r29	; 62
    4756:	0f be       	out	0x3f, r0	; 63
    4758:	cd bf       	out	0x3d, r28	; 61
    475a:	df 91       	pop	r29
    475c:	cf 91       	pop	r28
    475e:	1f 91       	pop	r17
    4760:	0f 91       	pop	r16
    4762:	ff 90       	pop	r15
    4764:	ef 90       	pop	r14
    4766:	df 90       	pop	r13
    4768:	cf 90       	pop	r12
    476a:	bf 90       	pop	r11
    476c:	af 90       	pop	r10
    476e:	08 95       	ret

00004770 <light_cal>:
static quaternion q_B_old;
	
static vector v_w_old;

uint8_t light_cal()
{
    4770:	1f 93       	push	r17
    4772:	cf 93       	push	r28
    4774:	df 93       	push	r29
    4776:	ce e0       	ldi	r28, 0x0E	; 14
    4778:	d5 e0       	ldi	r29, 0x05	; 5
	int i;
	 uint8_t light=1,num_dark_sensors = 0;
    477a:	10 e0       	ldi	r17, 0x00	; 0
	 float * sun_adc = (float *)Current_state.ss.read;
	  for(i = 0; i < N_SS; i++)
	  {
		  //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
		  if(sun_adc[i] < (0.5 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
    477c:	69 91       	ld	r22, Y+
    477e:	79 91       	ld	r23, Y+
    4780:	89 91       	ld	r24, Y+
    4782:	99 91       	ld	r25, Y+
    4784:	23 e3       	ldi	r18, 0x33	; 51
    4786:	33 e3       	ldi	r19, 0x33	; 51
    4788:	43 ed       	ldi	r20, 0xD3	; 211
    478a:	5f e3       	ldi	r21, 0x3F	; 63
    478c:	a6 d7       	rcall	.+3916   	; 0x56da <__cmpsf2>
    478e:	87 fd       	sbrc	r24, 7
		  num_dark_sensors++;
    4790:	1f 5f       	subi	r17, 0xFF	; 255
uint8_t light_cal()
{
	int i;
	 uint8_t light=1,num_dark_sensors = 0;
	 float * sun_adc = (float *)Current_state.ss.read;
	  for(i = 0; i < N_SS; i++)
    4792:	85 e0       	ldi	r24, 0x05	; 5
    4794:	c6 32       	cpi	r28, 0x26	; 38
    4796:	d8 07       	cpc	r29, r24
    4798:	89 f7       	brne	.-30     	; 0x477c <light_cal+0xc>
		  //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
		  if(sun_adc[i] < (0.5 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
		  num_dark_sensors++;
		  
	  }
	  if(num_dark_sensors == N_SS)
    479a:	81 e0       	ldi	r24, 0x01	; 1
    479c:	16 30       	cpi	r17, 0x06	; 6
    479e:	21 f0       	breq	.+8      	; 0x47a8 <light_cal+0x38>
	  light = 0;
	 return light;
}
    47a0:	df 91       	pop	r29
    47a2:	cf 91       	pop	r28
    47a4:	1f 91       	pop	r17
    47a6:	08 95       	ret
		  //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
		  if(sun_adc[i] < (0.5 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
		  num_dark_sensors++;
		  
	  }
	  if(num_dark_sensors == N_SS)
    47a8:	80 e0       	ldi	r24, 0x00	; 0
	  light = 0;
	 return light;
}
    47aa:	df 91       	pop	r29
    47ac:	cf 91       	pop	r28
    47ae:	1f 91       	pop	r17
    47b0:	08 95       	ret

000047b2 <quest>:
uint8_t quest(vector v_B_c, vector v_sun_c, quaternion q_triad, uint8_t * p_w_ctrl)
{
    47b2:	2f 92       	push	r2
    47b4:	3f 92       	push	r3
    47b6:	4f 92       	push	r4
    47b8:	5f 92       	push	r5
    47ba:	6f 92       	push	r6
    47bc:	7f 92       	push	r7
    47be:	8f 92       	push	r8
    47c0:	9f 92       	push	r9
    47c2:	af 92       	push	r10
    47c4:	bf 92       	push	r11
    47c6:	cf 92       	push	r12
    47c8:	df 92       	push	r13
    47ca:	ef 92       	push	r14
    47cc:	ff 92       	push	r15
    47ce:	0f 93       	push	r16
    47d0:	1f 93       	push	r17
    47d2:	cf 93       	push	r28
    47d4:	df 93       	push	r29
    47d6:	cd b7       	in	r28, 0x3d	; 61
    47d8:	de b7       	in	r29, 0x3e	; 62
    47da:	cc 57       	subi	r28, 0x7C	; 124
    47dc:	d1 09       	sbc	r29, r1
    47de:	0f b6       	in	r0, 0x3f	; 63
    47e0:	f8 94       	cli
    47e2:	de bf       	out	0x3e, r29	; 62
    47e4:	0f be       	out	0x3f, r0	; 63
    47e6:	cd bf       	out	0x3d, r28	; 61
    47e8:	3c 01       	movw	r6, r24
    47ea:	8b 01       	movw	r16, r22
    47ec:	e1 96       	adiw	r28, 0x31	; 49
    47ee:	5f af       	std	Y+63, r21	; 0x3f
    47f0:	4e af       	std	Y+62, r20	; 0x3e
    47f2:	e1 97       	sbiw	r28, 0x31	; 49
    47f4:	69 01       	movw	r12, r18
    47f6:	8e e0       	ldi	r24, 0x0E	; 14
    47f8:	e8 2e       	mov	r14, r24
    47fa:	85 e0       	ldi	r24, 0x05	; 5
    47fc:	f8 2e       	mov	r15, r24
  //uint8_t w_ctrl = &(p_w_ctrl);
  static uint16_t time_since_light = 0;
  static uint8_t light_prev = 1;
  float * sun_adc = (float *)Current_state.ss.read;
  uint8_t light = 1, num_dark_sensors = 0, i, j;
    47fe:	b1 2c       	mov	r11, r1
  vector v_triad;
  float mu, nu, rho, k, triad;
  for(i = 0; i < N_SS; i++)
  {
    //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
    if(sun_adc[i] < (0.5 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
    4800:	f7 01       	movw	r30, r14
    4802:	61 91       	ld	r22, Z+
    4804:	71 91       	ld	r23, Z+
    4806:	81 91       	ld	r24, Z+
    4808:	91 91       	ld	r25, Z+
    480a:	7f 01       	movw	r14, r30
    480c:	23 e3       	ldi	r18, 0x33	; 51
    480e:	33 e3       	ldi	r19, 0x33	; 51
    4810:	43 ed       	ldi	r20, 0xD3	; 211
    4812:	5f e3       	ldi	r21, 0x3F	; 63
    4814:	62 d7       	rcall	.+3780   	; 0x56da <__cmpsf2>
    4816:	87 fd       	sbrc	r24, 7
      num_dark_sensors++;
    4818:	b3 94       	inc	r11
  uint8_t light = 1, num_dark_sensors = 0, i, j;
  vector v_sun_m, v_B_m, v_cross_m, v_cross_c, v_mc_cross, v_mc_add;
  vector v_temp1, v_temp2;
  vector v_triad;
  float mu, nu, rho, k, triad;
  for(i = 0; i < N_SS; i++)
    481a:	f6 e2       	ldi	r31, 0x26	; 38
    481c:	ef 16       	cp	r14, r31
    481e:	f5 e0       	ldi	r31, 0x05	; 5
    4820:	ff 06       	cpc	r15, r31
    4822:	71 f7       	brne	.-36     	; 0x4800 <quest+0x4e>
  {
    //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
    if(sun_adc[i] < (0.5 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
      num_dark_sensors++;
  }
  if(num_dark_sensors == N_SS)
    4824:	26 e0       	ldi	r18, 0x06	; 6
    4826:	b2 16       	cp	r11, r18
    4828:	09 f4       	brne	.+2      	; 0x482c <quest+0x7a>
    482a:	5c c2       	rjmp	.+1208   	; 0x4ce4 <quest+0x532>
    light = 0;
  
  if(light)
  {
    if(!*p_w_ctrl)
    482c:	f6 01       	movw	r30, r12
    482e:	80 81       	ld	r24, Z
    4830:	81 11       	cpse	r24, r1
    4832:	0d c0       	rjmp	.+26     	; 0x484e <quest+0x9c>
    {
      time_since_light += FRAME_TIME;
    4834:	80 91 9d 04 	lds	r24, 0x049D
    4838:	90 91 9e 04 	lds	r25, 0x049E
    483c:	02 96       	adiw	r24, 0x02	; 2
    483e:	90 93 9e 04 	sts	0x049E, r25
    4842:	80 93 9d 04 	sts	0x049D, r24
      if(time_since_light == 300)
    4846:	8c 32       	cpi	r24, 0x2C	; 44
    4848:	91 40       	sbci	r25, 0x01	; 1
    484a:	09 f4       	brne	.+2      	; 0x484e <quest+0x9c>
    484c:	71 c2       	rjmp	.+1250   	; 0x4d30 <quest+0x57e>
        *p_w_ctrl = 1;
    }
    
    if(light_prev == 0)
    484e:	80 91 14 01 	lds	r24, 0x0114
    4852:	81 11       	cpse	r24, r1
    4854:	06 c0       	rjmp	.+12     	; 0x4862 <quest+0xb0>
    {
      *p_w_ctrl = 0;
    4856:	f6 01       	movw	r30, r12
    4858:	10 82       	st	Z, r1
      time_since_light = 0;
    485a:	10 92 9e 04 	sts	0x049E, r1
    485e:	10 92 9d 04 	sts	0x049D, r1
    }
    
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    4862:	c0 90 0e 05 	lds	r12, 0x050E
    4866:	d0 90 0f 05 	lds	r13, 0x050F
    486a:	e0 90 10 05 	lds	r14, 0x0510
    486e:	f0 90 11 05 	lds	r15, 0x0511
    4872:	80 90 12 05 	lds	r8, 0x0512
    4876:	90 90 13 05 	lds	r9, 0x0513
    487a:	a0 90 14 05 	lds	r10, 0x0514
    487e:	b0 90 15 05 	lds	r11, 0x0515
    4882:	a5 01       	movw	r20, r10
    4884:	94 01       	movw	r18, r8
    4886:	c7 01       	movw	r24, r14
    4888:	b6 01       	movw	r22, r12
    488a:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__gesf2>
        v_sun_m[i] = (float)sun_adc[j];
    488e:	1e 01       	movw	r2, r28
    4890:	f1 e6       	ldi	r31, 0x61	; 97
    4892:	2f 0e       	add	r2, r31
    4894:	31 1c       	adc	r3, r1
    }
    
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    4896:	18 16       	cp	r1, r24
    4898:	0c f4       	brge	.+2      	; 0x489c <quest+0xea>
    489a:	1e c2       	rjmp	.+1084   	; 0x4cd8 <quest+0x526>
        v_sun_m[i] = (float)sun_adc[j];
      else
        v_sun_m[i] = -1 * (float)sun_adc[j + 1];
    489c:	b7 fa       	bst	r11, 7
    489e:	b0 94       	com	r11
    48a0:	b7 f8       	bld	r11, 7
    48a2:	b0 94       	com	r11
    48a4:	f1 01       	movw	r30, r2
    48a6:	80 82       	st	Z, r8
    48a8:	91 82       	std	Z+1, r9	; 0x01
    48aa:	a2 82       	std	Z+2, r10	; 0x02
    48ac:	b3 82       	std	Z+3, r11	; 0x03
    }
    
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    48ae:	c0 90 16 05 	lds	r12, 0x0516
    48b2:	d0 90 17 05 	lds	r13, 0x0517
    48b6:	e0 90 18 05 	lds	r14, 0x0518
    48ba:	f0 90 19 05 	lds	r15, 0x0519
    48be:	80 90 1a 05 	lds	r8, 0x051A
    48c2:	90 90 1b 05 	lds	r9, 0x051B
    48c6:	a0 90 1c 05 	lds	r10, 0x051C
    48ca:	b0 90 1d 05 	lds	r11, 0x051D
    48ce:	a5 01       	movw	r20, r10
    48d0:	94 01       	movw	r18, r8
    48d2:	c7 01       	movw	r24, r14
    48d4:	b6 01       	movw	r22, r12
    48d6:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__gesf2>
    48da:	18 16       	cp	r1, r24
    48dc:	0c f4       	brge	.+2      	; 0x48e0 <quest+0x12e>
    48de:	22 c2       	rjmp	.+1092   	; 0x4d24 <quest+0x572>
        v_sun_m[i] = (float)sun_adc[j];
      else
        v_sun_m[i] = -1 * (float)sun_adc[j + 1];
    48e0:	b7 fa       	bst	r11, 7
    48e2:	b0 94       	com	r11
    48e4:	b7 f8       	bld	r11, 7
    48e6:	b0 94       	com	r11
    48e8:	f1 01       	movw	r30, r2
    48ea:	84 82       	std	Z+4, r8	; 0x04
    48ec:	95 82       	std	Z+5, r9	; 0x05
    48ee:	a6 82       	std	Z+6, r10	; 0x06
    48f0:	b7 82       	std	Z+7, r11	; 0x07
    }
    
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
    48f2:	c0 90 1e 05 	lds	r12, 0x051E
    48f6:	d0 90 1f 05 	lds	r13, 0x051F
    48fa:	e0 90 20 05 	lds	r14, 0x0520
    48fe:	f0 90 21 05 	lds	r15, 0x0521
    4902:	80 90 22 05 	lds	r8, 0x0522
    4906:	90 90 23 05 	lds	r9, 0x0523
    490a:	a0 90 24 05 	lds	r10, 0x0524
    490e:	b0 90 25 05 	lds	r11, 0x0525
    4912:	a5 01       	movw	r20, r10
    4914:	94 01       	movw	r18, r8
    4916:	c7 01       	movw	r24, r14
    4918:	b6 01       	movw	r22, r12
    491a:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__gesf2>
    491e:	18 16       	cp	r1, r24
    4920:	0c f4       	brge	.+2      	; 0x4924 <quest+0x172>
    4922:	fa c1       	rjmp	.+1012   	; 0x4d18 <quest+0x566>
        v_sun_m[i] = (float)sun_adc[j];
      else
        v_sun_m[i] = -1 * (float)sun_adc[j + 1];
    4924:	b7 fa       	bst	r11, 7
    4926:	b0 94       	com	r11
    4928:	b7 f8       	bld	r11, 7
    492a:	b0 94       	com	r11
    492c:	f1 01       	movw	r30, r2
    492e:	80 86       	std	Z+8, r8	; 0x08
    4930:	91 86       	std	Z+9, r9	; 0x09
    4932:	a2 86       	std	Z+10, r10	; 0x0a
    4934:	b3 86       	std	Z+11, r11	; 0x0b
    }
    convert_unit_vector(v_sun_m);
    4936:	c1 01       	movw	r24, r2
    4938:	f2 da       	rcall	.-2588   	; 0x3f1e <convert_unit_vector>
	 v_B_m[0] = Current_state.mm.B_x;
    493a:	80 91 26 05 	lds	r24, 0x0526
    493e:	90 91 27 05 	lds	r25, 0x0527
    4942:	a0 91 28 05 	lds	r26, 0x0528
    4946:	b0 91 29 05 	lds	r27, 0x0529
    494a:	69 96       	adiw	r28, 0x19	; 25
    494c:	8c af       	std	Y+60, r24	; 0x3c
    494e:	9d af       	std	Y+61, r25	; 0x3d
    4950:	ae af       	std	Y+62, r26	; 0x3e
    4952:	bf af       	std	Y+63, r27	; 0x3f
    4954:	69 97       	sbiw	r28, 0x19	; 25
	 v_B_m[1] = Current_state.mm.B_y;
    4956:	80 91 2a 05 	lds	r24, 0x052A
    495a:	90 91 2b 05 	lds	r25, 0x052B
    495e:	a0 91 2c 05 	lds	r26, 0x052C
    4962:	b0 91 2d 05 	lds	r27, 0x052D
    4966:	6d 96       	adiw	r28, 0x1d	; 29
    4968:	8c af       	std	Y+60, r24	; 0x3c
    496a:	9d af       	std	Y+61, r25	; 0x3d
    496c:	ae af       	std	Y+62, r26	; 0x3e
    496e:	bf af       	std	Y+63, r27	; 0x3f
    4970:	6d 97       	sbiw	r28, 0x1d	; 29
	 v_B_m[2] = Current_state.mm.B_z;
    4972:	80 91 2e 05 	lds	r24, 0x052E
    4976:	90 91 2f 05 	lds	r25, 0x052F
    497a:	a0 91 30 05 	lds	r26, 0x0530
    497e:	b0 91 31 05 	lds	r27, 0x0531
    4982:	a1 96       	adiw	r28, 0x21	; 33
    4984:	8c af       	std	Y+60, r24	; 0x3c
    4986:	9d af       	std	Y+61, r25	; 0x3d
    4988:	ae af       	std	Y+62, r26	; 0x3e
    498a:	bf af       	std	Y+63, r27	; 0x3f
    498c:	a1 97       	sbiw	r28, 0x21	; 33
		sen = (int8_t)st;
		sen1 = (int8_t)(st>>8);
		transmit_UART0(sen);
		transmit_UART0(sen1);
	}*/
    vector_cross_product(v_B_m, v_sun_m, v_cross_m);
    498e:	ae 01       	movw	r20, r28
    4990:	47 5b       	subi	r20, 0xB7	; 183
    4992:	5f 4f       	sbci	r21, 0xFF	; 255
    4994:	b1 01       	movw	r22, r2
    4996:	ce 01       	movw	r24, r28
    4998:	8b 5a       	subi	r24, 0xAB	; 171
    499a:	9f 4f       	sbci	r25, 0xFF	; 255
    499c:	e9 d9       	rcall	.-3118   	; 0x3d70 <vector_cross_product>
    convert_unit_vector(v_cross_m);
    499e:	ce 01       	movw	r24, r28
    49a0:	87 5b       	subi	r24, 0xB7	; 183
    49a2:	9f 4f       	sbci	r25, 0xFF	; 255
    49a4:	bc da       	rcall	.-2696   	; 0x3f1e <convert_unit_vector>
    
    vector_cross_product(v_B_c, v_sun_c, v_cross_c);
    49a6:	ce 01       	movw	r24, r28
    49a8:	cd 96       	adiw	r24, 0x3d	; 61
    49aa:	af 96       	adiw	r28, 0x2f	; 47
    49ac:	9f af       	std	Y+63, r25	; 0x3f
    49ae:	8e af       	std	Y+62, r24	; 0x3e
    49b0:	af 97       	sbiw	r28, 0x2f	; 47
    49b2:	ac 01       	movw	r20, r24
    49b4:	b8 01       	movw	r22, r16
    49b6:	c3 01       	movw	r24, r6
    49b8:	db d9       	rcall	.-3146   	; 0x3d70 <vector_cross_product>
    convert_unit_vector(v_cross_c);
    49ba:	ce 01       	movw	r24, r28
    49bc:	cd 96       	adiw	r24, 0x3d	; 61
    49be:	af da       	rcall	.-2722   	; 0x3f1e <convert_unit_vector>
    for (int i=0;i<3;i=i+1)
    {
	    sent[i] = (uint8_t)((v_cross_c[i]*100));
	    transmit_UART0(sent[i]);
	}*/
    mu = (1 + vector_dot_product(v_cross_m, v_cross_c)) * (MAG_WEIGHT * vector_dot_product(v_B_m, v_B_c) + (1 - MAG_WEIGHT) * vector_dot_product(v_sun_m, v_sun_c));
    49c0:	be 01       	movw	r22, r28
    49c2:	63 5c       	subi	r22, 0xC3	; 195
    49c4:	7f 4f       	sbci	r23, 0xFF	; 255
    49c6:	ce 01       	movw	r24, r28
    49c8:	87 5b       	subi	r24, 0xB7	; 183
    49ca:	9f 4f       	sbci	r25, 0xFF	; 255
    49cc:	05 d9       	rcall	.-3574   	; 0x3bd8 <vector_dot_product>
    49ce:	6b 01       	movw	r12, r22
    49d0:	7c 01       	movw	r14, r24
    49d2:	b3 01       	movw	r22, r6
    49d4:	ce 01       	movw	r24, r28
    49d6:	8b 5a       	subi	r24, 0xAB	; 171
    49d8:	9f 4f       	sbci	r25, 0xFF	; 255
    49da:	fe d8       	rcall	.-3588   	; 0x3bd8 <vector_dot_product>
    49dc:	4b 01       	movw	r8, r22
    49de:	5c 01       	movw	r10, r24
    49e0:	b8 01       	movw	r22, r16
    49e2:	c1 01       	movw	r24, r2
    49e4:	f9 d8       	rcall	.-3598   	; 0x3bd8 <vector_dot_product>
    49e6:	e5 96       	adiw	r28, 0x35	; 53
    49e8:	6c af       	std	Y+60, r22	; 0x3c
    49ea:	7d af       	std	Y+61, r23	; 0x3d
    49ec:	8e af       	std	Y+62, r24	; 0x3e
    49ee:	9f af       	std	Y+63, r25	; 0x3f
    49f0:	e5 97       	sbiw	r28, 0x35	; 53
    49f2:	20 e0       	ldi	r18, 0x00	; 0
    49f4:	30 e0       	ldi	r19, 0x00	; 0
    49f6:	40 e8       	ldi	r20, 0x80	; 128
    49f8:	5f e3       	ldi	r21, 0x3F	; 63
    49fa:	c7 01       	movw	r24, r14
    49fc:	b6 01       	movw	r22, r12
    49fe:	90 d5       	rcall	.+2848   	; 0x5520 <__addsf3>
    4a00:	6b 01       	movw	r12, r22
    4a02:	7c 01       	movw	r14, r24
    4a04:	26 e6       	ldi	r18, 0x66	; 102
    4a06:	36 e6       	ldi	r19, 0x66	; 102
    4a08:	46 e6       	ldi	r20, 0x66	; 102
    4a0a:	5f e3       	ldi	r21, 0x3F	; 63
    4a0c:	c5 01       	movw	r24, r10
    4a0e:	b4 01       	movw	r22, r8
    4a10:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    4a14:	4b 01       	movw	r8, r22
    4a16:	5c 01       	movw	r10, r24
    4a18:	20 ed       	ldi	r18, 0xD0	; 208
    4a1a:	3c ec       	ldi	r19, 0xCC	; 204
    4a1c:	4c ec       	ldi	r20, 0xCC	; 204
    4a1e:	5d e3       	ldi	r21, 0x3D	; 61
    4a20:	e5 96       	adiw	r28, 0x35	; 53
    4a22:	6c ad       	ldd	r22, Y+60	; 0x3c
    4a24:	7d ad       	ldd	r23, Y+61	; 0x3d
    4a26:	8e ad       	ldd	r24, Y+62	; 0x3e
    4a28:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a2a:	e5 97       	sbiw	r28, 0x35	; 53
    4a2c:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    4a30:	9b 01       	movw	r18, r22
    4a32:	ac 01       	movw	r20, r24
    4a34:	c5 01       	movw	r24, r10
    4a36:	b4 01       	movw	r22, r8
    4a38:	73 d5       	rcall	.+2790   	; 0x5520 <__addsf3>
    4a3a:	9b 01       	movw	r18, r22
    4a3c:	ac 01       	movw	r20, r24
    4a3e:	c7 01       	movw	r24, r14
    4a40:	b6 01       	movw	r22, r12
    4a42:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    4a46:	6b 01       	movw	r12, r22
    4a48:	7c 01       	movw	r14, r24
    
    vector_cross_product(v_B_m, v_B_c, v_temp1);
    4a4a:	ae 01       	movw	r20, r28
    4a4c:	47 5e       	subi	r20, 0xE7	; 231
    4a4e:	5f 4f       	sbci	r21, 0xFF	; 255
    4a50:	b3 01       	movw	r22, r6
    4a52:	ce 01       	movw	r24, r28
    4a54:	8b 5a       	subi	r24, 0xAB	; 171
    4a56:	9f 4f       	sbci	r25, 0xFF	; 255
    4a58:	8b d9       	rcall	.-3306   	; 0x3d70 <vector_cross_product>
    vector_cross_product(v_sun_m, v_sun_c, v_temp2);
    4a5a:	ae 01       	movw	r20, r28
    4a5c:	43 5f       	subi	r20, 0xF3	; 243
    4a5e:	5f 4f       	sbci	r21, 0xFF	; 255
    4a60:	b8 01       	movw	r22, r16
    4a62:	c1 01       	movw	r24, r2
    4a64:	85 d9       	rcall	.-3318   	; 0x3d70 <vector_cross_product>
    4a66:	8e 01       	movw	r16, r28
    4a68:	07 5e       	subi	r16, 0xE7	; 231
    4a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a6c:	fe 01       	movw	r30, r28
    4a6e:	3d 96       	adiw	r30, 0x0d	; 13
    4a70:	5f 01       	movw	r10, r30
    4a72:	4e 01       	movw	r8, r28
    4a74:	f5 e2       	ldi	r31, 0x25	; 37
    4a76:	8f 0e       	add	r8, r31
    4a78:	91 1c       	adc	r9, r1
    for(i = 0; i < 3; i++)
      v_temp2[i] = v_temp1[i] * MAG_WEIGHT + (1 - MAG_WEIGHT) * v_temp2[i];
    4a7a:	f8 01       	movw	r30, r16
    4a7c:	61 91       	ld	r22, Z+
    4a7e:	71 91       	ld	r23, Z+
    4a80:	81 91       	ld	r24, Z+
    4a82:	91 91       	ld	r25, Z+
    4a84:	8f 01       	movw	r16, r30
    4a86:	26 e6       	ldi	r18, 0x66	; 102
    4a88:	36 e6       	ldi	r19, 0x66	; 102
    4a8a:	46 e6       	ldi	r20, 0x66	; 102
    4a8c:	5f e3       	ldi	r21, 0x3F	; 63
    4a8e:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    4a92:	2b 01       	movw	r4, r22
    4a94:	3c 01       	movw	r6, r24
    4a96:	20 ed       	ldi	r18, 0xD0	; 208
    4a98:	3c ec       	ldi	r19, 0xCC	; 204
    4a9a:	4c ec       	ldi	r20, 0xCC	; 204
    4a9c:	5d e3       	ldi	r21, 0x3D	; 61
    4a9e:	f5 01       	movw	r30, r10
    4aa0:	60 81       	ld	r22, Z
    4aa2:	71 81       	ldd	r23, Z+1	; 0x01
    4aa4:	82 81       	ldd	r24, Z+2	; 0x02
    4aa6:	93 81       	ldd	r25, Z+3	; 0x03
    4aa8:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    4aac:	9b 01       	movw	r18, r22
    4aae:	ac 01       	movw	r20, r24
    4ab0:	c3 01       	movw	r24, r6
    4ab2:	b2 01       	movw	r22, r4
    4ab4:	35 d5       	rcall	.+2666   	; 0x5520 <__addsf3>
    4ab6:	f5 01       	movw	r30, r10
    4ab8:	61 93       	st	Z+, r22
    4aba:	71 93       	st	Z+, r23
    4abc:	81 93       	st	Z+, r24
    4abe:	91 93       	st	Z+, r25
    4ac0:	5f 01       	movw	r10, r30
	}*/
    mu = (1 + vector_dot_product(v_cross_m, v_cross_c)) * (MAG_WEIGHT * vector_dot_product(v_B_m, v_B_c) + (1 - MAG_WEIGHT) * vector_dot_product(v_sun_m, v_sun_c));
    
    vector_cross_product(v_B_m, v_B_c, v_temp1);
    vector_cross_product(v_sun_m, v_sun_c, v_temp2);
    for(i = 0; i < 3; i++)
    4ac2:	08 15       	cp	r16, r8
    4ac4:	19 05       	cpc	r17, r9
    4ac6:	c9 f6       	brne	.-78     	; 0x4a7a <quest+0x2c8>
      v_temp2[i] = v_temp1[i] * MAG_WEIGHT + (1 - MAG_WEIGHT) * v_temp2[i];
    vector_cross_product(v_cross_m, v_cross_c, v_mc_cross);
    4ac8:	ae 01       	movw	r20, r28
    4aca:	4f 5c       	subi	r20, 0xCF	; 207
    4acc:	5f 4f       	sbci	r21, 0xFF	; 255
    4ace:	be 01       	movw	r22, r28
    4ad0:	63 5c       	subi	r22, 0xC3	; 195
    4ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ad4:	ce 01       	movw	r24, r28
    4ad6:	87 5b       	subi	r24, 0xB7	; 183
    4ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    4ada:	4a d9       	rcall	.-3436   	; 0x3d70 <vector_cross_product>
    
    mu += vector_dot_product(v_mc_cross, v_temp2);
    4adc:	be 01       	movw	r22, r28
    4ade:	63 5f       	subi	r22, 0xF3	; 243
    4ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    4ae2:	ce 01       	movw	r24, r28
    4ae4:	c1 96       	adiw	r24, 0x31	; 49
    4ae6:	78 d8       	rcall	.-3856   	; 0x3bd8 <vector_dot_product>
    4ae8:	a7 01       	movw	r20, r14
    4aea:	96 01       	movw	r18, r12
    4aec:	19 d5       	rcall	.+2610   	; 0x5520 <__addsf3>
    4aee:	6b 01       	movw	r12, r22
    4af0:	7c 01       	movw	r14, r24
    
    add_vectors(v_cross_m, v_cross_c, v_mc_add);
    4af2:	a8 01       	movw	r20, r16
    4af4:	be 01       	movw	r22, r28
    4af6:	63 5c       	subi	r22, 0xC3	; 195
    4af8:	7f 4f       	sbci	r23, 0xFF	; 255
    4afa:	ce 01       	movw	r24, r28
    4afc:	87 5b       	subi	r24, 0xB7	; 183
    4afe:	9f 4f       	sbci	r25, 0xFF	; 255
    4b00:	af d8       	rcall	.-3746   	; 0x3c60 <add_vectors>
    
    nu = vector_dot_product(v_mc_add, v_temp2);
    4b02:	be 01       	movw	r22, r28
    4b04:	63 5f       	subi	r22, 0xF3	; 243
    4b06:	7f 4f       	sbci	r23, 0xFF	; 255
    4b08:	c8 01       	movw	r24, r16
    4b0a:	66 d8       	rcall	.-3892   	; 0x3bd8 <vector_dot_product>
    4b0c:	2b 01       	movw	r4, r22
    4b0e:	3c 01       	movw	r6, r24
    //mu = 0.1606;
	//nu = 0.3671;
    rho = sqrt(mu * mu + nu * nu);
    4b10:	a7 01       	movw	r20, r14
    4b12:	96 01       	movw	r18, r12
    4b14:	c7 01       	movw	r24, r14
    4b16:	b6 01       	movw	r22, r12
    4b18:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__mulsf3>
    4b1c:	4b 01       	movw	r8, r22
    4b1e:	5c 01       	movw	r10, r24
    4b20:	a3 01       	movw	r20, r6
    4b22:	92 01       	movw	r18, r4
    4b24:	c3 01       	movw	r24, r6
    4b26:	b2 01       	movw	r22, r4
    4b28:	fd d7       	rcall	.+4090   	; 0x5b24 <__mulsf3>
    4b2a:	9b 01       	movw	r18, r22
    4b2c:	ac 01       	movw	r20, r24
    4b2e:	c5 01       	movw	r24, r10
    4b30:	b4 01       	movw	r22, r8
    4b32:	f6 d4       	rcall	.+2540   	; 0x5520 <__addsf3>
    4b34:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <sqrt>
    4b38:	4b 01       	movw	r8, r22
    4b3a:	5c 01       	movw	r10, r24
    {
	    sent[i] = (uint8_t)((mu*100));
	    transmit_UART0(sent[i]);
    }*/
	
    if(mu > 0)
    4b3c:	20 e0       	ldi	r18, 0x00	; 0
    4b3e:	30 e0       	ldi	r19, 0x00	; 0
    4b40:	a9 01       	movw	r20, r18
    4b42:	c7 01       	movw	r24, r14
    4b44:	b6 01       	movw	r22, r12
    4b46:	e3 d7       	rcall	.+4038   	; 0x5b0e <__gesf2>
    {
      k = 1 / (2 * sqrt(rho * (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
    4b48:	a7 01       	movw	r20, r14
    4b4a:	96 01       	movw	r18, r12
    {
	    sent[i] = (uint8_t)((mu*100));
	    transmit_UART0(sent[i]);
    }*/
	
    if(mu > 0)
    4b4c:	18 16       	cp	r1, r24
    4b4e:	0c f0       	brlt	.+2      	; 0x4b52 <quest+0x3a0>
    4b50:	f3 c0       	rjmp	.+486    	; 0x4d38 <quest+0x586>
    {
      k = 1 / (2 * sqrt(rho * (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
    4b52:	c5 01       	movw	r24, r10
    4b54:	b4 01       	movw	r22, r8
    4b56:	e4 d4       	rcall	.+2504   	; 0x5520 <__addsf3>
    4b58:	6b 01       	movw	r12, r22
    4b5a:	7c 01       	movw	r14, r24
    4b5c:	a5 01       	movw	r20, r10
    4b5e:	94 01       	movw	r18, r8
    4b60:	e1 d7       	rcall	.+4034   	; 0x5b24 <__mulsf3>
    4b62:	4b 01       	movw	r8, r22
    4b64:	5c 01       	movw	r10, r24
    4b66:	be 01       	movw	r22, r28
    4b68:	63 5c       	subi	r22, 0xC3	; 195
    4b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    4b6c:	ce 01       	movw	r24, r28
    4b6e:	87 5b       	subi	r24, 0xB7	; 183
    4b70:	9f 4f       	sbci	r25, 0xFF	; 255
    4b72:	32 d8       	rcall	.-3996   	; 0x3bd8 <vector_dot_product>
    4b74:	20 e0       	ldi	r18, 0x00	; 0
    4b76:	30 e0       	ldi	r19, 0x00	; 0
    4b78:	40 e8       	ldi	r20, 0x80	; 128
    4b7a:	5f e3       	ldi	r21, 0x3F	; 63
    4b7c:	d1 d4       	rcall	.+2466   	; 0x5520 <__addsf3>
    4b7e:	9b 01       	movw	r18, r22
    4b80:	ac 01       	movw	r20, r24
    4b82:	c5 01       	movw	r24, r10
    4b84:	b4 01       	movw	r22, r8
    4b86:	ce d7       	rcall	.+3996   	; 0x5b24 <__mulsf3>
    4b88:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <sqrt>
    4b8c:	9b 01       	movw	r18, r22
    4b8e:	ac 01       	movw	r20, r24
    4b90:	c7 d4       	rcall	.+2446   	; 0x5520 <__addsf3>
    4b92:	9b 01       	movw	r18, r22
    4b94:	ac 01       	movw	r20, r24
    4b96:	60 e0       	ldi	r22, 0x00	; 0
    4b98:	70 e0       	ldi	r23, 0x00	; 0
    4b9a:	80 e8       	ldi	r24, 0x80	; 128
    4b9c:	9f e3       	ldi	r25, 0x3F	; 63
    4b9e:	a4 d5       	rcall	.+2888   	; 0x56e8 <__divsf3>
    4ba0:	ed 96       	adiw	r28, 0x3d	; 61
    4ba2:	6c af       	std	Y+60, r22	; 0x3c
    4ba4:	7d af       	std	Y+61, r23	; 0x3d
    4ba6:	8e af       	std	Y+62, r24	; 0x3e
    4ba8:	9f af       	std	Y+63, r25	; 0x3f
    4baa:	ed 97       	sbiw	r28, 0x3d	; 61
    4bac:	ce 01       	movw	r24, r28
    4bae:	c1 96       	adiw	r24, 0x31	; 49
    4bb0:	1c 01       	movw	r2, r24
    4bb2:	fe 01       	movw	r30, r28
    4bb4:	31 96       	adiw	r30, 0x01	; 1
    4bb6:	e3 96       	adiw	r28, 0x33	; 51
    4bb8:	ff af       	std	Y+63, r31	; 0x3f
    4bba:	ee af       	std	Y+62, r30	; 0x3e
    4bbc:	e3 97       	sbiw	r28, 0x33	; 51
    4bbe:	e9 96       	adiw	r28, 0x39	; 57
    4bc0:	4c ae       	std	Y+60, r4	; 0x3c
    4bc2:	5d ae       	std	Y+61, r5	; 0x3d
    4bc4:	6e ae       	std	Y+62, r6	; 0x3e
    4bc6:	7f ae       	std	Y+63, r7	; 0x3f
    4bc8:	e9 97       	sbiw	r28, 0x39	; 57
      
      for(i = 0; i < 3; i++)
        v_triad[i] = v_mc_cross[i] * (rho + mu) + v_mc_add[i] * nu;
    4bca:	f1 01       	movw	r30, r2
    4bcc:	21 91       	ld	r18, Z+
    4bce:	31 91       	ld	r19, Z+
    4bd0:	41 91       	ld	r20, Z+
    4bd2:	51 91       	ld	r21, Z+
    4bd4:	1f 01       	movw	r2, r30
    4bd6:	f8 01       	movw	r30, r16
    4bd8:	41 90       	ld	r4, Z+
    4bda:	51 90       	ld	r5, Z+
    4bdc:	61 90       	ld	r6, Z+
    4bde:	71 90       	ld	r7, Z+
    4be0:	8f 01       	movw	r16, r30
    4be2:	c7 01       	movw	r24, r14
    4be4:	b6 01       	movw	r22, r12
    4be6:	9e d7       	rcall	.+3900   	; 0x5b24 <__mulsf3>
    4be8:	4b 01       	movw	r8, r22
    4bea:	5c 01       	movw	r10, r24
    4bec:	e9 96       	adiw	r28, 0x39	; 57
    4bee:	2c ad       	ldd	r18, Y+60	; 0x3c
    4bf0:	3d ad       	ldd	r19, Y+61	; 0x3d
    4bf2:	4e ad       	ldd	r20, Y+62	; 0x3e
    4bf4:	5f ad       	ldd	r21, Y+63	; 0x3f
    4bf6:	e9 97       	sbiw	r28, 0x39	; 57
    4bf8:	c3 01       	movw	r24, r6
    4bfa:	b2 01       	movw	r22, r4
    4bfc:	93 d7       	rcall	.+3878   	; 0x5b24 <__mulsf3>
    4bfe:	9b 01       	movw	r18, r22
    4c00:	ac 01       	movw	r20, r24
    4c02:	c5 01       	movw	r24, r10
    4c04:	b4 01       	movw	r22, r8
    4c06:	8c d4       	rcall	.+2328   	; 0x5520 <__addsf3>
    4c08:	e3 96       	adiw	r28, 0x33	; 51
    4c0a:	ee ad       	ldd	r30, Y+62	; 0x3e
    4c0c:	ff ad       	ldd	r31, Y+63	; 0x3f
    4c0e:	e3 97       	sbiw	r28, 0x33	; 51
    4c10:	61 93       	st	Z+, r22
    4c12:	71 93       	st	Z+, r23
    4c14:	81 93       	st	Z+, r24
    4c16:	91 93       	st	Z+, r25
    4c18:	e3 96       	adiw	r28, 0x33	; 51
    4c1a:	ff af       	std	Y+63, r31	; 0x3f
    4c1c:	ee af       	std	Y+62, r30	; 0x3e
    4c1e:	e3 97       	sbiw	r28, 0x33	; 51
	
    if(mu > 0)
    {
      k = 1 / (2 * sqrt(rho * (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
      
      for(i = 0; i < 3; i++)
    4c20:	af 96       	adiw	r28, 0x2f	; 47
    4c22:	8e ad       	ldd	r24, Y+62	; 0x3e
    4c24:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c26:	af 97       	sbiw	r28, 0x2f	; 47
    4c28:	28 16       	cp	r2, r24
    4c2a:	39 06       	cpc	r3, r25
    4c2c:	71 f6       	brne	.-100    	; 0x4bca <quest+0x418>
        v_triad[i] = v_mc_cross[i] * (rho + mu) + v_mc_add[i] * nu;
      
      triad = (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c));
    4c2e:	b1 01       	movw	r22, r2
    4c30:	ce 01       	movw	r24, r28
    4c32:	87 5b       	subi	r24, 0xB7	; 183
    4c34:	9f 4f       	sbci	r25, 0xFF	; 255
    4c36:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <vector_dot_product>
    4c3a:	20 e0       	ldi	r18, 0x00	; 0
    4c3c:	30 e0       	ldi	r19, 0x00	; 0
    4c3e:	40 e8       	ldi	r20, 0x80	; 128
    4c40:	5f e3       	ldi	r21, 0x3F	; 63
    4c42:	6e d4       	rcall	.+2268   	; 0x5520 <__addsf3>
    4c44:	9b 01       	movw	r18, r22
    4c46:	ac 01       	movw	r20, r24
    4c48:	c7 01       	movw	r24, r14
    4c4a:	b6 01       	movw	r22, r12
    4c4c:	6b d7       	rcall	.+3798   	; 0x5b24 <__mulsf3>
      
      triad = nu * (1 + vector_dot_product(v_cross_m, v_cross_c));
      
    }
    for(i = 0; i < 3; i++)
      q_triad[i] = v_triad[i];
    4c4e:	09 81       	ldd	r16, Y+1	; 0x01
    4c50:	1a 81       	ldd	r17, Y+2	; 0x02
    4c52:	2b 81       	ldd	r18, Y+3	; 0x03
    4c54:	3c 81       	ldd	r19, Y+4	; 0x04
    4c56:	e1 96       	adiw	r28, 0x31	; 49
    4c58:	ee ad       	ldd	r30, Y+62	; 0x3e
    4c5a:	ff ad       	ldd	r31, Y+63	; 0x3f
    4c5c:	e1 97       	sbiw	r28, 0x31	; 49
    4c5e:	00 83       	st	Z, r16
    4c60:	11 83       	std	Z+1, r17	; 0x01
    4c62:	22 83       	std	Z+2, r18	; 0x02
    4c64:	33 83       	std	Z+3, r19	; 0x03
    4c66:	0d 81       	ldd	r16, Y+5	; 0x05
    4c68:	1e 81       	ldd	r17, Y+6	; 0x06
    4c6a:	2f 81       	ldd	r18, Y+7	; 0x07
    4c6c:	38 85       	ldd	r19, Y+8	; 0x08
    4c6e:	04 83       	std	Z+4, r16	; 0x04
    4c70:	15 83       	std	Z+5, r17	; 0x05
    4c72:	26 83       	std	Z+6, r18	; 0x06
    4c74:	37 83       	std	Z+7, r19	; 0x07
    4c76:	09 85       	ldd	r16, Y+9	; 0x09
    4c78:	1a 85       	ldd	r17, Y+10	; 0x0a
    4c7a:	2b 85       	ldd	r18, Y+11	; 0x0b
    4c7c:	3c 85       	ldd	r19, Y+12	; 0x0c
    4c7e:	00 87       	std	Z+8, r16	; 0x08
    4c80:	11 87       	std	Z+9, r17	; 0x09
    4c82:	22 87       	std	Z+10, r18	; 0x0a
    4c84:	33 87       	std	Z+11, r19	; 0x0b
    q_triad[3] = triad;
    4c86:	64 87       	std	Z+12, r22	; 0x0c
    4c88:	75 87       	std	Z+13, r23	; 0x0d
    4c8a:	86 87       	std	Z+14, r24	; 0x0e
    4c8c:	97 87       	std	Z+15, r25	; 0x0f
      
    scalar_into_quaternion(q_triad, k);
    4c8e:	ed 96       	adiw	r28, 0x3d	; 61
    4c90:	4c ad       	ldd	r20, Y+60	; 0x3c
    4c92:	5d ad       	ldd	r21, Y+61	; 0x3d
    4c94:	6e ad       	ldd	r22, Y+62	; 0x3e
    4c96:	7f ad       	ldd	r23, Y+63	; 0x3f
    4c98:	ed 97       	sbiw	r28, 0x3d	; 61
    4c9a:	cf 01       	movw	r24, r30
    4c9c:	1e d9       	rcall	.-3524   	; 0x3eda <scalar_into_quaternion>
{
  //uint8_t w_ctrl = &(p_w_ctrl);
  static uint16_t time_since_light = 0;
  static uint8_t light_prev = 1;
  float * sun_adc = (float *)Current_state.ss.read;
  uint8_t light = 1, num_dark_sensors = 0, i, j;
    4c9e:	81 e0       	ldi	r24, 0x01	; 1
  {
    for(i = 0; i < 3; i++)
      q_triad[i] = 0;
    q_triad[3] = 1;
  }
  light_prev = light;
    4ca0:	80 93 14 01 	sts	0x0114, r24
 
  return light;
   
}
    4ca4:	c4 58       	subi	r28, 0x84	; 132
    4ca6:	df 4f       	sbci	r29, 0xFF	; 255
    4ca8:	0f b6       	in	r0, 0x3f	; 63
    4caa:	f8 94       	cli
    4cac:	de bf       	out	0x3e, r29	; 62
    4cae:	0f be       	out	0x3f, r0	; 63
    4cb0:	cd bf       	out	0x3d, r28	; 61
    4cb2:	df 91       	pop	r29
    4cb4:	cf 91       	pop	r28
    4cb6:	1f 91       	pop	r17
    4cb8:	0f 91       	pop	r16
    4cba:	ff 90       	pop	r15
    4cbc:	ef 90       	pop	r14
    4cbe:	df 90       	pop	r13
    4cc0:	cf 90       	pop	r12
    4cc2:	bf 90       	pop	r11
    4cc4:	af 90       	pop	r10
    4cc6:	9f 90       	pop	r9
    4cc8:	8f 90       	pop	r8
    4cca:	7f 90       	pop	r7
    4ccc:	6f 90       	pop	r6
    4cce:	5f 90       	pop	r5
    4cd0:	4f 90       	pop	r4
    4cd2:	3f 90       	pop	r3
    4cd4:	2f 90       	pop	r2
    4cd6:	08 95       	ret
    
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        v_sun_m[i] = (float)sun_adc[j];
    4cd8:	f1 01       	movw	r30, r2
    4cda:	c0 82       	st	Z, r12
    4cdc:	d1 82       	std	Z+1, r13	; 0x01
    4cde:	e2 82       	std	Z+2, r14	; 0x02
    4ce0:	f3 82       	std	Z+3, r15	; 0x03
    4ce2:	e5 cd       	rjmp	.-1078   	; 0x48ae <quest+0xfc>
    scalar_into_quaternion(q_triad, k);
  }
  else
  {
    for(i = 0; i < 3; i++)
      q_triad[i] = 0;
    4ce4:	e1 96       	adiw	r28, 0x31	; 49
    4ce6:	ee ad       	ldd	r30, Y+62	; 0x3e
    4ce8:	ff ad       	ldd	r31, Y+63	; 0x3f
    4cea:	e1 97       	sbiw	r28, 0x31	; 49
    4cec:	10 82       	st	Z, r1
    4cee:	11 82       	std	Z+1, r1	; 0x01
    4cf0:	12 82       	std	Z+2, r1	; 0x02
    4cf2:	13 82       	std	Z+3, r1	; 0x03
    4cf4:	14 82       	std	Z+4, r1	; 0x04
    4cf6:	15 82       	std	Z+5, r1	; 0x05
    4cf8:	16 82       	std	Z+6, r1	; 0x06
    4cfa:	17 82       	std	Z+7, r1	; 0x07
    4cfc:	10 86       	std	Z+8, r1	; 0x08
    4cfe:	11 86       	std	Z+9, r1	; 0x09
    4d00:	12 86       	std	Z+10, r1	; 0x0a
    4d02:	13 86       	std	Z+11, r1	; 0x0b
    q_triad[3] = 1;
    4d04:	80 e0       	ldi	r24, 0x00	; 0
    4d06:	90 e0       	ldi	r25, 0x00	; 0
    4d08:	a0 e8       	ldi	r26, 0x80	; 128
    4d0a:	bf e3       	ldi	r27, 0x3F	; 63
    4d0c:	84 87       	std	Z+12, r24	; 0x0c
    4d0e:	95 87       	std	Z+13, r25	; 0x0d
    4d10:	a6 87       	std	Z+14, r26	; 0x0e
    4d12:	b7 87       	std	Z+15, r27	; 0x0f
    //Confirm SS_GAIN value and whether we have to use SS_MAX_ANGLE
    if(sun_adc[i] < (0.5 * SS_GAIN)) // cos(85) = 0.087; earlier it was 0.5, changed by amolika
      num_dark_sensors++;
  }
  if(num_dark_sensors == N_SS)
    light = 0;
    4d14:	80 e0       	ldi	r24, 0x00	; 0
    4d16:	c4 cf       	rjmp	.-120    	; 0x4ca0 <quest+0x4ee>
    
    for(i = 0; i < (N_SS / 2); i++)
    {
      j = i * 2;
      if(sun_adc[j] > sun_adc[j + 1])
        v_sun_m[i] = (float)sun_adc[j];
    4d18:	f1 01       	movw	r30, r2
    4d1a:	c0 86       	std	Z+8, r12	; 0x08
    4d1c:	d1 86       	std	Z+9, r13	; 0x09
    4d1e:	e2 86       	std	Z+10, r14	; 0x0a
    4d20:	f3 86       	std	Z+11, r15	; 0x0b
    4d22:	09 ce       	rjmp	.-1006   	; 0x4936 <quest+0x184>
    4d24:	f1 01       	movw	r30, r2
    4d26:	c4 82       	std	Z+4, r12	; 0x04
    4d28:	d5 82       	std	Z+5, r13	; 0x05
    4d2a:	e6 82       	std	Z+6, r14	; 0x06
    4d2c:	f7 82       	std	Z+7, r15	; 0x07
    4d2e:	e1 cd       	rjmp	.-1086   	; 0x48f2 <quest+0x140>
  {
    if(!*p_w_ctrl)
    {
      time_since_light += FRAME_TIME;
      if(time_since_light == 300)
        *p_w_ctrl = 1;
    4d30:	81 e0       	ldi	r24, 0x01	; 1
    4d32:	f6 01       	movw	r30, r12
    4d34:	80 83       	st	Z, r24
    4d36:	8b cd       	rjmp	.-1258   	; 0x484e <quest+0x9c>
      triad = (rho + mu) * (1 + vector_dot_product(v_cross_m, v_cross_c));
      
    }
    else
    {
      k = 1 / (2 * sqrt(rho * (rho - mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
    4d38:	c5 01       	movw	r24, r10
    4d3a:	b4 01       	movw	r22, r8
    4d3c:	f0 d3       	rcall	.+2016   	; 0x551e <__subsf3>
    4d3e:	e9 96       	adiw	r28, 0x39	; 57
    4d40:	6c af       	std	Y+60, r22	; 0x3c
    4d42:	7d af       	std	Y+61, r23	; 0x3d
    4d44:	8e af       	std	Y+62, r24	; 0x3e
    4d46:	9f af       	std	Y+63, r25	; 0x3f
    4d48:	e9 97       	sbiw	r28, 0x39	; 57
    4d4a:	a5 01       	movw	r20, r10
    4d4c:	94 01       	movw	r18, r8
    4d4e:	ea d6       	rcall	.+3540   	; 0x5b24 <__mulsf3>
    4d50:	6b 01       	movw	r12, r22
    4d52:	7c 01       	movw	r14, r24
    4d54:	be 01       	movw	r22, r28
    4d56:	63 5c       	subi	r22, 0xC3	; 195
    4d58:	7f 4f       	sbci	r23, 0xFF	; 255
    4d5a:	ce 01       	movw	r24, r28
    4d5c:	87 5b       	subi	r24, 0xB7	; 183
    4d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    4d60:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <vector_dot_product>
    4d64:	20 e0       	ldi	r18, 0x00	; 0
    4d66:	30 e0       	ldi	r19, 0x00	; 0
    4d68:	40 e8       	ldi	r20, 0x80	; 128
    4d6a:	5f e3       	ldi	r21, 0x3F	; 63
    4d6c:	d9 d3       	rcall	.+1970   	; 0x5520 <__addsf3>
    4d6e:	9b 01       	movw	r18, r22
    4d70:	ac 01       	movw	r20, r24
    4d72:	c7 01       	movw	r24, r14
    4d74:	b6 01       	movw	r22, r12
    4d76:	d6 d6       	rcall	.+3500   	; 0x5b24 <__mulsf3>
    4d78:	8e d7       	rcall	.+3868   	; 0x5c96 <sqrt>
    4d7a:	9b 01       	movw	r18, r22
    4d7c:	ac 01       	movw	r20, r24
    4d7e:	d0 d3       	rcall	.+1952   	; 0x5520 <__addsf3>
    4d80:	9b 01       	movw	r18, r22
    4d82:	ac 01       	movw	r20, r24
    4d84:	60 e0       	ldi	r22, 0x00	; 0
    4d86:	70 e0       	ldi	r23, 0x00	; 0
    4d88:	80 e8       	ldi	r24, 0x80	; 128
    4d8a:	9f e3       	ldi	r25, 0x3F	; 63
    4d8c:	ad d4       	rcall	.+2394   	; 0x56e8 <__divsf3>
    4d8e:	ed 96       	adiw	r28, 0x3d	; 61
    4d90:	6c af       	std	Y+60, r22	; 0x3c
    4d92:	7d af       	std	Y+61, r23	; 0x3d
    4d94:	8e af       	std	Y+62, r24	; 0x3e
    4d96:	9f af       	std	Y+63, r25	; 0x3f
    4d98:	ed 97       	sbiw	r28, 0x3d	; 61
    4d9a:	fe 01       	movw	r30, r28
    4d9c:	f1 96       	adiw	r30, 0x31	; 49
    4d9e:	1f 01       	movw	r2, r30
    4da0:	ce 01       	movw	r24, r28
    4da2:	01 96       	adiw	r24, 0x01	; 1
    4da4:	e3 96       	adiw	r28, 0x33	; 51
    4da6:	9f af       	std	Y+63, r25	; 0x3f
    4da8:	8e af       	std	Y+62, r24	; 0x3e
    4daa:	e3 97       	sbiw	r28, 0x33	; 51
      
      for(i = 0; i < 3; i++)
        v_triad[i] = v_mc_cross[i] * nu + v_mc_add[i] * (rho - mu);
    4dac:	f1 01       	movw	r30, r2
    4dae:	61 91       	ld	r22, Z+
    4db0:	71 91       	ld	r23, Z+
    4db2:	81 91       	ld	r24, Z+
    4db4:	91 91       	ld	r25, Z+
    4db6:	1f 01       	movw	r2, r30
    4db8:	f8 01       	movw	r30, r16
    4dba:	81 90       	ld	r8, Z+
    4dbc:	91 90       	ld	r9, Z+
    4dbe:	a1 90       	ld	r10, Z+
    4dc0:	b1 90       	ld	r11, Z+
    4dc2:	8f 01       	movw	r16, r30
    4dc4:	a3 01       	movw	r20, r6
    4dc6:	92 01       	movw	r18, r4
    4dc8:	ad d6       	rcall	.+3418   	; 0x5b24 <__mulsf3>
    4dca:	6b 01       	movw	r12, r22
    4dcc:	7c 01       	movw	r14, r24
    4dce:	a5 01       	movw	r20, r10
    4dd0:	94 01       	movw	r18, r8
    4dd2:	e9 96       	adiw	r28, 0x39	; 57
    4dd4:	6c ad       	ldd	r22, Y+60	; 0x3c
    4dd6:	7d ad       	ldd	r23, Y+61	; 0x3d
    4dd8:	8e ad       	ldd	r24, Y+62	; 0x3e
    4dda:	9f ad       	ldd	r25, Y+63	; 0x3f
    4ddc:	e9 97       	sbiw	r28, 0x39	; 57
    4dde:	a2 d6       	rcall	.+3396   	; 0x5b24 <__mulsf3>
    4de0:	9b 01       	movw	r18, r22
    4de2:	ac 01       	movw	r20, r24
    4de4:	c7 01       	movw	r24, r14
    4de6:	b6 01       	movw	r22, r12
    4de8:	9b d3       	rcall	.+1846   	; 0x5520 <__addsf3>
    4dea:	e3 96       	adiw	r28, 0x33	; 51
    4dec:	ee ad       	ldd	r30, Y+62	; 0x3e
    4dee:	ff ad       	ldd	r31, Y+63	; 0x3f
    4df0:	e3 97       	sbiw	r28, 0x33	; 51
    4df2:	61 93       	st	Z+, r22
    4df4:	71 93       	st	Z+, r23
    4df6:	81 93       	st	Z+, r24
    4df8:	91 93       	st	Z+, r25
    4dfa:	e3 96       	adiw	r28, 0x33	; 51
    4dfc:	ff af       	std	Y+63, r31	; 0x3f
    4dfe:	ee af       	std	Y+62, r30	; 0x3e
    4e00:	e3 97       	sbiw	r28, 0x33	; 51
    }
    else
    {
      k = 1 / (2 * sqrt(rho * (rho - mu) * (1 + vector_dot_product(v_cross_m, v_cross_c))));
      
      for(i = 0; i < 3; i++)
    4e02:	af 96       	adiw	r28, 0x2f	; 47
    4e04:	8e ad       	ldd	r24, Y+62	; 0x3e
    4e06:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e08:	af 97       	sbiw	r28, 0x2f	; 47
    4e0a:	28 16       	cp	r2, r24
    4e0c:	39 06       	cpc	r3, r25
    4e0e:	71 f6       	brne	.-100    	; 0x4dac <quest+0x5fa>
        v_triad[i] = v_mc_cross[i] * nu + v_mc_add[i] * (rho - mu);
      
      triad = nu * (1 + vector_dot_product(v_cross_m, v_cross_c));
    4e10:	b1 01       	movw	r22, r2
    4e12:	ce 01       	movw	r24, r28
    4e14:	87 5b       	subi	r24, 0xB7	; 183
    4e16:	9f 4f       	sbci	r25, 0xFF	; 255
    4e18:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <vector_dot_product>
    4e1c:	20 e0       	ldi	r18, 0x00	; 0
    4e1e:	30 e0       	ldi	r19, 0x00	; 0
    4e20:	40 e8       	ldi	r20, 0x80	; 128
    4e22:	5f e3       	ldi	r21, 0x3F	; 63
    4e24:	7d d3       	rcall	.+1786   	; 0x5520 <__addsf3>
    4e26:	a3 01       	movw	r20, r6
    4e28:	92 01       	movw	r18, r4
    4e2a:	7c d6       	rcall	.+3320   	; 0x5b24 <__mulsf3>
    4e2c:	10 cf       	rjmp	.-480    	; 0x4c4e <quest+0x49c>

00004e2e <omega_estimation>:
  return light;
   
}

void omega_estimation(quaternion q_B, vector v_w)
{
    4e2e:	2f 92       	push	r2
    4e30:	3f 92       	push	r3
    4e32:	4f 92       	push	r4
    4e34:	5f 92       	push	r5
    4e36:	6f 92       	push	r6
    4e38:	7f 92       	push	r7
    4e3a:	8f 92       	push	r8
    4e3c:	9f 92       	push	r9
    4e3e:	af 92       	push	r10
    4e40:	bf 92       	push	r11
    4e42:	cf 92       	push	r12
    4e44:	df 92       	push	r13
    4e46:	ef 92       	push	r14
    4e48:	ff 92       	push	r15
    4e4a:	0f 93       	push	r16
    4e4c:	1f 93       	push	r17
    4e4e:	cf 93       	push	r28
    4e50:	df 93       	push	r29
    4e52:	cd b7       	in	r28, 0x3d	; 61
    4e54:	de b7       	in	r29, 0x3e	; 62
    4e56:	c0 5d       	subi	r28, 0xD0	; 208
    4e58:	d1 09       	sbc	r29, r1
    4e5a:	0f b6       	in	r0, 0x3f	; 63
    4e5c:	f8 94       	cli
    4e5e:	de bf       	out	0x3e, r29	; 62
    4e60:	0f be       	out	0x3f, r0	; 63
    4e62:	cd bf       	out	0x3d, r28	; 61
    4e64:	c3 53       	subi	r28, 0x33	; 51
    4e66:	df 4f       	sbci	r29, 0xFF	; 255
    4e68:	88 83       	st	Y, r24
    4e6a:	cd 5c       	subi	r28, 0xCD	; 205
    4e6c:	d0 40       	sbci	r29, 0x00	; 0
    4e6e:	c2 53       	subi	r28, 0x32	; 50
    4e70:	df 4f       	sbci	r29, 0xFF	; 255
    4e72:	98 83       	st	Y, r25
    4e74:	ce 5c       	subi	r28, 0xCE	; 206
    4e76:	d0 40       	sbci	r29, 0x00	; 0
    4e78:	c1 53       	subi	r28, 0x31	; 49
    4e7a:	df 4f       	sbci	r29, 0xFF	; 255
    4e7c:	68 83       	st	Y, r22
    4e7e:	cf 5c       	subi	r28, 0xCF	; 207
    4e80:	d0 40       	sbci	r29, 0x00	; 0
    4e82:	c0 53       	subi	r28, 0x30	; 48
    4e84:	df 4f       	sbci	r29, 0xFF	; 255
    4e86:	78 83       	st	Y, r23
    4e88:	c0 5d       	subi	r28, 0xD0	; 208
    4e8a:	d0 40       	sbci	r29, 0x00	; 0
    4e8c:	7c 01       	movw	r14, r24
    4e8e:	0b ea       	ldi	r16, 0xAB	; 171
    4e90:	14 e0       	ldi	r17, 0x04	; 4
    4e92:	9e 01       	movw	r18, r28
    4e94:	23 59       	subi	r18, 0x93	; 147
    4e96:	3f 4f       	sbci	r19, 0xFF	; 255
    4e98:	69 01       	movw	r12, r18
    4e9a:	ae 01       	movw	r20, r28
    4e9c:	43 58       	subi	r20, 0x83	; 131
    4e9e:	5f 4f       	sbci	r21, 0xFF	; 255
    4ea0:	1a 01       	movw	r2, r20
  float n;
  uint8_t i, j;
  
  for(i = 0; i < 4; i++)
  {
    dq[i] = (q_B[i] - q_B_old[i]) / FRAME_TIME;
    4ea2:	d7 01       	movw	r26, r14
    4ea4:	8d 90       	ld	r8, X+
    4ea6:	9d 90       	ld	r9, X+
    4ea8:	ad 90       	ld	r10, X+
    4eaa:	bd 90       	ld	r11, X+
    4eac:	7d 01       	movw	r14, r26
    4eae:	f8 01       	movw	r30, r16
    4eb0:	41 90       	ld	r4, Z+
    4eb2:	51 90       	ld	r5, Z+
    4eb4:	61 90       	ld	r6, Z+
    4eb6:	71 90       	ld	r7, Z+
    4eb8:	8f 01       	movw	r16, r30
    4eba:	a3 01       	movw	r20, r6
    4ebc:	92 01       	movw	r18, r4
    4ebe:	c5 01       	movw	r24, r10
    4ec0:	b4 01       	movw	r22, r8
    4ec2:	2d d3       	rcall	.+1626   	; 0x551e <__subsf3>
    4ec4:	20 e0       	ldi	r18, 0x00	; 0
    4ec6:	30 e0       	ldi	r19, 0x00	; 0
    4ec8:	40 e0       	ldi	r20, 0x00	; 0
    4eca:	5f e3       	ldi	r21, 0x3F	; 63
    4ecc:	2b d6       	rcall	.+3158   	; 0x5b24 <__mulsf3>
    4ece:	d1 01       	movw	r26, r2
    4ed0:	6d 93       	st	X+, r22
    4ed2:	7d 93       	st	X+, r23
    4ed4:	8d 93       	st	X+, r24
    4ed6:	9d 93       	st	X+, r25
    4ed8:	1d 01       	movw	r2, r26
    q[i] = (q_B[i] + q_B_old[i]) / 2;
    4eda:	a3 01       	movw	r20, r6
    4edc:	92 01       	movw	r18, r4
    4ede:	c5 01       	movw	r24, r10
    4ee0:	b4 01       	movw	r22, r8
    4ee2:	1e d3       	rcall	.+1596   	; 0x5520 <__addsf3>
    4ee4:	20 e0       	ldi	r18, 0x00	; 0
    4ee6:	30 e0       	ldi	r19, 0x00	; 0
    4ee8:	40 e0       	ldi	r20, 0x00	; 0
    4eea:	5f e3       	ldi	r21, 0x3F	; 63
    4eec:	1b d6       	rcall	.+3126   	; 0x5b24 <__mulsf3>
    4eee:	f6 01       	movw	r30, r12
    4ef0:	61 93       	st	Z+, r22
    4ef2:	71 93       	st	Z+, r23
    4ef4:	81 93       	st	Z+, r24
    4ef6:	91 93       	st	Z+, r25
    4ef8:	6f 01       	movw	r12, r30
  //static vector v_w_old = { 0.0, 0.0, 0.0 };
  matrix m_temp;
  float n;
  uint8_t i, j;
  
  for(i = 0; i < 4; i++)
    4efa:	f4 e0       	ldi	r31, 0x04	; 4
    4efc:	0b 3b       	cpi	r16, 0xBB	; 187
    4efe:	1f 07       	cpc	r17, r31
    4f00:	81 f6       	brne	.-96     	; 0x4ea2 <omega_estimation+0x74>
    4f02:	9e 01       	movw	r18, r28
    4f04:	27 56       	subi	r18, 0x67	; 103
    4f06:	3f 4f       	sbci	r19, 0xFF	; 255
    4f08:	ce 01       	movw	r24, r28
    4f0a:	8b 55       	subi	r24, 0x5B	; 91
    4f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f0e:	4d e7       	ldi	r20, 0x7D	; 125
    4f10:	50 e0       	ldi	r21, 0x00	; 0
    4f12:	4c 0f       	add	r20, r28
    4f14:	5d 1f       	adc	r21, r29
    4f16:	44 5f       	subi	r20, 0xF4	; 244
    4f18:	5f 4f       	sbci	r21, 0xFF	; 255
    4f1a:	de 01       	movw	r26, r28
    4f1c:	a3 59       	subi	r26, 0x93	; 147
    4f1e:	bf 4f       	sbci	r27, 0xFF	; 255
    4f20:	fe 01       	movw	r30, r28
    4f22:	e3 58       	subi	r30, 0x83	; 131
    4f24:	ff 4f       	sbci	r31, 0xFF	; 255
    4f26:	7c 01       	movw	r14, r24
    4f28:	b9 01       	movw	r22, r18
    4f2a:	cd 01       	movw	r24, r26
    q[i] = (q_B[i] + q_B_old[i]) / 2;
  }
    
  for(i = 0; i < 3; i++)
  {
    de[i] = dq[i];
    4f2c:	01 91       	ld	r16, Z+
    4f2e:	11 91       	ld	r17, Z+
    4f30:	21 91       	ld	r18, Z+
    4f32:	31 91       	ld	r19, Z+
    4f34:	db 01       	movw	r26, r22
    4f36:	0d 93       	st	X+, r16
    4f38:	1d 93       	st	X+, r17
    4f3a:	2d 93       	st	X+, r18
    4f3c:	3d 93       	st	X+, r19
    4f3e:	bd 01       	movw	r22, r26
    e[i] = q[i];
    4f40:	dc 01       	movw	r26, r24
    4f42:	0d 91       	ld	r16, X+
    4f44:	1d 91       	ld	r17, X+
    4f46:	2d 91       	ld	r18, X+
    4f48:	3d 91       	ld	r19, X+
    4f4a:	cd 01       	movw	r24, r26
    4f4c:	d7 01       	movw	r26, r14
    4f4e:	0d 93       	st	X+, r16
    4f50:	1d 93       	st	X+, r17
    4f52:	2d 93       	st	X+, r18
    4f54:	3d 93       	st	X+, r19
    4f56:	7d 01       	movw	r14, r26
  {
    dq[i] = (q_B[i] - q_B_old[i]) / FRAME_TIME;
    q[i] = (q_B[i] + q_B_old[i]) / 2;
  }
    
  for(i = 0; i < 3; i++)
    4f58:	e4 17       	cp	r30, r20
    4f5a:	f5 07       	cpc	r31, r21
    4f5c:	39 f7       	brne	.-50     	; 0x4f2c <omega_estimation+0xfe>
  {
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];
    4f5e:	ed 96       	adiw	r28, 0x3d	; 61
    4f60:	2c ad       	ldd	r18, Y+60	; 0x3c
    4f62:	3d ad       	ldd	r19, Y+61	; 0x3d
    4f64:	4e ad       	ldd	r20, Y+62	; 0x3e
    4f66:	5f ad       	ldd	r21, Y+63	; 0x3f
    4f68:	ed 97       	sbiw	r28, 0x3d	; 61
    4f6a:	c9 54       	subi	r28, 0x49	; 73
    4f6c:	df 4f       	sbci	r29, 0xFF	; 255
    4f6e:	28 83       	st	Y, r18
    4f70:	39 83       	std	Y+1, r19	; 0x01
    4f72:	4a 83       	std	Y+2, r20	; 0x02
    4f74:	5b 83       	std	Y+3, r21	; 0x03
    4f76:	c7 5b       	subi	r28, 0xB7	; 183
    4f78:	d0 40       	sbci	r29, 0x00	; 0

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    4f7a:	1d a2       	std	Y+37, r1	; 0x25
    4f7c:	1e a2       	std	Y+38, r1	; 0x26
    4f7e:	1f a2       	std	Y+39, r1	; 0x27
    4f80:	18 a6       	std	Y+40, r1	; 0x28
    4f82:	c3 55       	subi	r28, 0x53	; 83
    4f84:	df 4f       	sbci	r29, 0xFF	; 255
    4f86:	88 80       	ld	r8, Y
    4f88:	99 80       	ldd	r9, Y+1	; 0x01
    4f8a:	aa 80       	ldd	r10, Y+2	; 0x02
    4f8c:	bb 80       	ldd	r11, Y+3	; 0x03
    4f8e:	cd 5a       	subi	r28, 0xAD	; 173
    4f90:	d0 40       	sbci	r29, 0x00	; 0
    4f92:	20 e0       	ldi	r18, 0x00	; 0
    4f94:	30 e0       	ldi	r19, 0x00	; 0
    4f96:	40 e0       	ldi	r20, 0x00	; 0
    4f98:	50 ec       	ldi	r21, 0xC0	; 192
    4f9a:	c5 01       	movw	r24, r10
    4f9c:	b4 01       	movw	r22, r8
    4f9e:	c2 d5       	rcall	.+2948   	; 0x5b24 <__mulsf3>
    4fa0:	69 a7       	std	Y+41, r22	; 0x29
    4fa2:	7a a7       	std	Y+42, r23	; 0x2a
    4fa4:	8b a7       	std	Y+43, r24	; 0x2b
    4fa6:	9c a7       	std	Y+44, r25	; 0x2c
    4fa8:	c7 55       	subi	r28, 0x57	; 87
    4faa:	df 4f       	sbci	r29, 0xFF	; 255
    4fac:	c8 80       	ld	r12, Y
    4fae:	d9 80       	ldd	r13, Y+1	; 0x01
    4fb0:	ea 80       	ldd	r14, Y+2	; 0x02
    4fb2:	fb 80       	ldd	r15, Y+3	; 0x03
    4fb4:	c9 5a       	subi	r28, 0xA9	; 169
    4fb6:	d0 40       	sbci	r29, 0x00	; 0
    4fb8:	a7 01       	movw	r20, r14
    4fba:	96 01       	movw	r18, r12
    4fbc:	c7 01       	movw	r24, r14
    4fbe:	b6 01       	movw	r22, r12
    4fc0:	af d2       	rcall	.+1374   	; 0x5520 <__addsf3>
    4fc2:	6d a7       	std	Y+45, r22	; 0x2d
    4fc4:	7e a7       	std	Y+46, r23	; 0x2e
    4fc6:	8f a7       	std	Y+47, r24	; 0x2f
    4fc8:	98 ab       	std	Y+48, r25	; 0x30
  { 2 * e[2], 0, -2 * e[0] },
    4fca:	a5 01       	movw	r20, r10
    4fcc:	94 01       	movw	r18, r8
    4fce:	c5 01       	movw	r24, r10
    4fd0:	b4 01       	movw	r22, r8
    4fd2:	a6 d2       	rcall	.+1356   	; 0x5520 <__addsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    4fd4:	69 ab       	std	Y+49, r22	; 0x31
    4fd6:	7a ab       	std	Y+50, r23	; 0x32
    4fd8:	8b ab       	std	Y+51, r24	; 0x33
    4fda:	9c ab       	std	Y+52, r25	; 0x34
    4fdc:	1d aa       	std	Y+53, r1	; 0x35
    4fde:	1e aa       	std	Y+54, r1	; 0x36
    4fe0:	1f aa       	std	Y+55, r1	; 0x37
    4fe2:	18 ae       	std	Y+56, r1	; 0x38
  { 2 * e[2], 0, -2 * e[0] },
    4fe4:	ae 01       	movw	r20, r28
    4fe6:	4b 55       	subi	r20, 0x5B	; 91
    4fe8:	5f 4f       	sbci	r21, 0xFF	; 255
    4fea:	fa 01       	movw	r30, r20
    4fec:	81 91       	ld	r24, Z+
    4fee:	91 91       	ld	r25, Z+
    4ff0:	a1 91       	ld	r26, Z+
    4ff2:	b1 91       	ld	r27, Z+
    4ff4:	cb 53       	subi	r28, 0x3B	; 59
    4ff6:	df 4f       	sbci	r29, 0xFF	; 255
    4ff8:	f9 83       	std	Y+1, r31	; 0x01
    4ffa:	e8 83       	st	Y, r30
    4ffc:	c5 5c       	subi	r28, 0xC5	; 197
    4ffe:	d0 40       	sbci	r29, 0x00	; 0
    5000:	cf 53       	subi	r28, 0x3F	; 63
    5002:	df 4f       	sbci	r29, 0xFF	; 255
    5004:	88 83       	st	Y, r24
    5006:	99 83       	std	Y+1, r25	; 0x01
    5008:	aa 83       	std	Y+2, r26	; 0x02
    500a:	bb 83       	std	Y+3, r27	; 0x03
    500c:	c1 5c       	subi	r28, 0xC1	; 193
    500e:	d0 40       	sbci	r29, 0x00	; 0
    5010:	20 e0       	ldi	r18, 0x00	; 0
    5012:	30 e0       	ldi	r19, 0x00	; 0
    5014:	40 e0       	ldi	r20, 0x00	; 0
    5016:	50 ec       	ldi	r21, 0xC0	; 192
    5018:	bc 01       	movw	r22, r24
    501a:	cd 01       	movw	r24, r26
    501c:	83 d5       	rcall	.+2822   	; 0x5b24 <__mulsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    501e:	69 af       	std	Y+57, r22	; 0x39
    5020:	7a af       	std	Y+58, r23	; 0x3a
    5022:	8b af       	std	Y+59, r24	; 0x3b
    5024:	9c af       	std	Y+60, r25	; 0x3c
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
    5026:	20 e0       	ldi	r18, 0x00	; 0
    5028:	30 e0       	ldi	r19, 0x00	; 0
    502a:	40 e0       	ldi	r20, 0x00	; 0
    502c:	50 ec       	ldi	r21, 0xC0	; 192
    502e:	c7 01       	movw	r24, r14
    5030:	b6 01       	movw	r22, r12
    5032:	78 d5       	rcall	.+2800   	; 0x5b24 <__mulsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    5034:	21 96       	adiw	r28, 0x01	; 1
    5036:	6c af       	std	Y+60, r22	; 0x3c
    5038:	7d af       	std	Y+61, r23	; 0x3d
    503a:	8e af       	std	Y+62, r24	; 0x3e
    503c:	9f af       	std	Y+63, r25	; 0x3f
    503e:	21 97       	sbiw	r28, 0x01	; 1
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
    5040:	cf 53       	subi	r28, 0x3F	; 63
    5042:	df 4f       	sbci	r29, 0xFF	; 255
    5044:	28 81       	ld	r18, Y
    5046:	39 81       	ldd	r19, Y+1	; 0x01
    5048:	4a 81       	ldd	r20, Y+2	; 0x02
    504a:	5b 81       	ldd	r21, Y+3	; 0x03
    504c:	c1 5c       	subi	r28, 0xC1	; 193
    504e:	d0 40       	sbci	r29, 0x00	; 0
    5050:	ca 01       	movw	r24, r20
    5052:	b9 01       	movw	r22, r18
    5054:	65 d2       	rcall	.+1226   	; 0x5520 <__addsf3>
    de[i] = dq[i];
    e[i] = q[i];
  }
  n = q[3];

  matrix m_ex = { { 0, -2 * e[2], 2 * e[1] },
    5056:	25 96       	adiw	r28, 0x05	; 5
    5058:	6c af       	std	Y+60, r22	; 0x3c
    505a:	7d af       	std	Y+61, r23	; 0x3d
    505c:	8e af       	std	Y+62, r24	; 0x3e
    505e:	9f af       	std	Y+63, r25	; 0x3f
    5060:	25 97       	sbiw	r28, 0x05	; 5
    5062:	29 96       	adiw	r28, 0x09	; 9
    5064:	1c ae       	std	Y+60, r1	; 0x3c
    5066:	1d ae       	std	Y+61, r1	; 0x3d
    5068:	1e ae       	std	Y+62, r1	; 0x3e
    506a:	1f ae       	std	Y+63, r1	; 0x3f
    506c:	29 97       	sbiw	r28, 0x09	; 9
  { 2 * e[2], 0, -2 * e[0] },
  { -2 * e[1], 2 * e[0], 0 } };                              //{ { 0, -2 * e[2], 2 * e[1] },
                                              //{ 2 * e[2], 0, -2 * e[0] },
                                              //{ -2 * e[1], 2 * e[0], 0 } };
  matrix m_I = { { 2 * n, 0, 0 },
    506e:	c9 54       	subi	r28, 0x49	; 73
    5070:	df 4f       	sbci	r29, 0xFF	; 255
    5072:	28 81       	ld	r18, Y
    5074:	39 81       	ldd	r19, Y+1	; 0x01
    5076:	4a 81       	ldd	r20, Y+2	; 0x02
    5078:	5b 81       	ldd	r21, Y+3	; 0x03
    507a:	c7 5b       	subi	r28, 0xB7	; 183
    507c:	d0 40       	sbci	r29, 0x00	; 0
    507e:	ca 01       	movw	r24, r20
    5080:	b9 01       	movw	r22, r18
    5082:	4e d2       	rcall	.+1180   	; 0x5520 <__addsf3>
    5084:	2b 01       	movw	r4, r22
    5086:	3c 01       	movw	r6, r24
    5088:	69 83       	std	Y+1, r22	; 0x01
    508a:	7a 83       	std	Y+2, r23	; 0x02
    508c:	8b 83       	std	Y+3, r24	; 0x03
    508e:	9c 83       	std	Y+4, r25	; 0x04
    5090:	1d 82       	std	Y+5, r1	; 0x05
    5092:	1e 82       	std	Y+6, r1	; 0x06
    5094:	1f 82       	std	Y+7, r1	; 0x07
    5096:	18 86       	std	Y+8, r1	; 0x08
    5098:	19 86       	std	Y+9, r1	; 0x09
    509a:	1a 86       	std	Y+10, r1	; 0x0a
    509c:	1b 86       	std	Y+11, r1	; 0x0b
    509e:	1c 86       	std	Y+12, r1	; 0x0c
    50a0:	1d 86       	std	Y+13, r1	; 0x0d
    50a2:	1e 86       	std	Y+14, r1	; 0x0e
    50a4:	1f 86       	std	Y+15, r1	; 0x0f
    50a6:	18 8a       	std	Y+16, r1	; 0x10
    50a8:	69 8b       	std	Y+17, r22	; 0x11
    50aa:	7a 8b       	std	Y+18, r23	; 0x12
    50ac:	8b 8b       	std	Y+19, r24	; 0x13
    50ae:	9c 8b       	std	Y+20, r25	; 0x14
    50b0:	1d 8a       	std	Y+21, r1	; 0x15
    50b2:	1e 8a       	std	Y+22, r1	; 0x16
    50b4:	1f 8a       	std	Y+23, r1	; 0x17
    50b6:	18 8e       	std	Y+24, r1	; 0x18
    50b8:	19 8e       	std	Y+25, r1	; 0x19
    50ba:	1a 8e       	std	Y+26, r1	; 0x1a
    50bc:	1b 8e       	std	Y+27, r1	; 0x1b
    50be:	1c 8e       	std	Y+28, r1	; 0x1c
    50c0:	1d 8e       	std	Y+29, r1	; 0x1d
    50c2:	1e 8e       	std	Y+30, r1	; 0x1e
    50c4:	1f 8e       	std	Y+31, r1	; 0x1f
    50c6:	18 a2       	std	Y+32, r1	; 0x20
    50c8:	69 a3       	std	Y+33, r22	; 0x21
    50ca:	7a a3       	std	Y+34, r23	; 0x22
    50cc:	8b a3       	std	Y+35, r24	; 0x23
    50ce:	9c a3       	std	Y+36, r25	; 0x24
    50d0:	9e 01       	movw	r18, r28
    50d2:	2f 5f       	subi	r18, 0xFF	; 255
    50d4:	3f 4f       	sbci	r19, 0xFF	; 255
    50d6:	c5 54       	subi	r28, 0x45	; 69
    50d8:	df 4f       	sbci	r29, 0xFF	; 255
    50da:	39 83       	std	Y+1, r19	; 0x01
    50dc:	28 83       	st	Y, r18
    50de:	cb 5b       	subi	r28, 0xBB	; 187
    50e0:	d0 40       	sbci	r29, 0x00	; 0
    50e2:	ae 01       	movw	r20, r28
    50e4:	4b 5d       	subi	r20, 0xDB	; 219
    50e6:	5f 4f       	sbci	r21, 0xFF	; 255
    50e8:	c3 54       	subi	r28, 0x43	; 67
    50ea:	df 4f       	sbci	r29, 0xFF	; 255
    50ec:	59 83       	std	Y+1, r21	; 0x01
    50ee:	48 83       	st	Y, r20
    50f0:	cd 5b       	subi	r28, 0xBD	; 189
    50f2:	d0 40       	sbci	r29, 0x00	; 0
    50f4:	ce 01       	movw	r24, r28
    50f6:	87 5b       	subi	r24, 0xB7	; 183
    50f8:	9f 4f       	sbci	r25, 0xFF	; 255
    50fa:	c1 54       	subi	r28, 0x41	; 65
    50fc:	df 4f       	sbci	r29, 0xFF	; 255
    50fe:	99 83       	std	Y+1, r25	; 0x01
    5100:	88 83       	st	Y, r24
    5102:	cf 5b       	subi	r28, 0xBF	; 191
    5104:	d0 40       	sbci	r29, 0x00	; 0
    5106:	cb 53       	subi	r28, 0x3B	; 59
    5108:	df 4f       	sbci	r29, 0xFF	; 255
    510a:	a8 81       	ld	r26, Y
    510c:	b9 81       	ldd	r27, Y+1	; 0x01
    510e:	c5 5c       	subi	r28, 0xC5	; 197
    5110:	d0 40       	sbci	r29, 0x00	; 0
    5112:	c5 53       	subi	r28, 0x35	; 53
    5114:	df 4f       	sbci	r29, 0xFF	; 255
    5116:	b9 83       	std	Y+1, r27	; 0x01
    5118:	a8 83       	st	Y, r26
    511a:	cb 5c       	subi	r28, 0xCB	; 203
    511c:	d0 40       	sbci	r29, 0x00	; 0
    511e:	cf 53       	subi	r28, 0x3F	; 63
    5120:	df 4f       	sbci	r29, 0xFF	; 255
    5122:	68 81       	ld	r22, Y
    5124:	79 81       	ldd	r23, Y+1	; 0x01
    5126:	8a 81       	ldd	r24, Y+2	; 0x02
    5128:	9b 81       	ldd	r25, Y+3	; 0x03
    512a:	c1 5c       	subi	r28, 0xC1	; 193
    512c:	d0 40       	sbci	r29, 0x00	; 0
    512e:	23 e0       	ldi	r18, 0x03	; 3
    5130:	22 2e       	mov	r2, r18
    5132:	81 2c       	mov	r8, r1
    5134:	91 2c       	mov	r9, r1
    5136:	54 01       	movw	r10, r8
    5138:	02 2d       	mov	r16, r2
    513a:	c9 53       	subi	r28, 0x39	; 57
    513c:	df 4f       	sbci	r29, 0xFF	; 255
    513e:	48 82       	st	Y, r4
    5140:	59 82       	std	Y+1, r5	; 0x01
    5142:	6a 82       	std	Y+2, r6	; 0x02
    5144:	7b 82       	std	Y+3, r7	; 0x03
    5146:	c7 5c       	subi	r28, 0xC7	; 199
    5148:	d0 40       	sbci	r29, 0x00	; 0
    514a:	9b 01       	movw	r18, r22
    514c:	ac 01       	movw	r20, r24
    514e:	e8 d1       	rcall	.+976    	; 0x5520 <__addsf3>
    5150:	2b 01       	movw	r4, r22
    5152:	3c 01       	movw	r6, r24
  //static vector v_w_old = { 0.0, 0.0, 0.0 };
  matrix m_temp;
  float n;
  uint8_t i, j;
  
  for(i = 0; i < 4; i++)
    5154:	cb 53       	subi	r28, 0x3B	; 59
    5156:	df 4f       	sbci	r29, 0xFF	; 255
    5158:	28 81       	ld	r18, Y
    515a:	39 81       	ldd	r19, Y+1	; 0x01
    515c:	c5 5c       	subi	r28, 0xC5	; 197
    515e:	d0 40       	sbci	r29, 0x00	; 0
    5160:	cd 54       	subi	r28, 0x4D	; 77
    5162:	df 4f       	sbci	r29, 0xFF	; 255
    5164:	39 83       	std	Y+1, r19	; 0x01
    5166:	28 83       	st	Y, r18
    5168:	c3 5b       	subi	r28, 0xB3	; 179
    516a:	d0 40       	sbci	r29, 0x00	; 0
    516c:	c3 54       	subi	r28, 0x43	; 67
    516e:	df 4f       	sbci	r29, 0xFF	; 255
    5170:	48 81       	ld	r20, Y
    5172:	59 81       	ldd	r21, Y+1	; 0x01
    5174:	cd 5b       	subi	r28, 0xBD	; 189
    5176:	d0 40       	sbci	r29, 0x00	; 0
    5178:	4c 5f       	subi	r20, 0xFC	; 252
    517a:	5f 4f       	sbci	r21, 0xFF	; 255
    517c:	cb 54       	subi	r28, 0x4B	; 75
    517e:	df 4f       	sbci	r29, 0xFF	; 255
    5180:	59 83       	std	Y+1, r21	; 0x01
    5182:	48 83       	st	Y, r20
    5184:	c5 5b       	subi	r28, 0xB5	; 181
    5186:	d0 40       	sbci	r29, 0x00	; 0
    5188:	c5 54       	subi	r28, 0x45	; 69
    518a:	df 4f       	sbci	r29, 0xFF	; 255
    518c:	88 81       	ld	r24, Y
    518e:	99 81       	ldd	r25, Y+1	; 0x01
    5190:	cb 5b       	subi	r28, 0xBB	; 187
    5192:	d0 40       	sbci	r29, 0x00	; 0
    5194:	04 96       	adiw	r24, 0x04	; 4
    5196:	cf 54       	subi	r28, 0x4F	; 79
    5198:	df 4f       	sbci	r29, 0xFF	; 255
    519a:	99 83       	std	Y+1, r25	; 0x01
    519c:	88 83       	st	Y, r24
    519e:	c1 5b       	subi	r28, 0xB1	; 177
    51a0:	d0 40       	sbci	r29, 0x00	; 0
    51a2:	c1 54       	subi	r28, 0x41	; 65
    51a4:	df 4f       	sbci	r29, 0xFF	; 255
    51a6:	28 80       	ld	r2, Y
    51a8:	39 80       	ldd	r3, Y+1	; 0x01
    51aa:	cf 5b       	subi	r28, 0xBF	; 191
    51ac:	d0 40       	sbci	r29, 0x00	; 0
    51ae:	cf 53       	subi	r28, 0x3F	; 63
    51b0:	df 4f       	sbci	r29, 0xFF	; 255
    51b2:	c8 80       	ld	r12, Y
    51b4:	d9 80       	ldd	r13, Y+1	; 0x01
    51b6:	ea 80       	ldd	r14, Y+2	; 0x02
    51b8:	fb 80       	ldd	r15, Y+3	; 0x03
    51ba:	c1 5c       	subi	r28, 0xC1	; 193
    51bc:	d0 40       	sbci	r29, 0x00	; 0
    51be:	13 e0       	ldi	r17, 0x03	; 3
    51c0:	c9 53       	subi	r28, 0x39	; 57
    51c2:	df 4f       	sbci	r29, 0xFF	; 255
    51c4:	68 81       	ld	r22, Y
    51c6:	79 81       	ldd	r23, Y+1	; 0x01
    51c8:	8a 81       	ldd	r24, Y+2	; 0x02
    51ca:	9b 81       	ldd	r25, Y+3	; 0x03
    51cc:	c7 5c       	subi	r28, 0xC7	; 199
    51ce:	d0 40       	sbci	r29, 0x00	; 0
    51d0:	a5 01       	movw	r20, r10
    51d2:	94 01       	movw	r18, r8
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
  {
    for(j = 0; j < 3; j++)
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
    51d4:	a4 d1       	rcall	.+840    	; 0x551e <__subsf3>
    51d6:	4b 01       	movw	r8, r22
    51d8:	5c 01       	movw	r10, r24
    51da:	a7 01       	movw	r20, r14
    51dc:	96 01       	movw	r18, r12
    51de:	c3 01       	movw	r24, r6
    51e0:	b2 01       	movw	r22, r4
    51e2:	a0 d4       	rcall	.+2368   	; 0x5b24 <__mulsf3>
    51e4:	c9 54       	subi	r28, 0x49	; 73
    51e6:	df 4f       	sbci	r29, 0xFF	; 255
    51e8:	28 81       	ld	r18, Y
    51ea:	39 81       	ldd	r19, Y+1	; 0x01
    51ec:	4a 81       	ldd	r20, Y+2	; 0x02
    51ee:	5b 81       	ldd	r21, Y+3	; 0x03
    51f0:	c7 5b       	subi	r28, 0xB7	; 183
    51f2:	d0 40       	sbci	r29, 0x00	; 0
    51f4:	79 d2       	rcall	.+1266   	; 0x56e8 <__divsf3>
    51f6:	9b 01       	movw	r18, r22
    51f8:	ac 01       	movw	r20, r24
    51fa:	c5 01       	movw	r24, r10
    51fc:	b4 01       	movw	r22, r8
    51fe:	90 d1       	rcall	.+800    	; 0x5520 <__addsf3>
    5200:	d1 01       	movw	r26, r2
    5202:	6d 93       	st	X+, r22
    5204:	7d 93       	st	X+, r23
    5206:	8d 93       	st	X+, r24
    5208:	9c 93       	st	X, r25
    520a:	13 97       	sbiw	r26, 0x03	; 3
    520c:	11 50       	subi	r17, 0x01	; 1
    520e:	bc e0       	ldi	r27, 0x0C	; 12
    5210:	2b 0e       	add	r2, r27
    5212:	31 1c       	adc	r3, r1
  matrix m_I = { { 2 * n, 0, 0 },
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
  {
    for(j = 0; j < 3; j++)
    5214:	11 23       	and	r17, r17
    5216:	89 f1       	breq	.+98     	; 0x527a <omega_estimation+0x44c>
    5218:	cf 54       	subi	r28, 0x4F	; 79
    521a:	df 4f       	sbci	r29, 0xFF	; 255
    521c:	e8 81       	ld	r30, Y
    521e:	f9 81       	ldd	r31, Y+1	; 0x01
    5220:	c1 5b       	subi	r28, 0xB1	; 177
    5222:	d0 40       	sbci	r29, 0x00	; 0
    5224:	61 91       	ld	r22, Z+
    5226:	71 91       	ld	r23, Z+
    5228:	81 91       	ld	r24, Z+
    522a:	91 91       	ld	r25, Z+
    522c:	cf 54       	subi	r28, 0x4F	; 79
    522e:	df 4f       	sbci	r29, 0xFF	; 255
    5230:	f9 83       	std	Y+1, r31	; 0x01
    5232:	e8 83       	st	Y, r30
    5234:	c1 5b       	subi	r28, 0xB1	; 177
    5236:	d0 40       	sbci	r29, 0x00	; 0
    5238:	cb 54       	subi	r28, 0x4B	; 75
    523a:	df 4f       	sbci	r29, 0xFF	; 255
    523c:	a8 81       	ld	r26, Y
    523e:	b9 81       	ldd	r27, Y+1	; 0x01
    5240:	c5 5b       	subi	r28, 0xB5	; 181
    5242:	d0 40       	sbci	r29, 0x00	; 0
    5244:	2d 91       	ld	r18, X+
    5246:	3d 91       	ld	r19, X+
    5248:	4d 91       	ld	r20, X+
    524a:	5d 91       	ld	r21, X+
    524c:	cb 54       	subi	r28, 0x4B	; 75
    524e:	df 4f       	sbci	r29, 0xFF	; 255
    5250:	b9 83       	std	Y+1, r27	; 0x01
    5252:	a8 83       	st	Y, r26
    5254:	c5 5b       	subi	r28, 0xB5	; 181
    5256:	d0 40       	sbci	r29, 0x00	; 0
    5258:	cd 54       	subi	r28, 0x4D	; 77
    525a:	df 4f       	sbci	r29, 0xFF	; 255
    525c:	e8 81       	ld	r30, Y
    525e:	f9 81       	ldd	r31, Y+1	; 0x01
    5260:	c3 5b       	subi	r28, 0xB3	; 179
    5262:	d0 40       	sbci	r29, 0x00	; 0
    5264:	c1 90       	ld	r12, Z+
    5266:	d1 90       	ld	r13, Z+
    5268:	e1 90       	ld	r14, Z+
    526a:	f1 90       	ld	r15, Z+
    526c:	cd 54       	subi	r28, 0x4D	; 77
    526e:	df 4f       	sbci	r29, 0xFF	; 255
    5270:	f9 83       	std	Y+1, r31	; 0x01
    5272:	e8 83       	st	Y, r30
    5274:	c3 5b       	subi	r28, 0xB3	; 179
    5276:	d0 40       	sbci	r29, 0x00	; 0
    5278:	ad cf       	rjmp	.-166    	; 0x51d4 <omega_estimation+0x3a6>
    527a:	01 50       	subi	r16, 0x01	; 1
    527c:	c5 54       	subi	r28, 0x45	; 69
    527e:	df 4f       	sbci	r29, 0xFF	; 255
    5280:	e8 81       	ld	r30, Y
    5282:	f9 81       	ldd	r31, Y+1	; 0x01
    5284:	cb 5b       	subi	r28, 0xBB	; 187
    5286:	d0 40       	sbci	r29, 0x00	; 0
    5288:	3c 96       	adiw	r30, 0x0c	; 12
    528a:	c5 54       	subi	r28, 0x45	; 69
    528c:	df 4f       	sbci	r29, 0xFF	; 255
    528e:	f9 83       	std	Y+1, r31	; 0x01
    5290:	e8 83       	st	Y, r30
    5292:	cb 5b       	subi	r28, 0xBB	; 187
    5294:	d0 40       	sbci	r29, 0x00	; 0
    5296:	c3 54       	subi	r28, 0x43	; 67
    5298:	df 4f       	sbci	r29, 0xFF	; 255
    529a:	28 81       	ld	r18, Y
    529c:	39 81       	ldd	r19, Y+1	; 0x01
    529e:	cd 5b       	subi	r28, 0xBD	; 189
    52a0:	d0 40       	sbci	r29, 0x00	; 0
    52a2:	24 5f       	subi	r18, 0xF4	; 244
    52a4:	3f 4f       	sbci	r19, 0xFF	; 255
    52a6:	c3 54       	subi	r28, 0x43	; 67
    52a8:	df 4f       	sbci	r29, 0xFF	; 255
    52aa:	39 83       	std	Y+1, r19	; 0x01
    52ac:	28 83       	st	Y, r18
    52ae:	cd 5b       	subi	r28, 0xBD	; 189
    52b0:	d0 40       	sbci	r29, 0x00	; 0
    52b2:	c1 54       	subi	r28, 0x41	; 65
    52b4:	df 4f       	sbci	r29, 0xFF	; 255
    52b6:	48 81       	ld	r20, Y
    52b8:	59 81       	ldd	r21, Y+1	; 0x01
    52ba:	cf 5b       	subi	r28, 0xBF	; 191
    52bc:	d0 40       	sbci	r29, 0x00	; 0
    52be:	4c 5f       	subi	r20, 0xFC	; 252
    52c0:	5f 4f       	sbci	r21, 0xFF	; 255
    52c2:	c1 54       	subi	r28, 0x41	; 65
    52c4:	df 4f       	sbci	r29, 0xFF	; 255
    52c6:	59 83       	std	Y+1, r21	; 0x01
    52c8:	48 83       	st	Y, r20
    52ca:	cf 5b       	subi	r28, 0xBF	; 191
    52cc:	d0 40       	sbci	r29, 0x00	; 0
                                              //{ 2 * e[2], 0, -2 * e[0] },
                                              //{ -2 * e[1], 2 * e[0], 0 } };
  matrix m_I = { { 2 * n, 0, 0 },
                 { 0, 2 * n, 0 },
                 { 0, 0, 2 * n } };
  for(i = 0; i< 3; i++)
    52ce:	00 23       	and	r16, r16
    52d0:	39 f1       	breq	.+78     	; 0x5320 <omega_estimation+0x4f2>
    52d2:	c5 53       	subi	r28, 0x35	; 53
    52d4:	df 4f       	sbci	r29, 0xFF	; 255
    52d6:	a8 81       	ld	r26, Y
    52d8:	b9 81       	ldd	r27, Y+1	; 0x01
    52da:	cb 5c       	subi	r28, 0xCB	; 203
    52dc:	d0 40       	sbci	r29, 0x00	; 0
    52de:	6d 91       	ld	r22, X+
    52e0:	7d 91       	ld	r23, X+
    52e2:	8d 91       	ld	r24, X+
    52e4:	9d 91       	ld	r25, X+
    52e6:	c5 53       	subi	r28, 0x35	; 53
    52e8:	df 4f       	sbci	r29, 0xFF	; 255
    52ea:	b9 83       	std	Y+1, r27	; 0x01
    52ec:	a8 83       	st	Y, r26
    52ee:	cb 5c       	subi	r28, 0xCB	; 203
    52f0:	d0 40       	sbci	r29, 0x00	; 0
    52f2:	20 81       	ld	r18, Z
    52f4:	31 81       	ldd	r19, Z+1	; 0x01
    52f6:	42 81       	ldd	r20, Z+2	; 0x02
    52f8:	53 81       	ldd	r21, Z+3	; 0x03
    52fa:	c9 53       	subi	r28, 0x39	; 57
    52fc:	df 4f       	sbci	r29, 0xFF	; 255
    52fe:	28 83       	st	Y, r18
    5300:	39 83       	std	Y+1, r19	; 0x01
    5302:	4a 83       	std	Y+2, r20	; 0x02
    5304:	5b 83       	std	Y+3, r21	; 0x03
    5306:	c7 5c       	subi	r28, 0xC7	; 199
    5308:	d0 40       	sbci	r29, 0x00	; 0
    530a:	c3 54       	subi	r28, 0x43	; 67
    530c:	df 4f       	sbci	r29, 0xFF	; 255
    530e:	e8 81       	ld	r30, Y
    5310:	f9 81       	ldd	r31, Y+1	; 0x01
    5312:	cd 5b       	subi	r28, 0xBD	; 189
    5314:	d0 40       	sbci	r29, 0x00	; 0
    5316:	80 80       	ld	r8, Z
    5318:	91 80       	ldd	r9, Z+1	; 0x01
    531a:	a2 80       	ldd	r10, Z+2	; 0x02
    531c:	b3 80       	ldd	r11, Z+3	; 0x03
    531e:	15 cf       	rjmp	.-470    	; 0x514a <omega_estimation+0x31c>
  {
    for(j = 0; j < 3; j++)
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
  }
  
  vector_into_matrix(de, m_temp, v_w_temp);
    5320:	ae 01       	movw	r20, r28
    5322:	43 57       	subi	r20, 0x73	; 115
    5324:	5f 4f       	sbci	r21, 0xFF	; 255
    5326:	be 01       	movw	r22, r28
    5328:	67 5b       	subi	r22, 0xB7	; 183
    532a:	7f 4f       	sbci	r23, 0xFF	; 255
    532c:	ce 01       	movw	r24, r28
    532e:	87 56       	subi	r24, 0x67	; 103
    5330:	9f 4f       	sbci	r25, 0xFF	; 255
    5332:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <vector_into_matrix>
    5336:	8e 01       	movw	r16, r28
    5338:	03 57       	subi	r16, 0x73	; 115
    533a:	1f 4f       	sbci	r17, 0xFF	; 255
    533c:	9f e9       	ldi	r25, 0x9F	; 159
    533e:	c9 2e       	mov	r12, r25
    5340:	94 e0       	ldi	r25, 0x04	; 4
    5342:	d9 2e       	mov	r13, r25
    5344:	c1 53       	subi	r28, 0x31	; 49
    5346:	df 4f       	sbci	r29, 0xFF	; 255
    5348:	e8 80       	ld	r14, Y
    534a:	cf 5c       	subi	r28, 0xCF	; 207
    534c:	d0 40       	sbci	r29, 0x00	; 0
    534e:	c0 53       	subi	r28, 0x30	; 48
    5350:	df 4f       	sbci	r29, 0xFF	; 255
    5352:	f8 80       	ld	r15, Y
    5354:	c0 5d       	subi	r28, 0xD0	; 208
    5356:	d0 40       	sbci	r29, 0x00	; 0
    5358:	18 01       	movw	r2, r16
    535a:	9c e0       	ldi	r25, 0x0C	; 12
    535c:	29 0e       	add	r2, r25
    535e:	31 1c       	adc	r3, r1
  
  for(i = 0; i < 3; i++)
    v_w[i] = A_F * v_w_temp[i] + (1 - A_F) * v_w_old[i];
    5360:	d8 01       	movw	r26, r16
    5362:	6d 91       	ld	r22, X+
    5364:	7d 91       	ld	r23, X+
    5366:	8d 91       	ld	r24, X+
    5368:	9d 91       	ld	r25, X+
    536a:	8d 01       	movw	r16, r26
    536c:	f6 01       	movw	r30, r12
    536e:	41 90       	ld	r4, Z+
    5370:	51 90       	ld	r5, Z+
    5372:	61 90       	ld	r6, Z+
    5374:	71 90       	ld	r7, Z+
    5376:	6f 01       	movw	r12, r30
    5378:	28 e0       	ldi	r18, 0x08	; 8
    537a:	31 e2       	ldi	r19, 0x21	; 33
    537c:	44 e0       	ldi	r20, 0x04	; 4
    537e:	5d e3       	ldi	r21, 0x3D	; 61
    5380:	d1 d3       	rcall	.+1954   	; 0x5b24 <__mulsf3>
    5382:	4b 01       	movw	r8, r22
    5384:	5c 01       	movw	r10, r24
    5386:	20 ef       	ldi	r18, 0xF0	; 240
    5388:	3d eb       	ldi	r19, 0xBD	; 189
    538a:	47 e7       	ldi	r20, 0x77	; 119
    538c:	5f e3       	ldi	r21, 0x3F	; 63
    538e:	c3 01       	movw	r24, r6
    5390:	b2 01       	movw	r22, r4
    5392:	c8 d3       	rcall	.+1936   	; 0x5b24 <__mulsf3>
    5394:	9b 01       	movw	r18, r22
    5396:	ac 01       	movw	r20, r24
    5398:	c5 01       	movw	r24, r10
    539a:	b4 01       	movw	r22, r8
    539c:	c1 d0       	rcall	.+386    	; 0x5520 <__addsf3>
    539e:	d7 01       	movw	r26, r14
    53a0:	6d 93       	st	X+, r22
    53a2:	7d 93       	st	X+, r23
    53a4:	8d 93       	st	X+, r24
    53a6:	9d 93       	st	X+, r25
    53a8:	7d 01       	movw	r14, r26
      m_temp[j][i] = m_I[i][j] - m_ex[i][j] + ((2 * e[i] * e[j]) / n);
  }
  
  vector_into_matrix(de, m_temp, v_w_temp);
  
  for(i = 0; i < 3; i++)
    53aa:	02 15       	cp	r16, r2
    53ac:	13 05       	cpc	r17, r3
    53ae:	c1 f6       	brne	.-80     	; 0x5360 <omega_estimation+0x532>
    v_w[i] = A_F * v_w_temp[i] + (1 - A_F) * v_w_old[i];
  
  copy_quaternion(q_B, q_B_old);
    53b0:	6b ea       	ldi	r22, 0xAB	; 171
    53b2:	74 e0       	ldi	r23, 0x04	; 4
    53b4:	c3 53       	subi	r28, 0x33	; 51
    53b6:	df 4f       	sbci	r29, 0xFF	; 255
    53b8:	88 81       	ld	r24, Y
    53ba:	cd 5c       	subi	r28, 0xCD	; 205
    53bc:	d0 40       	sbci	r29, 0x00	; 0
    53be:	c2 53       	subi	r28, 0x32	; 50
    53c0:	df 4f       	sbci	r29, 0xFF	; 255
    53c2:	98 81       	ld	r25, Y
    53c4:	ce 5c       	subi	r28, 0xCE	; 206
    53c6:	d0 40       	sbci	r29, 0x00	; 0
    53c8:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <copy_quaternion>
  copy_vector(v_w, v_w_old);// order of 10000
    53cc:	6f e9       	ldi	r22, 0x9F	; 159
    53ce:	74 e0       	ldi	r23, 0x04	; 4
    53d0:	c1 53       	subi	r28, 0x31	; 49
    53d2:	df 4f       	sbci	r29, 0xFF	; 255
    53d4:	88 81       	ld	r24, Y
    53d6:	cf 5c       	subi	r28, 0xCF	; 207
    53d8:	d0 40       	sbci	r29, 0x00	; 0
    53da:	c0 53       	subi	r28, 0x30	; 48
    53dc:	df 4f       	sbci	r29, 0xFF	; 255
    53de:	98 81       	ld	r25, Y
    53e0:	c0 5d       	subi	r28, 0xD0	; 208
    53e2:	d0 40       	sbci	r29, 0x00	; 0
    53e4:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <copy_vector>
	/*if(v_m[i]<0)
	transmit_UART0(0x01);
	else
	transmit_UART0(0x00);
} */ 
}
    53e8:	c0 53       	subi	r28, 0x30	; 48
    53ea:	df 4f       	sbci	r29, 0xFF	; 255
    53ec:	0f b6       	in	r0, 0x3f	; 63
    53ee:	f8 94       	cli
    53f0:	de bf       	out	0x3e, r29	; 62
    53f2:	0f be       	out	0x3f, r0	; 63
    53f4:	cd bf       	out	0x3d, r28	; 61
    53f6:	df 91       	pop	r29
    53f8:	cf 91       	pop	r28
    53fa:	1f 91       	pop	r17
    53fc:	0f 91       	pop	r16
    53fe:	ff 90       	pop	r15
    5400:	ef 90       	pop	r14
    5402:	df 90       	pop	r13
    5404:	cf 90       	pop	r12
    5406:	bf 90       	pop	r11
    5408:	af 90       	pop	r10
    540a:	9f 90       	pop	r9
    540c:	8f 90       	pop	r8
    540e:	7f 90       	pop	r7
    5410:	6f 90       	pop	r6
    5412:	5f 90       	pop	r5
    5414:	4f 90       	pop	r4
    5416:	3f 90       	pop	r3
    5418:	2f 90       	pop	r2
    541a:	08 95       	ret

0000541c <init_SPI>:
}

void init_SPI(void)
{
  ///Set MOSI and SCK output, all others input
  DDRB = 0;
    541c:	17 ba       	out	0x17, r1	; 23
  DDRB = _BV(SPICLK) | _BV(SPIDO);
    541e:	86 e0       	ldi	r24, 0x06	; 6
    5420:	87 bb       	out	0x17, r24	; 23
  
  
  DDR_CS |= _BV(SLAVE) | _BV(CC1020) | _BV(ADC_S);
    5422:	87 b3       	in	r24, 0x17	; 23
    5424:	81 63       	ori	r24, 0x31	; 49
    5426:	87 bb       	out	0x17, r24	; 23
  ///Switch off all devices
  PORT_CS |=_BV(SLAVE) | _BV(CC1020) | _BV(ADC_S);
    5428:	88 b3       	in	r24, 0x18	; 24
    542a:	81 63       	ori	r24, 0x31	; 49
    542c:	88 bb       	out	0x18, r24	; 24
  
  ///Enable SPI, Master, set clock rate
  ///@todo Check frequency 
  SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1);
    542e:	83 e5       	ldi	r24, 0x53	; 83
    5430:	8d b9       	out	0x0d, r24	; 13
    5432:	08 95       	ret

00005434 <poll_SS>:
  
  SPI_transfer(0b00000000);
}

void poll_SS(void)
{
    5434:	ef 92       	push	r14
    5436:	ff 92       	push	r15
    5438:	0f 93       	push	r16
    543a:	1f 93       	push	r17
    543c:	cf 93       	push	r28
    543e:	df 93       	push	r29
    5440:	00 e0       	ldi	r16, 0x00	; 0
    5442:	10 e0       	ldi	r17, 0x00	; 0
  //transmit_UART0(c);
 
  while(channel <= 5)
  {
    ///* Put the ADC reading in the appropriate variable
    Current_state.ss.reading[channel] = (uint16_t)receive_UART0();
    5444:	5a d0       	rcall	.+180    	; 0x54fa <receive_UART0>
    5446:	e8 01       	movw	r28, r16
    5448:	cc 0f       	add	r28, r28
    544a:	dd 1f       	adc	r29, r29
    544c:	cd 52       	subi	r28, 0x2D	; 45
    544e:	db 4f       	sbci	r29, 0xFB	; 251
    5450:	98 ab       	std	Y+48, r25	; 0x30
    5452:	8f a7       	std	Y+47, r24	; 0x2f
    Current_state.ss.reading[channel] = Current_state.ss.reading[channel] << 8;
    5454:	8f a5       	ldd	r24, Y+47	; 0x2f
    5456:	98 a9       	ldd	r25, Y+48	; 0x30
    5458:	98 2f       	mov	r25, r24
    545a:	88 27       	eor	r24, r24
    545c:	98 ab       	std	Y+48, r25	; 0x30
    545e:	8f a7       	std	Y+47, r24	; 0x2f
    Current_state.ss.reading[channel] &= 0xFF00;
    5460:	8f a5       	ldd	r24, Y+47	; 0x2f
    5462:	98 a9       	ldd	r25, Y+48	; 0x30
    5464:	88 27       	eor	r24, r24
    5466:	98 ab       	std	Y+48, r25	; 0x30
    5468:	8f a7       	std	Y+47, r24	; 0x2f
    Current_state.ss.reading[channel] |= (uint16_t)receive_UART0();
    546a:	ef a4       	ldd	r14, Y+47	; 0x2f
    546c:	f8 a8       	ldd	r15, Y+48	; 0x30
    546e:	45 d0       	rcall	.+138    	; 0x54fa <receive_UART0>
    5470:	8e 29       	or	r24, r14
    5472:	9f 29       	or	r25, r15
    5474:	98 ab       	std	Y+48, r25	; 0x30
    5476:	8f a7       	std	Y+47, r24	; 0x2f
    5478:	0f 5f       	subi	r16, 0xFF	; 255
    547a:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t channel = 0;
  //uint8_t c= 100;
  ///Loop for reading the 6 sun sensor values
  //transmit_UART0(c);
 
  while(channel <= 5)
    547c:	06 30       	cpi	r16, 0x06	; 6
    547e:	11 05       	cpc	r17, r1
    5480:	09 f7       	brne	.-62     	; 0x5444 <poll_SS+0x10>
    5482:	c0 e0       	ldi	r28, 0x00	; 0
    5484:	d0 e0       	ldi	r29, 0x00	; 0
    channel++;
	
  }
  for (int i=0;i<6;i=i+1)
  {
	  Current_state.ss.read[i] = (float)(Current_state.ss.reading[i]*(3.3/1024));
    5486:	fe 01       	movw	r30, r28
    5488:	ee 0f       	add	r30, r30
    548a:	ff 1f       	adc	r31, r31
    548c:	ed 52       	subi	r30, 0x2D	; 45
    548e:	fb 4f       	sbci	r31, 0xFB	; 251
    5490:	67 a5       	ldd	r22, Z+47	; 0x2f
    5492:	70 a9       	ldd	r23, Z+48	; 0x30
    5494:	80 e0       	ldi	r24, 0x00	; 0
    5496:	90 e0       	ldi	r25, 0x00	; 0
    5498:	c0 d1       	rcall	.+896    	; 0x581a <__floatunsisf>
    549a:	23 e3       	ldi	r18, 0x33	; 51
    549c:	33 e3       	ldi	r19, 0x33	; 51
    549e:	43 e5       	ldi	r20, 0x53	; 83
    54a0:	5b e3       	ldi	r21, 0x3B	; 59
    54a2:	40 d3       	rcall	.+1664   	; 0x5b24 <__mulsf3>
    54a4:	fe 01       	movw	r30, r28
    54a6:	ee 0f       	add	r30, r30
    54a8:	ff 1f       	adc	r31, r31
    54aa:	ee 0f       	add	r30, r30
    54ac:	ff 1f       	adc	r31, r31
    54ae:	e1 52       	subi	r30, 0x21	; 33
    54b0:	fb 4f       	sbci	r31, 0xFB	; 251
    54b2:	67 a7       	std	Z+47, r22	; 0x2f
    54b4:	70 ab       	std	Z+48, r23	; 0x30
    54b6:	81 ab       	std	Z+49, r24	; 0x31
    54b8:	92 ab       	std	Z+50, r25	; 0x32
    Current_state.ss.reading[channel] &= 0xFF00;
    Current_state.ss.reading[channel] |= (uint16_t)receive_UART0();
    channel++;
	
  }
  for (int i=0;i<6;i=i+1)
    54ba:	21 96       	adiw	r28, 0x01	; 1
    54bc:	c6 30       	cpi	r28, 0x06	; 6
    54be:	d1 05       	cpc	r29, r1
    54c0:	11 f7       	brne	.-60     	; 0x5486 <poll_SS+0x52>
	  transmit_UART0(sen);
  }*/
  ///Power Down PD low
  //cbi(PORTB, PB6);
return;  
}
    54c2:	df 91       	pop	r29
    54c4:	cf 91       	pop	r28
    54c6:	1f 91       	pop	r17
    54c8:	0f 91       	pop	r16
    54ca:	ff 90       	pop	r15
    54cc:	ef 90       	pop	r14
    54ce:	08 95       	ret

000054d0 <init_UART0>:

uint8_t receive_UART1(void)
{
  while ((UCSR1A & (1 << RXC1)) == 0);
  return UDR1;
}
    54d0:	1b b8       	out	0x0b, r1	; 11
    54d2:	1a b8       	out	0x0a, r1	; 10
    54d4:	e5 e9       	ldi	r30, 0x95	; 149
    54d6:	f0 e0       	ldi	r31, 0x00	; 0
    54d8:	10 82       	st	Z, r1
    54da:	59 9a       	sbi	0x0b, 1	; 11
    54dc:	8a b1       	in	r24, 0x0a	; 10
    54de:	88 61       	ori	r24, 0x18	; 24
    54e0:	8a b9       	out	0x0a, r24	; 10
    54e2:	80 81       	ld	r24, Z
    54e4:	8e 60       	ori	r24, 0x0E	; 14
    54e6:	80 83       	st	Z, r24
    54e8:	87 e6       	ldi	r24, 0x67	; 103
    54ea:	89 b9       	out	0x09, r24	; 9
    54ec:	10 92 90 00 	sts	0x0090, r1
    54f0:	08 95       	ret

000054f2 <transmit_UART0>:
    54f2:	5d 9b       	sbis	0x0b, 5	; 11
    54f4:	fe cf       	rjmp	.-4      	; 0x54f2 <transmit_UART0>
    54f6:	8c b9       	out	0x0c, r24	; 12
    54f8:	08 95       	ret

000054fa <receive_UART0>:

uint8_t receive_UART0(void)
{
  while ((UCSR0A & (1 << RXC0)) == 0);
    54fa:	5f 9b       	sbis	0x0b, 7	; 11
    54fc:	fe cf       	rjmp	.-4      	; 0x54fa <receive_UART0>
  return UDR0;
    54fe:	8c b1       	in	r24, 0x0c	; 12
}
    5500:	08 95       	ret

00005502 <acos>:
    5502:	9f 93       	push	r25
    5504:	9f 77       	andi	r25, 0x7F	; 127
    5506:	04 d2       	rcall	.+1032   	; 0x5910 <__fp_arccos>
    5508:	0f 90       	pop	r0
    550a:	00 20       	and	r0, r0
    550c:	3a f4       	brpl	.+14     	; 0x551c <acos+0x1a>
    550e:	90 58       	subi	r25, 0x80	; 128
    5510:	a2 ea       	ldi	r26, 0xA2	; 162
    5512:	2a ed       	ldi	r18, 0xDA	; 218
    5514:	3f e0       	ldi	r19, 0x0F	; 15
    5516:	49 e4       	ldi	r20, 0x49	; 73
    5518:	50 e4       	ldi	r21, 0x40	; 64
    551a:	13 d0       	rcall	.+38     	; 0x5542 <__addsf3x>
    551c:	ad c2       	rjmp	.+1370   	; 0x5a78 <__fp_round>

0000551e <__subsf3>:
    551e:	50 58       	subi	r21, 0x80	; 128

00005520 <__addsf3>:
    5520:	bb 27       	eor	r27, r27
    5522:	aa 27       	eor	r26, r26
    5524:	0e d0       	rcall	.+28     	; 0x5542 <__addsf3x>
    5526:	a8 c2       	rjmp	.+1360   	; 0x5a78 <__fp_round>
    5528:	71 d2       	rcall	.+1250   	; 0x5a0c <__fp_pscA>
    552a:	30 f0       	brcs	.+12     	; 0x5538 <__addsf3+0x18>
    552c:	76 d2       	rcall	.+1260   	; 0x5a1a <__fp_pscB>
    552e:	20 f0       	brcs	.+8      	; 0x5538 <__addsf3+0x18>
    5530:	31 f4       	brne	.+12     	; 0x553e <__addsf3+0x1e>
    5532:	9f 3f       	cpi	r25, 0xFF	; 255
    5534:	11 f4       	brne	.+4      	; 0x553a <__addsf3+0x1a>
    5536:	1e f4       	brtc	.+6      	; 0x553e <__addsf3+0x1e>
    5538:	30 c2       	rjmp	.+1120   	; 0x599a <__fp_nan>
    553a:	0e f4       	brtc	.+2      	; 0x553e <__addsf3+0x1e>
    553c:	e0 95       	com	r30
    553e:	e7 fb       	bst	r30, 7
    5540:	26 c2       	rjmp	.+1100   	; 0x598e <__fp_inf>

00005542 <__addsf3x>:
    5542:	e9 2f       	mov	r30, r25
    5544:	bb d2       	rcall	.+1398   	; 0x5abc <__fp_split3>
    5546:	80 f3       	brcs	.-32     	; 0x5528 <__addsf3+0x8>
    5548:	ba 17       	cp	r27, r26
    554a:	62 07       	cpc	r22, r18
    554c:	73 07       	cpc	r23, r19
    554e:	84 07       	cpc	r24, r20
    5550:	95 07       	cpc	r25, r21
    5552:	18 f0       	brcs	.+6      	; 0x555a <__addsf3x+0x18>
    5554:	71 f4       	brne	.+28     	; 0x5572 <__addsf3x+0x30>
    5556:	9e f5       	brtc	.+102    	; 0x55be <__addsf3x+0x7c>
    5558:	d3 c2       	rjmp	.+1446   	; 0x5b00 <__fp_zero>
    555a:	0e f4       	brtc	.+2      	; 0x555e <__addsf3x+0x1c>
    555c:	e0 95       	com	r30
    555e:	0b 2e       	mov	r0, r27
    5560:	ba 2f       	mov	r27, r26
    5562:	a0 2d       	mov	r26, r0
    5564:	0b 01       	movw	r0, r22
    5566:	b9 01       	movw	r22, r18
    5568:	90 01       	movw	r18, r0
    556a:	0c 01       	movw	r0, r24
    556c:	ca 01       	movw	r24, r20
    556e:	a0 01       	movw	r20, r0
    5570:	11 24       	eor	r1, r1
    5572:	ff 27       	eor	r31, r31
    5574:	59 1b       	sub	r21, r25
    5576:	99 f0       	breq	.+38     	; 0x559e <__addsf3x+0x5c>
    5578:	59 3f       	cpi	r21, 0xF9	; 249
    557a:	50 f4       	brcc	.+20     	; 0x5590 <__addsf3x+0x4e>
    557c:	50 3e       	cpi	r21, 0xE0	; 224
    557e:	68 f1       	brcs	.+90     	; 0x55da <__addsf3x+0x98>
    5580:	1a 16       	cp	r1, r26
    5582:	f0 40       	sbci	r31, 0x00	; 0
    5584:	a2 2f       	mov	r26, r18
    5586:	23 2f       	mov	r18, r19
    5588:	34 2f       	mov	r19, r20
    558a:	44 27       	eor	r20, r20
    558c:	58 5f       	subi	r21, 0xF8	; 248
    558e:	f3 cf       	rjmp	.-26     	; 0x5576 <__addsf3x+0x34>
    5590:	46 95       	lsr	r20
    5592:	37 95       	ror	r19
    5594:	27 95       	ror	r18
    5596:	a7 95       	ror	r26
    5598:	f0 40       	sbci	r31, 0x00	; 0
    559a:	53 95       	inc	r21
    559c:	c9 f7       	brne	.-14     	; 0x5590 <__addsf3x+0x4e>
    559e:	7e f4       	brtc	.+30     	; 0x55be <__addsf3x+0x7c>
    55a0:	1f 16       	cp	r1, r31
    55a2:	ba 0b       	sbc	r27, r26
    55a4:	62 0b       	sbc	r22, r18
    55a6:	73 0b       	sbc	r23, r19
    55a8:	84 0b       	sbc	r24, r20
    55aa:	ba f0       	brmi	.+46     	; 0x55da <__addsf3x+0x98>
    55ac:	91 50       	subi	r25, 0x01	; 1
    55ae:	a1 f0       	breq	.+40     	; 0x55d8 <__addsf3x+0x96>
    55b0:	ff 0f       	add	r31, r31
    55b2:	bb 1f       	adc	r27, r27
    55b4:	66 1f       	adc	r22, r22
    55b6:	77 1f       	adc	r23, r23
    55b8:	88 1f       	adc	r24, r24
    55ba:	c2 f7       	brpl	.-16     	; 0x55ac <__addsf3x+0x6a>
    55bc:	0e c0       	rjmp	.+28     	; 0x55da <__addsf3x+0x98>
    55be:	ba 0f       	add	r27, r26
    55c0:	62 1f       	adc	r22, r18
    55c2:	73 1f       	adc	r23, r19
    55c4:	84 1f       	adc	r24, r20
    55c6:	48 f4       	brcc	.+18     	; 0x55da <__addsf3x+0x98>
    55c8:	87 95       	ror	r24
    55ca:	77 95       	ror	r23
    55cc:	67 95       	ror	r22
    55ce:	b7 95       	ror	r27
    55d0:	f7 95       	ror	r31
    55d2:	9e 3f       	cpi	r25, 0xFE	; 254
    55d4:	08 f0       	brcs	.+2      	; 0x55d8 <__addsf3x+0x96>
    55d6:	b3 cf       	rjmp	.-154    	; 0x553e <__addsf3+0x1e>
    55d8:	93 95       	inc	r25
    55da:	88 0f       	add	r24, r24
    55dc:	08 f0       	brcs	.+2      	; 0x55e0 <__addsf3x+0x9e>
    55de:	99 27       	eor	r25, r25
    55e0:	ee 0f       	add	r30, r30
    55e2:	97 95       	ror	r25
    55e4:	87 95       	ror	r24
    55e6:	08 95       	ret

000055e8 <asin>:
    55e8:	9f 93       	push	r25
    55ea:	9f 77       	andi	r25, 0x7F	; 127
    55ec:	ee e3       	ldi	r30, 0x3E	; 62
    55ee:	89 37       	cpi	r24, 0x79	; 121
    55f0:	9e 07       	cpc	r25, r30
    55f2:	20 f4       	brcc	.+8      	; 0x55fc <asin+0x14>
    55f4:	ec e8       	ldi	r30, 0x8C	; 140
    55f6:	f0 e0       	ldi	r31, 0x00	; 0
    55f8:	f8 d1       	rcall	.+1008   	; 0x59ea <__fp_powsodd>
    55fa:	09 c0       	rjmp	.+18     	; 0x560e <asin+0x26>
    55fc:	89 d1       	rcall	.+786    	; 0x5910 <__fp_arccos>
    55fe:	90 58       	subi	r25, 0x80	; 128
    5600:	a2 ea       	ldi	r26, 0xA2	; 162
    5602:	2a ed       	ldi	r18, 0xDA	; 218
    5604:	3f e0       	ldi	r19, 0x0F	; 15
    5606:	49 ec       	ldi	r20, 0xC9	; 201
    5608:	5f e3       	ldi	r21, 0x3F	; 63
    560a:	9b df       	rcall	.-202    	; 0x5542 <__addsf3x>
    560c:	35 d2       	rcall	.+1130   	; 0x5a78 <__fp_round>
    560e:	0f 90       	pop	r0
    5610:	07 fc       	sbrc	r0, 7
    5612:	90 58       	subi	r25, 0x80	; 128
    5614:	08 95       	ret
    5616:	fa d1       	rcall	.+1012   	; 0x5a0c <__fp_pscA>
    5618:	58 f0       	brcs	.+22     	; 0x5630 <asin+0x48>
    561a:	80 e8       	ldi	r24, 0x80	; 128
    561c:	91 e0       	ldi	r25, 0x01	; 1
    561e:	09 f4       	brne	.+2      	; 0x5622 <asin+0x3a>
    5620:	9e ef       	ldi	r25, 0xFE	; 254
    5622:	fb d1       	rcall	.+1014   	; 0x5a1a <__fp_pscB>
    5624:	28 f0       	brcs	.+10     	; 0x5630 <asin+0x48>
    5626:	40 e8       	ldi	r20, 0x80	; 128
    5628:	51 e0       	ldi	r21, 0x01	; 1
    562a:	59 f4       	brne	.+22     	; 0x5642 <atan2+0xe>
    562c:	5e ef       	ldi	r21, 0xFE	; 254
    562e:	09 c0       	rjmp	.+18     	; 0x5642 <atan2+0xe>
    5630:	b4 c1       	rjmp	.+872    	; 0x599a <__fp_nan>
    5632:	66 c2       	rjmp	.+1228   	; 0x5b00 <__fp_zero>

00005634 <atan2>:
    5634:	e9 2f       	mov	r30, r25
    5636:	e0 78       	andi	r30, 0x80	; 128
    5638:	41 d2       	rcall	.+1154   	; 0x5abc <__fp_split3>
    563a:	68 f3       	brcs	.-38     	; 0x5616 <asin+0x2e>
    563c:	09 2e       	mov	r0, r25
    563e:	05 2a       	or	r0, r21
    5640:	c1 f3       	breq	.-16     	; 0x5632 <asin+0x4a>
    5642:	26 17       	cp	r18, r22
    5644:	37 07       	cpc	r19, r23
    5646:	48 07       	cpc	r20, r24
    5648:	59 07       	cpc	r21, r25
    564a:	38 f0       	brcs	.+14     	; 0x565a <atan2+0x26>
    564c:	0e 2e       	mov	r0, r30
    564e:	07 f8       	bld	r0, 7
    5650:	e0 25       	eor	r30, r0
    5652:	69 f0       	breq	.+26     	; 0x566e <atan2+0x3a>
    5654:	e0 25       	eor	r30, r0
    5656:	e0 64       	ori	r30, 0x40	; 64
    5658:	0a c0       	rjmp	.+20     	; 0x566e <atan2+0x3a>
    565a:	ef 63       	ori	r30, 0x3F	; 63
    565c:	07 f8       	bld	r0, 7
    565e:	00 94       	com	r0
    5660:	07 fa       	bst	r0, 7
    5662:	db 01       	movw	r26, r22
    5664:	b9 01       	movw	r22, r18
    5666:	9d 01       	movw	r18, r26
    5668:	dc 01       	movw	r26, r24
    566a:	ca 01       	movw	r24, r20
    566c:	ad 01       	movw	r20, r26
    566e:	ef 93       	push	r30
    5670:	4a d0       	rcall	.+148    	; 0x5706 <__divsf3_pse>
    5672:	02 d2       	rcall	.+1028   	; 0x5a78 <__fp_round>
    5674:	0a d0       	rcall	.+20     	; 0x568a <atan>
    5676:	5f 91       	pop	r21
    5678:	55 23       	and	r21, r21
    567a:	31 f0       	breq	.+12     	; 0x5688 <atan2+0x54>
    567c:	2b ed       	ldi	r18, 0xDB	; 219
    567e:	3f e0       	ldi	r19, 0x0F	; 15
    5680:	49 e4       	ldi	r20, 0x49	; 73
    5682:	50 fd       	sbrc	r21, 0
    5684:	49 ec       	ldi	r20, 0xC9	; 201
    5686:	4c cf       	rjmp	.-360    	; 0x5520 <__addsf3>
    5688:	08 95       	ret

0000568a <atan>:
    568a:	df 93       	push	r29
    568c:	dd 27       	eor	r29, r29
    568e:	b9 2f       	mov	r27, r25
    5690:	bf 77       	andi	r27, 0x7F	; 127
    5692:	40 e8       	ldi	r20, 0x80	; 128
    5694:	5f e3       	ldi	r21, 0x3F	; 63
    5696:	16 16       	cp	r1, r22
    5698:	17 06       	cpc	r1, r23
    569a:	48 07       	cpc	r20, r24
    569c:	5b 07       	cpc	r21, r27
    569e:	10 f4       	brcc	.+4      	; 0x56a4 <atan+0x1a>
    56a0:	d9 2f       	mov	r29, r25
    56a2:	39 d2       	rcall	.+1138   	; 0x5b16 <inverse>
    56a4:	9f 93       	push	r25
    56a6:	8f 93       	push	r24
    56a8:	7f 93       	push	r23
    56aa:	6f 93       	push	r22
    56ac:	32 d3       	rcall	.+1636   	; 0x5d12 <square>
    56ae:	e0 ea       	ldi	r30, 0xA0	; 160
    56b0:	f0 e0       	ldi	r31, 0x00	; 0
    56b2:	76 d1       	rcall	.+748    	; 0x59a0 <__fp_powser>
    56b4:	e1 d1       	rcall	.+962    	; 0x5a78 <__fp_round>
    56b6:	2f 91       	pop	r18
    56b8:	3f 91       	pop	r19
    56ba:	4f 91       	pop	r20
    56bc:	5f 91       	pop	r21
    56be:	3e d2       	rcall	.+1148   	; 0x5b3c <__mulsf3x>
    56c0:	dd 23       	and	r29, r29
    56c2:	49 f0       	breq	.+18     	; 0x56d6 <atan+0x4c>
    56c4:	90 58       	subi	r25, 0x80	; 128
    56c6:	a2 ea       	ldi	r26, 0xA2	; 162
    56c8:	2a ed       	ldi	r18, 0xDA	; 218
    56ca:	3f e0       	ldi	r19, 0x0F	; 15
    56cc:	49 ec       	ldi	r20, 0xC9	; 201
    56ce:	5f e3       	ldi	r21, 0x3F	; 63
    56d0:	d0 78       	andi	r29, 0x80	; 128
    56d2:	5d 27       	eor	r21, r29
    56d4:	36 df       	rcall	.-404    	; 0x5542 <__addsf3x>
    56d6:	df 91       	pop	r29
    56d8:	cf c1       	rjmp	.+926    	; 0x5a78 <__fp_round>

000056da <__cmpsf2>:
    56da:	35 d1       	rcall	.+618    	; 0x5946 <__fp_cmp>
    56dc:	08 f4       	brcc	.+2      	; 0x56e0 <__cmpsf2+0x6>
    56de:	81 e0       	ldi	r24, 0x01	; 1
    56e0:	08 95       	ret

000056e2 <cos>:
    56e2:	a3 d1       	rcall	.+838    	; 0x5a2a <__fp_rempio2>
    56e4:	e3 95       	inc	r30
    56e6:	d9 c1       	rjmp	.+946    	; 0x5a9a <__fp_sinus>

000056e8 <__divsf3>:
    56e8:	0c d0       	rcall	.+24     	; 0x5702 <__divsf3x>
    56ea:	c6 c1       	rjmp	.+908    	; 0x5a78 <__fp_round>
    56ec:	96 d1       	rcall	.+812    	; 0x5a1a <__fp_pscB>
    56ee:	40 f0       	brcs	.+16     	; 0x5700 <__divsf3+0x18>
    56f0:	8d d1       	rcall	.+794    	; 0x5a0c <__fp_pscA>
    56f2:	30 f0       	brcs	.+12     	; 0x5700 <__divsf3+0x18>
    56f4:	21 f4       	brne	.+8      	; 0x56fe <__divsf3+0x16>
    56f6:	5f 3f       	cpi	r21, 0xFF	; 255
    56f8:	19 f0       	breq	.+6      	; 0x5700 <__divsf3+0x18>
    56fa:	49 c1       	rjmp	.+658    	; 0x598e <__fp_inf>
    56fc:	51 11       	cpse	r21, r1
    56fe:	01 c2       	rjmp	.+1026   	; 0x5b02 <__fp_szero>
    5700:	4c c1       	rjmp	.+664    	; 0x599a <__fp_nan>

00005702 <__divsf3x>:
    5702:	dc d1       	rcall	.+952    	; 0x5abc <__fp_split3>
    5704:	98 f3       	brcs	.-26     	; 0x56ec <__divsf3+0x4>

00005706 <__divsf3_pse>:
    5706:	99 23       	and	r25, r25
    5708:	c9 f3       	breq	.-14     	; 0x56fc <__divsf3+0x14>
    570a:	55 23       	and	r21, r21
    570c:	b1 f3       	breq	.-20     	; 0x56fa <__divsf3+0x12>
    570e:	95 1b       	sub	r25, r21
    5710:	55 0b       	sbc	r21, r21
    5712:	bb 27       	eor	r27, r27
    5714:	aa 27       	eor	r26, r26
    5716:	62 17       	cp	r22, r18
    5718:	73 07       	cpc	r23, r19
    571a:	84 07       	cpc	r24, r20
    571c:	38 f0       	brcs	.+14     	; 0x572c <__divsf3_pse+0x26>
    571e:	9f 5f       	subi	r25, 0xFF	; 255
    5720:	5f 4f       	sbci	r21, 0xFF	; 255
    5722:	22 0f       	add	r18, r18
    5724:	33 1f       	adc	r19, r19
    5726:	44 1f       	adc	r20, r20
    5728:	aa 1f       	adc	r26, r26
    572a:	a9 f3       	breq	.-22     	; 0x5716 <__divsf3_pse+0x10>
    572c:	33 d0       	rcall	.+102    	; 0x5794 <__divsf3_pse+0x8e>
    572e:	0e 2e       	mov	r0, r30
    5730:	3a f0       	brmi	.+14     	; 0x5740 <__divsf3_pse+0x3a>
    5732:	e0 e8       	ldi	r30, 0x80	; 128
    5734:	30 d0       	rcall	.+96     	; 0x5796 <__divsf3_pse+0x90>
    5736:	91 50       	subi	r25, 0x01	; 1
    5738:	50 40       	sbci	r21, 0x00	; 0
    573a:	e6 95       	lsr	r30
    573c:	00 1c       	adc	r0, r0
    573e:	ca f7       	brpl	.-14     	; 0x5732 <__divsf3_pse+0x2c>
    5740:	29 d0       	rcall	.+82     	; 0x5794 <__divsf3_pse+0x8e>
    5742:	fe 2f       	mov	r31, r30
    5744:	27 d0       	rcall	.+78     	; 0x5794 <__divsf3_pse+0x8e>
    5746:	66 0f       	add	r22, r22
    5748:	77 1f       	adc	r23, r23
    574a:	88 1f       	adc	r24, r24
    574c:	bb 1f       	adc	r27, r27
    574e:	26 17       	cp	r18, r22
    5750:	37 07       	cpc	r19, r23
    5752:	48 07       	cpc	r20, r24
    5754:	ab 07       	cpc	r26, r27
    5756:	b0 e8       	ldi	r27, 0x80	; 128
    5758:	09 f0       	breq	.+2      	; 0x575c <__divsf3_pse+0x56>
    575a:	bb 0b       	sbc	r27, r27
    575c:	80 2d       	mov	r24, r0
    575e:	bf 01       	movw	r22, r30
    5760:	ff 27       	eor	r31, r31
    5762:	93 58       	subi	r25, 0x83	; 131
    5764:	5f 4f       	sbci	r21, 0xFF	; 255
    5766:	2a f0       	brmi	.+10     	; 0x5772 <__divsf3_pse+0x6c>
    5768:	9e 3f       	cpi	r25, 0xFE	; 254
    576a:	51 05       	cpc	r21, r1
    576c:	68 f0       	brcs	.+26     	; 0x5788 <__divsf3_pse+0x82>
    576e:	0f c1       	rjmp	.+542    	; 0x598e <__fp_inf>
    5770:	c8 c1       	rjmp	.+912    	; 0x5b02 <__fp_szero>
    5772:	5f 3f       	cpi	r21, 0xFF	; 255
    5774:	ec f3       	brlt	.-6      	; 0x5770 <__divsf3_pse+0x6a>
    5776:	98 3e       	cpi	r25, 0xE8	; 232
    5778:	dc f3       	brlt	.-10     	; 0x5770 <__divsf3_pse+0x6a>
    577a:	86 95       	lsr	r24
    577c:	77 95       	ror	r23
    577e:	67 95       	ror	r22
    5780:	b7 95       	ror	r27
    5782:	f7 95       	ror	r31
    5784:	9f 5f       	subi	r25, 0xFF	; 255
    5786:	c9 f7       	brne	.-14     	; 0x577a <__divsf3_pse+0x74>
    5788:	88 0f       	add	r24, r24
    578a:	91 1d       	adc	r25, r1
    578c:	96 95       	lsr	r25
    578e:	87 95       	ror	r24
    5790:	97 f9       	bld	r25, 7
    5792:	08 95       	ret
    5794:	e1 e0       	ldi	r30, 0x01	; 1
    5796:	66 0f       	add	r22, r22
    5798:	77 1f       	adc	r23, r23
    579a:	88 1f       	adc	r24, r24
    579c:	bb 1f       	adc	r27, r27
    579e:	62 17       	cp	r22, r18
    57a0:	73 07       	cpc	r23, r19
    57a2:	84 07       	cpc	r24, r20
    57a4:	ba 07       	cpc	r27, r26
    57a6:	20 f0       	brcs	.+8      	; 0x57b0 <__divsf3_pse+0xaa>
    57a8:	62 1b       	sub	r22, r18
    57aa:	73 0b       	sbc	r23, r19
    57ac:	84 0b       	sbc	r24, r20
    57ae:	ba 0b       	sbc	r27, r26
    57b0:	ee 1f       	adc	r30, r30
    57b2:	88 f7       	brcc	.-30     	; 0x5796 <__divsf3_pse+0x90>
    57b4:	e0 95       	com	r30
    57b6:	08 95       	ret

000057b8 <__fixsfsi>:
    57b8:	04 d0       	rcall	.+8      	; 0x57c2 <__fixunssfsi>
    57ba:	68 94       	set
    57bc:	b1 11       	cpse	r27, r1
    57be:	a1 c1       	rjmp	.+834    	; 0x5b02 <__fp_szero>
    57c0:	08 95       	ret

000057c2 <__fixunssfsi>:
    57c2:	84 d1       	rcall	.+776    	; 0x5acc <__fp_splitA>
    57c4:	88 f0       	brcs	.+34     	; 0x57e8 <__fixunssfsi+0x26>
    57c6:	9f 57       	subi	r25, 0x7F	; 127
    57c8:	90 f0       	brcs	.+36     	; 0x57ee <__fixunssfsi+0x2c>
    57ca:	b9 2f       	mov	r27, r25
    57cc:	99 27       	eor	r25, r25
    57ce:	b7 51       	subi	r27, 0x17	; 23
    57d0:	a0 f0       	brcs	.+40     	; 0x57fa <__fixunssfsi+0x38>
    57d2:	d1 f0       	breq	.+52     	; 0x5808 <__fixunssfsi+0x46>
    57d4:	66 0f       	add	r22, r22
    57d6:	77 1f       	adc	r23, r23
    57d8:	88 1f       	adc	r24, r24
    57da:	99 1f       	adc	r25, r25
    57dc:	1a f0       	brmi	.+6      	; 0x57e4 <__fixunssfsi+0x22>
    57de:	ba 95       	dec	r27
    57e0:	c9 f7       	brne	.-14     	; 0x57d4 <__fixunssfsi+0x12>
    57e2:	12 c0       	rjmp	.+36     	; 0x5808 <__fixunssfsi+0x46>
    57e4:	b1 30       	cpi	r27, 0x01	; 1
    57e6:	81 f0       	breq	.+32     	; 0x5808 <__fixunssfsi+0x46>
    57e8:	8b d1       	rcall	.+790    	; 0x5b00 <__fp_zero>
    57ea:	b1 e0       	ldi	r27, 0x01	; 1
    57ec:	08 95       	ret
    57ee:	88 c1       	rjmp	.+784    	; 0x5b00 <__fp_zero>
    57f0:	67 2f       	mov	r22, r23
    57f2:	78 2f       	mov	r23, r24
    57f4:	88 27       	eor	r24, r24
    57f6:	b8 5f       	subi	r27, 0xF8	; 248
    57f8:	39 f0       	breq	.+14     	; 0x5808 <__fixunssfsi+0x46>
    57fa:	b9 3f       	cpi	r27, 0xF9	; 249
    57fc:	cc f3       	brlt	.-14     	; 0x57f0 <__fixunssfsi+0x2e>
    57fe:	86 95       	lsr	r24
    5800:	77 95       	ror	r23
    5802:	67 95       	ror	r22
    5804:	b3 95       	inc	r27
    5806:	d9 f7       	brne	.-10     	; 0x57fe <__fixunssfsi+0x3c>
    5808:	3e f4       	brtc	.+14     	; 0x5818 <__fixunssfsi+0x56>
    580a:	90 95       	com	r25
    580c:	80 95       	com	r24
    580e:	70 95       	com	r23
    5810:	61 95       	neg	r22
    5812:	7f 4f       	sbci	r23, 0xFF	; 255
    5814:	8f 4f       	sbci	r24, 0xFF	; 255
    5816:	9f 4f       	sbci	r25, 0xFF	; 255
    5818:	08 95       	ret

0000581a <__floatunsisf>:
    581a:	e8 94       	clt
    581c:	09 c0       	rjmp	.+18     	; 0x5830 <__floatsisf+0x12>

0000581e <__floatsisf>:
    581e:	97 fb       	bst	r25, 7
    5820:	3e f4       	brtc	.+14     	; 0x5830 <__floatsisf+0x12>
    5822:	90 95       	com	r25
    5824:	80 95       	com	r24
    5826:	70 95       	com	r23
    5828:	61 95       	neg	r22
    582a:	7f 4f       	sbci	r23, 0xFF	; 255
    582c:	8f 4f       	sbci	r24, 0xFF	; 255
    582e:	9f 4f       	sbci	r25, 0xFF	; 255
    5830:	99 23       	and	r25, r25
    5832:	a9 f0       	breq	.+42     	; 0x585e <__floatsisf+0x40>
    5834:	f9 2f       	mov	r31, r25
    5836:	96 e9       	ldi	r25, 0x96	; 150
    5838:	bb 27       	eor	r27, r27
    583a:	93 95       	inc	r25
    583c:	f6 95       	lsr	r31
    583e:	87 95       	ror	r24
    5840:	77 95       	ror	r23
    5842:	67 95       	ror	r22
    5844:	b7 95       	ror	r27
    5846:	f1 11       	cpse	r31, r1
    5848:	f8 cf       	rjmp	.-16     	; 0x583a <__floatsisf+0x1c>
    584a:	fa f4       	brpl	.+62     	; 0x588a <__floatsisf+0x6c>
    584c:	bb 0f       	add	r27, r27
    584e:	11 f4       	brne	.+4      	; 0x5854 <__floatsisf+0x36>
    5850:	60 ff       	sbrs	r22, 0
    5852:	1b c0       	rjmp	.+54     	; 0x588a <__floatsisf+0x6c>
    5854:	6f 5f       	subi	r22, 0xFF	; 255
    5856:	7f 4f       	sbci	r23, 0xFF	; 255
    5858:	8f 4f       	sbci	r24, 0xFF	; 255
    585a:	9f 4f       	sbci	r25, 0xFF	; 255
    585c:	16 c0       	rjmp	.+44     	; 0x588a <__floatsisf+0x6c>
    585e:	88 23       	and	r24, r24
    5860:	11 f0       	breq	.+4      	; 0x5866 <__floatsisf+0x48>
    5862:	96 e9       	ldi	r25, 0x96	; 150
    5864:	11 c0       	rjmp	.+34     	; 0x5888 <__floatsisf+0x6a>
    5866:	77 23       	and	r23, r23
    5868:	21 f0       	breq	.+8      	; 0x5872 <__floatsisf+0x54>
    586a:	9e e8       	ldi	r25, 0x8E	; 142
    586c:	87 2f       	mov	r24, r23
    586e:	76 2f       	mov	r23, r22
    5870:	05 c0       	rjmp	.+10     	; 0x587c <__floatsisf+0x5e>
    5872:	66 23       	and	r22, r22
    5874:	71 f0       	breq	.+28     	; 0x5892 <__floatsisf+0x74>
    5876:	96 e8       	ldi	r25, 0x86	; 134
    5878:	86 2f       	mov	r24, r22
    587a:	70 e0       	ldi	r23, 0x00	; 0
    587c:	60 e0       	ldi	r22, 0x00	; 0
    587e:	2a f0       	brmi	.+10     	; 0x588a <__floatsisf+0x6c>
    5880:	9a 95       	dec	r25
    5882:	66 0f       	add	r22, r22
    5884:	77 1f       	adc	r23, r23
    5886:	88 1f       	adc	r24, r24
    5888:	da f7       	brpl	.-10     	; 0x5880 <__floatsisf+0x62>
    588a:	88 0f       	add	r24, r24
    588c:	96 95       	lsr	r25
    588e:	87 95       	ror	r24
    5890:	97 f9       	bld	r25, 7
    5892:	08 95       	ret

00005894 <__floatundisf>:
    5894:	e8 94       	clt

00005896 <__fp_di2sf>:
    5896:	f9 2f       	mov	r31, r25
    5898:	96 eb       	ldi	r25, 0xB6	; 182
    589a:	ff 23       	and	r31, r31
    589c:	81 f0       	breq	.+32     	; 0x58be <__fp_di2sf+0x28>
    589e:	12 16       	cp	r1, r18
    58a0:	13 06       	cpc	r1, r19
    58a2:	14 06       	cpc	r1, r20
    58a4:	44 0b       	sbc	r20, r20
    58a6:	93 95       	inc	r25
    58a8:	f6 95       	lsr	r31
    58aa:	87 95       	ror	r24
    58ac:	77 95       	ror	r23
    58ae:	67 95       	ror	r22
    58b0:	57 95       	ror	r21
    58b2:	40 40       	sbci	r20, 0x00	; 0
    58b4:	ff 23       	and	r31, r31
    58b6:	b9 f7       	brne	.-18     	; 0x58a6 <__fp_di2sf+0x10>
    58b8:	1b c0       	rjmp	.+54     	; 0x58f0 <__fp_di2sf+0x5a>
    58ba:	99 27       	eor	r25, r25
    58bc:	08 95       	ret
    58be:	88 23       	and	r24, r24
    58c0:	51 f4       	brne	.+20     	; 0x58d6 <__fp_di2sf+0x40>
    58c2:	98 50       	subi	r25, 0x08	; 8
    58c4:	d2 f7       	brpl	.-12     	; 0x58ba <__fp_di2sf+0x24>
    58c6:	87 2b       	or	r24, r23
    58c8:	76 2f       	mov	r23, r22
    58ca:	65 2f       	mov	r22, r21
    58cc:	54 2f       	mov	r21, r20
    58ce:	43 2f       	mov	r20, r19
    58d0:	32 2f       	mov	r19, r18
    58d2:	20 e0       	ldi	r18, 0x00	; 0
    58d4:	b1 f3       	breq	.-20     	; 0x58c2 <__fp_di2sf+0x2c>
    58d6:	12 16       	cp	r1, r18
    58d8:	13 06       	cpc	r1, r19
    58da:	14 06       	cpc	r1, r20
    58dc:	44 0b       	sbc	r20, r20
    58de:	88 23       	and	r24, r24
    58e0:	3a f0       	brmi	.+14     	; 0x58f0 <__fp_di2sf+0x5a>
    58e2:	9a 95       	dec	r25
    58e4:	44 0f       	add	r20, r20
    58e6:	55 1f       	adc	r21, r21
    58e8:	66 1f       	adc	r22, r22
    58ea:	77 1f       	adc	r23, r23
    58ec:	88 1f       	adc	r24, r24
    58ee:	ca f7       	brpl	.-14     	; 0x58e2 <__fp_di2sf+0x4c>
    58f0:	55 23       	and	r21, r21
    58f2:	4a f4       	brpl	.+18     	; 0x5906 <__fp_di2sf+0x70>
    58f4:	44 0f       	add	r20, r20
    58f6:	55 1f       	adc	r21, r21
    58f8:	11 f4       	brne	.+4      	; 0x58fe <__fp_di2sf+0x68>
    58fa:	60 ff       	sbrs	r22, 0
    58fc:	04 c0       	rjmp	.+8      	; 0x5906 <__fp_di2sf+0x70>
    58fe:	6f 5f       	subi	r22, 0xFF	; 255
    5900:	7f 4f       	sbci	r23, 0xFF	; 255
    5902:	8f 4f       	sbci	r24, 0xFF	; 255
    5904:	9f 4f       	sbci	r25, 0xFF	; 255
    5906:	88 0f       	add	r24, r24
    5908:	96 95       	lsr	r25
    590a:	87 95       	ror	r24
    590c:	97 f9       	bld	r25, 7
    590e:	08 95       	ret

00005910 <__fp_arccos>:
    5910:	df 93       	push	r29
    5912:	cf 93       	push	r28
    5914:	1f 93       	push	r17
    5916:	0f 93       	push	r16
    5918:	8b 01       	movw	r16, r22
    591a:	ec 01       	movw	r28, r24
    591c:	ed ec       	ldi	r30, 0xCD	; 205
    591e:	f0 e0       	ldi	r31, 0x00	; 0
    5920:	3f d0       	rcall	.+126    	; 0x59a0 <__fp_powser>
    5922:	aa d0       	rcall	.+340    	; 0x5a78 <__fp_round>
    5924:	98 01       	movw	r18, r16
    5926:	ae 01       	movw	r20, r28
    5928:	8b 01       	movw	r16, r22
    592a:	ec 01       	movw	r28, r24
    592c:	60 e0       	ldi	r22, 0x00	; 0
    592e:	70 e0       	ldi	r23, 0x00	; 0
    5930:	80 e8       	ldi	r24, 0x80	; 128
    5932:	9f e3       	ldi	r25, 0x3F	; 63
    5934:	f4 dd       	rcall	.-1048   	; 0x551e <__subsf3>
    5936:	af d1       	rcall	.+862    	; 0x5c96 <sqrt>
    5938:	98 01       	movw	r18, r16
    593a:	ae 01       	movw	r20, r28
    593c:	0f 91       	pop	r16
    593e:	1f 91       	pop	r17
    5940:	cf 91       	pop	r28
    5942:	df 91       	pop	r29
    5944:	fb c0       	rjmp	.+502    	; 0x5b3c <__mulsf3x>

00005946 <__fp_cmp>:
    5946:	99 0f       	add	r25, r25
    5948:	00 08       	sbc	r0, r0
    594a:	55 0f       	add	r21, r21
    594c:	aa 0b       	sbc	r26, r26
    594e:	e0 e8       	ldi	r30, 0x80	; 128
    5950:	fe ef       	ldi	r31, 0xFE	; 254
    5952:	16 16       	cp	r1, r22
    5954:	17 06       	cpc	r1, r23
    5956:	e8 07       	cpc	r30, r24
    5958:	f9 07       	cpc	r31, r25
    595a:	c0 f0       	brcs	.+48     	; 0x598c <__fp_cmp+0x46>
    595c:	12 16       	cp	r1, r18
    595e:	13 06       	cpc	r1, r19
    5960:	e4 07       	cpc	r30, r20
    5962:	f5 07       	cpc	r31, r21
    5964:	98 f0       	brcs	.+38     	; 0x598c <__fp_cmp+0x46>
    5966:	62 1b       	sub	r22, r18
    5968:	73 0b       	sbc	r23, r19
    596a:	84 0b       	sbc	r24, r20
    596c:	95 0b       	sbc	r25, r21
    596e:	39 f4       	brne	.+14     	; 0x597e <__fp_cmp+0x38>
    5970:	0a 26       	eor	r0, r26
    5972:	61 f0       	breq	.+24     	; 0x598c <__fp_cmp+0x46>
    5974:	23 2b       	or	r18, r19
    5976:	24 2b       	or	r18, r20
    5978:	25 2b       	or	r18, r21
    597a:	21 f4       	brne	.+8      	; 0x5984 <__fp_cmp+0x3e>
    597c:	08 95       	ret
    597e:	0a 26       	eor	r0, r26
    5980:	09 f4       	brne	.+2      	; 0x5984 <__fp_cmp+0x3e>
    5982:	a1 40       	sbci	r26, 0x01	; 1
    5984:	a6 95       	lsr	r26
    5986:	8f ef       	ldi	r24, 0xFF	; 255
    5988:	81 1d       	adc	r24, r1
    598a:	81 1d       	adc	r24, r1
    598c:	08 95       	ret

0000598e <__fp_inf>:
    598e:	97 f9       	bld	r25, 7
    5990:	9f 67       	ori	r25, 0x7F	; 127
    5992:	80 e8       	ldi	r24, 0x80	; 128
    5994:	70 e0       	ldi	r23, 0x00	; 0
    5996:	60 e0       	ldi	r22, 0x00	; 0
    5998:	08 95       	ret

0000599a <__fp_nan>:
    599a:	9f ef       	ldi	r25, 0xFF	; 255
    599c:	80 ec       	ldi	r24, 0xC0	; 192
    599e:	08 95       	ret

000059a0 <__fp_powser>:
    59a0:	df 93       	push	r29
    59a2:	cf 93       	push	r28
    59a4:	1f 93       	push	r17
    59a6:	0f 93       	push	r16
    59a8:	ff 92       	push	r15
    59aa:	ef 92       	push	r14
    59ac:	df 92       	push	r13
    59ae:	7b 01       	movw	r14, r22
    59b0:	8c 01       	movw	r16, r24
    59b2:	68 94       	set
    59b4:	05 c0       	rjmp	.+10     	; 0x59c0 <__fp_powser+0x20>
    59b6:	da 2e       	mov	r13, r26
    59b8:	ef 01       	movw	r28, r30
    59ba:	c0 d0       	rcall	.+384    	; 0x5b3c <__mulsf3x>
    59bc:	fe 01       	movw	r30, r28
    59be:	e8 94       	clt
    59c0:	a5 91       	lpm	r26, Z+
    59c2:	25 91       	lpm	r18, Z+
    59c4:	35 91       	lpm	r19, Z+
    59c6:	45 91       	lpm	r20, Z+
    59c8:	55 91       	lpm	r21, Z+
    59ca:	ae f3       	brts	.-22     	; 0x59b6 <__fp_powser+0x16>
    59cc:	ef 01       	movw	r28, r30
    59ce:	b9 dd       	rcall	.-1166   	; 0x5542 <__addsf3x>
    59d0:	fe 01       	movw	r30, r28
    59d2:	97 01       	movw	r18, r14
    59d4:	a8 01       	movw	r20, r16
    59d6:	da 94       	dec	r13
    59d8:	79 f7       	brne	.-34     	; 0x59b8 <__fp_powser+0x18>
    59da:	df 90       	pop	r13
    59dc:	ef 90       	pop	r14
    59de:	ff 90       	pop	r15
    59e0:	0f 91       	pop	r16
    59e2:	1f 91       	pop	r17
    59e4:	cf 91       	pop	r28
    59e6:	df 91       	pop	r29
    59e8:	08 95       	ret

000059ea <__fp_powsodd>:
    59ea:	9f 93       	push	r25
    59ec:	8f 93       	push	r24
    59ee:	7f 93       	push	r23
    59f0:	6f 93       	push	r22
    59f2:	ff 93       	push	r31
    59f4:	ef 93       	push	r30
    59f6:	9b 01       	movw	r18, r22
    59f8:	ac 01       	movw	r20, r24
    59fa:	94 d0       	rcall	.+296    	; 0x5b24 <__mulsf3>
    59fc:	ef 91       	pop	r30
    59fe:	ff 91       	pop	r31
    5a00:	cf df       	rcall	.-98     	; 0x59a0 <__fp_powser>
    5a02:	2f 91       	pop	r18
    5a04:	3f 91       	pop	r19
    5a06:	4f 91       	pop	r20
    5a08:	5f 91       	pop	r21
    5a0a:	8c c0       	rjmp	.+280    	; 0x5b24 <__mulsf3>

00005a0c <__fp_pscA>:
    5a0c:	00 24       	eor	r0, r0
    5a0e:	0a 94       	dec	r0
    5a10:	16 16       	cp	r1, r22
    5a12:	17 06       	cpc	r1, r23
    5a14:	18 06       	cpc	r1, r24
    5a16:	09 06       	cpc	r0, r25
    5a18:	08 95       	ret

00005a1a <__fp_pscB>:
    5a1a:	00 24       	eor	r0, r0
    5a1c:	0a 94       	dec	r0
    5a1e:	12 16       	cp	r1, r18
    5a20:	13 06       	cpc	r1, r19
    5a22:	14 06       	cpc	r1, r20
    5a24:	05 06       	cpc	r0, r21
    5a26:	08 95       	ret
    5a28:	b8 cf       	rjmp	.-144    	; 0x599a <__fp_nan>

00005a2a <__fp_rempio2>:
    5a2a:	50 d0       	rcall	.+160    	; 0x5acc <__fp_splitA>
    5a2c:	e8 f3       	brcs	.-6      	; 0x5a28 <__fp_pscB+0xe>
    5a2e:	e8 94       	clt
    5a30:	e0 e0       	ldi	r30, 0x00	; 0
    5a32:	bb 27       	eor	r27, r27
    5a34:	9f 57       	subi	r25, 0x7F	; 127
    5a36:	f0 f0       	brcs	.+60     	; 0x5a74 <__fp_rempio2+0x4a>
    5a38:	2a ed       	ldi	r18, 0xDA	; 218
    5a3a:	3f e0       	ldi	r19, 0x0F	; 15
    5a3c:	49 ec       	ldi	r20, 0xC9	; 201
    5a3e:	06 c0       	rjmp	.+12     	; 0x5a4c <__fp_rempio2+0x22>
    5a40:	ee 0f       	add	r30, r30
    5a42:	bb 0f       	add	r27, r27
    5a44:	66 1f       	adc	r22, r22
    5a46:	77 1f       	adc	r23, r23
    5a48:	88 1f       	adc	r24, r24
    5a4a:	28 f0       	brcs	.+10     	; 0x5a56 <__fp_rempio2+0x2c>
    5a4c:	b2 3a       	cpi	r27, 0xA2	; 162
    5a4e:	62 07       	cpc	r22, r18
    5a50:	73 07       	cpc	r23, r19
    5a52:	84 07       	cpc	r24, r20
    5a54:	28 f0       	brcs	.+10     	; 0x5a60 <__fp_rempio2+0x36>
    5a56:	b2 5a       	subi	r27, 0xA2	; 162
    5a58:	62 0b       	sbc	r22, r18
    5a5a:	73 0b       	sbc	r23, r19
    5a5c:	84 0b       	sbc	r24, r20
    5a5e:	e3 95       	inc	r30
    5a60:	9a 95       	dec	r25
    5a62:	72 f7       	brpl	.-36     	; 0x5a40 <__fp_rempio2+0x16>
    5a64:	80 38       	cpi	r24, 0x80	; 128
    5a66:	30 f4       	brcc	.+12     	; 0x5a74 <__fp_rempio2+0x4a>
    5a68:	9a 95       	dec	r25
    5a6a:	bb 0f       	add	r27, r27
    5a6c:	66 1f       	adc	r22, r22
    5a6e:	77 1f       	adc	r23, r23
    5a70:	88 1f       	adc	r24, r24
    5a72:	d2 f7       	brpl	.-12     	; 0x5a68 <__fp_rempio2+0x3e>
    5a74:	90 48       	sbci	r25, 0x80	; 128
    5a76:	83 c1       	rjmp	.+774    	; 0x5d7e <__fp_mpack_finite>

00005a78 <__fp_round>:
    5a78:	09 2e       	mov	r0, r25
    5a7a:	03 94       	inc	r0
    5a7c:	00 0c       	add	r0, r0
    5a7e:	11 f4       	brne	.+4      	; 0x5a84 <__fp_round+0xc>
    5a80:	88 23       	and	r24, r24
    5a82:	52 f0       	brmi	.+20     	; 0x5a98 <__fp_round+0x20>
    5a84:	bb 0f       	add	r27, r27
    5a86:	40 f4       	brcc	.+16     	; 0x5a98 <__fp_round+0x20>
    5a88:	bf 2b       	or	r27, r31
    5a8a:	11 f4       	brne	.+4      	; 0x5a90 <__fp_round+0x18>
    5a8c:	60 ff       	sbrs	r22, 0
    5a8e:	04 c0       	rjmp	.+8      	; 0x5a98 <__fp_round+0x20>
    5a90:	6f 5f       	subi	r22, 0xFF	; 255
    5a92:	7f 4f       	sbci	r23, 0xFF	; 255
    5a94:	8f 4f       	sbci	r24, 0xFF	; 255
    5a96:	9f 4f       	sbci	r25, 0xFF	; 255
    5a98:	08 95       	ret

00005a9a <__fp_sinus>:
    5a9a:	ef 93       	push	r30
    5a9c:	e0 ff       	sbrs	r30, 0
    5a9e:	06 c0       	rjmp	.+12     	; 0x5aac <__fp_sinus+0x12>
    5aa0:	a2 ea       	ldi	r26, 0xA2	; 162
    5aa2:	2a ed       	ldi	r18, 0xDA	; 218
    5aa4:	3f e0       	ldi	r19, 0x0F	; 15
    5aa6:	49 ec       	ldi	r20, 0xC9	; 201
    5aa8:	5f eb       	ldi	r21, 0xBF	; 191
    5aaa:	4b dd       	rcall	.-1386   	; 0x5542 <__addsf3x>
    5aac:	e5 df       	rcall	.-54     	; 0x5a78 <__fp_round>
    5aae:	0f 90       	pop	r0
    5ab0:	03 94       	inc	r0
    5ab2:	01 fc       	sbrc	r0, 1
    5ab4:	90 58       	subi	r25, 0x80	; 128
    5ab6:	e5 ef       	ldi	r30, 0xF5	; 245
    5ab8:	f0 e0       	ldi	r31, 0x00	; 0
    5aba:	97 cf       	rjmp	.-210    	; 0x59ea <__fp_powsodd>

00005abc <__fp_split3>:
    5abc:	57 fd       	sbrc	r21, 7
    5abe:	90 58       	subi	r25, 0x80	; 128
    5ac0:	44 0f       	add	r20, r20
    5ac2:	55 1f       	adc	r21, r21
    5ac4:	59 f0       	breq	.+22     	; 0x5adc <__fp_splitA+0x10>
    5ac6:	5f 3f       	cpi	r21, 0xFF	; 255
    5ac8:	71 f0       	breq	.+28     	; 0x5ae6 <__fp_splitA+0x1a>
    5aca:	47 95       	ror	r20

00005acc <__fp_splitA>:
    5acc:	88 0f       	add	r24, r24
    5ace:	97 fb       	bst	r25, 7
    5ad0:	99 1f       	adc	r25, r25
    5ad2:	61 f0       	breq	.+24     	; 0x5aec <__fp_splitA+0x20>
    5ad4:	9f 3f       	cpi	r25, 0xFF	; 255
    5ad6:	79 f0       	breq	.+30     	; 0x5af6 <__fp_splitA+0x2a>
    5ad8:	87 95       	ror	r24
    5ada:	08 95       	ret
    5adc:	12 16       	cp	r1, r18
    5ade:	13 06       	cpc	r1, r19
    5ae0:	14 06       	cpc	r1, r20
    5ae2:	55 1f       	adc	r21, r21
    5ae4:	f2 cf       	rjmp	.-28     	; 0x5aca <__fp_split3+0xe>
    5ae6:	46 95       	lsr	r20
    5ae8:	f1 df       	rcall	.-30     	; 0x5acc <__fp_splitA>
    5aea:	08 c0       	rjmp	.+16     	; 0x5afc <__fp_splitA+0x30>
    5aec:	16 16       	cp	r1, r22
    5aee:	17 06       	cpc	r1, r23
    5af0:	18 06       	cpc	r1, r24
    5af2:	99 1f       	adc	r25, r25
    5af4:	f1 cf       	rjmp	.-30     	; 0x5ad8 <__fp_splitA+0xc>
    5af6:	86 95       	lsr	r24
    5af8:	71 05       	cpc	r23, r1
    5afa:	61 05       	cpc	r22, r1
    5afc:	08 94       	sec
    5afe:	08 95       	ret

00005b00 <__fp_zero>:
    5b00:	e8 94       	clt

00005b02 <__fp_szero>:
    5b02:	bb 27       	eor	r27, r27
    5b04:	66 27       	eor	r22, r22
    5b06:	77 27       	eor	r23, r23
    5b08:	cb 01       	movw	r24, r22
    5b0a:	97 f9       	bld	r25, 7
    5b0c:	08 95       	ret

00005b0e <__gesf2>:
    5b0e:	1b df       	rcall	.-458    	; 0x5946 <__fp_cmp>
    5b10:	08 f4       	brcc	.+2      	; 0x5b14 <__gesf2+0x6>
    5b12:	8f ef       	ldi	r24, 0xFF	; 255
    5b14:	08 95       	ret

00005b16 <inverse>:
    5b16:	9b 01       	movw	r18, r22
    5b18:	ac 01       	movw	r20, r24
    5b1a:	60 e0       	ldi	r22, 0x00	; 0
    5b1c:	70 e0       	ldi	r23, 0x00	; 0
    5b1e:	80 e8       	ldi	r24, 0x80	; 128
    5b20:	9f e3       	ldi	r25, 0x3F	; 63
    5b22:	e2 cd       	rjmp	.-1084   	; 0x56e8 <__divsf3>

00005b24 <__mulsf3>:
    5b24:	0b d0       	rcall	.+22     	; 0x5b3c <__mulsf3x>
    5b26:	a8 cf       	rjmp	.-176    	; 0x5a78 <__fp_round>
    5b28:	71 df       	rcall	.-286    	; 0x5a0c <__fp_pscA>
    5b2a:	28 f0       	brcs	.+10     	; 0x5b36 <__mulsf3+0x12>
    5b2c:	76 df       	rcall	.-276    	; 0x5a1a <__fp_pscB>
    5b2e:	18 f0       	brcs	.+6      	; 0x5b36 <__mulsf3+0x12>
    5b30:	95 23       	and	r25, r21
    5b32:	09 f0       	breq	.+2      	; 0x5b36 <__mulsf3+0x12>
    5b34:	2c cf       	rjmp	.-424    	; 0x598e <__fp_inf>
    5b36:	31 cf       	rjmp	.-414    	; 0x599a <__fp_nan>
    5b38:	11 24       	eor	r1, r1
    5b3a:	e3 cf       	rjmp	.-58     	; 0x5b02 <__fp_szero>

00005b3c <__mulsf3x>:
    5b3c:	bf df       	rcall	.-130    	; 0x5abc <__fp_split3>
    5b3e:	a0 f3       	brcs	.-24     	; 0x5b28 <__mulsf3+0x4>

00005b40 <__mulsf3_pse>:
    5b40:	95 9f       	mul	r25, r21
    5b42:	d1 f3       	breq	.-12     	; 0x5b38 <__mulsf3+0x14>
    5b44:	95 0f       	add	r25, r21
    5b46:	50 e0       	ldi	r21, 0x00	; 0
    5b48:	55 1f       	adc	r21, r21
    5b4a:	62 9f       	mul	r22, r18
    5b4c:	f0 01       	movw	r30, r0
    5b4e:	72 9f       	mul	r23, r18
    5b50:	bb 27       	eor	r27, r27
    5b52:	f0 0d       	add	r31, r0
    5b54:	b1 1d       	adc	r27, r1
    5b56:	63 9f       	mul	r22, r19
    5b58:	aa 27       	eor	r26, r26
    5b5a:	f0 0d       	add	r31, r0
    5b5c:	b1 1d       	adc	r27, r1
    5b5e:	aa 1f       	adc	r26, r26
    5b60:	64 9f       	mul	r22, r20
    5b62:	66 27       	eor	r22, r22
    5b64:	b0 0d       	add	r27, r0
    5b66:	a1 1d       	adc	r26, r1
    5b68:	66 1f       	adc	r22, r22
    5b6a:	82 9f       	mul	r24, r18
    5b6c:	22 27       	eor	r18, r18
    5b6e:	b0 0d       	add	r27, r0
    5b70:	a1 1d       	adc	r26, r1
    5b72:	62 1f       	adc	r22, r18
    5b74:	73 9f       	mul	r23, r19
    5b76:	b0 0d       	add	r27, r0
    5b78:	a1 1d       	adc	r26, r1
    5b7a:	62 1f       	adc	r22, r18
    5b7c:	83 9f       	mul	r24, r19
    5b7e:	a0 0d       	add	r26, r0
    5b80:	61 1d       	adc	r22, r1
    5b82:	22 1f       	adc	r18, r18
    5b84:	74 9f       	mul	r23, r20
    5b86:	33 27       	eor	r19, r19
    5b88:	a0 0d       	add	r26, r0
    5b8a:	61 1d       	adc	r22, r1
    5b8c:	23 1f       	adc	r18, r19
    5b8e:	84 9f       	mul	r24, r20
    5b90:	60 0d       	add	r22, r0
    5b92:	21 1d       	adc	r18, r1
    5b94:	82 2f       	mov	r24, r18
    5b96:	76 2f       	mov	r23, r22
    5b98:	6a 2f       	mov	r22, r26
    5b9a:	11 24       	eor	r1, r1
    5b9c:	9f 57       	subi	r25, 0x7F	; 127
    5b9e:	50 40       	sbci	r21, 0x00	; 0
    5ba0:	8a f0       	brmi	.+34     	; 0x5bc4 <__mulsf3_pse+0x84>
    5ba2:	e1 f0       	breq	.+56     	; 0x5bdc <__mulsf3_pse+0x9c>
    5ba4:	88 23       	and	r24, r24
    5ba6:	4a f0       	brmi	.+18     	; 0x5bba <__mulsf3_pse+0x7a>
    5ba8:	ee 0f       	add	r30, r30
    5baa:	ff 1f       	adc	r31, r31
    5bac:	bb 1f       	adc	r27, r27
    5bae:	66 1f       	adc	r22, r22
    5bb0:	77 1f       	adc	r23, r23
    5bb2:	88 1f       	adc	r24, r24
    5bb4:	91 50       	subi	r25, 0x01	; 1
    5bb6:	50 40       	sbci	r21, 0x00	; 0
    5bb8:	a9 f7       	brne	.-22     	; 0x5ba4 <__mulsf3_pse+0x64>
    5bba:	9e 3f       	cpi	r25, 0xFE	; 254
    5bbc:	51 05       	cpc	r21, r1
    5bbe:	70 f0       	brcs	.+28     	; 0x5bdc <__mulsf3_pse+0x9c>
    5bc0:	e6 ce       	rjmp	.-564    	; 0x598e <__fp_inf>
    5bc2:	9f cf       	rjmp	.-194    	; 0x5b02 <__fp_szero>
    5bc4:	5f 3f       	cpi	r21, 0xFF	; 255
    5bc6:	ec f3       	brlt	.-6      	; 0x5bc2 <__mulsf3_pse+0x82>
    5bc8:	98 3e       	cpi	r25, 0xE8	; 232
    5bca:	dc f3       	brlt	.-10     	; 0x5bc2 <__mulsf3_pse+0x82>
    5bcc:	86 95       	lsr	r24
    5bce:	77 95       	ror	r23
    5bd0:	67 95       	ror	r22
    5bd2:	b7 95       	ror	r27
    5bd4:	f7 95       	ror	r31
    5bd6:	e7 95       	ror	r30
    5bd8:	9f 5f       	subi	r25, 0xFF	; 255
    5bda:	c1 f7       	brne	.-16     	; 0x5bcc <__mulsf3_pse+0x8c>
    5bdc:	fe 2b       	or	r31, r30
    5bde:	88 0f       	add	r24, r24
    5be0:	91 1d       	adc	r25, r1
    5be2:	96 95       	lsr	r25
    5be4:	87 95       	ror	r24
    5be6:	97 f9       	bld	r25, 7
    5be8:	08 95       	ret

00005bea <pow>:
    5bea:	fa 01       	movw	r30, r20
    5bec:	ee 0f       	add	r30, r30
    5bee:	ff 1f       	adc	r31, r31
    5bf0:	30 96       	adiw	r30, 0x00	; 0
    5bf2:	21 05       	cpc	r18, r1
    5bf4:	31 05       	cpc	r19, r1
    5bf6:	99 f1       	breq	.+102    	; 0x5c5e <pow+0x74>
    5bf8:	61 15       	cp	r22, r1
    5bfa:	71 05       	cpc	r23, r1
    5bfc:	61 f4       	brne	.+24     	; 0x5c16 <pow+0x2c>
    5bfe:	80 38       	cpi	r24, 0x80	; 128
    5c00:	bf e3       	ldi	r27, 0x3F	; 63
    5c02:	9b 07       	cpc	r25, r27
    5c04:	49 f1       	breq	.+82     	; 0x5c58 <pow+0x6e>
    5c06:	68 94       	set
    5c08:	90 38       	cpi	r25, 0x80	; 128
    5c0a:	81 05       	cpc	r24, r1
    5c0c:	61 f0       	breq	.+24     	; 0x5c26 <pow+0x3c>
    5c0e:	80 38       	cpi	r24, 0x80	; 128
    5c10:	bf ef       	ldi	r27, 0xFF	; 255
    5c12:	9b 07       	cpc	r25, r27
    5c14:	41 f0       	breq	.+16     	; 0x5c26 <pow+0x3c>
    5c16:	99 23       	and	r25, r25
    5c18:	42 f5       	brpl	.+80     	; 0x5c6a <pow+0x80>
    5c1a:	ff 3f       	cpi	r31, 0xFF	; 255
    5c1c:	e1 05       	cpc	r30, r1
    5c1e:	31 05       	cpc	r19, r1
    5c20:	21 05       	cpc	r18, r1
    5c22:	11 f1       	breq	.+68     	; 0x5c68 <pow+0x7e>
    5c24:	e8 94       	clt
    5c26:	08 94       	sec
    5c28:	e7 95       	ror	r30
    5c2a:	d9 01       	movw	r26, r18
    5c2c:	aa 23       	and	r26, r26
    5c2e:	29 f4       	brne	.+10     	; 0x5c3a <pow+0x50>
    5c30:	ab 2f       	mov	r26, r27
    5c32:	be 2f       	mov	r27, r30
    5c34:	f8 5f       	subi	r31, 0xF8	; 248
    5c36:	d0 f3       	brcs	.-12     	; 0x5c2c <pow+0x42>
    5c38:	10 c0       	rjmp	.+32     	; 0x5c5a <pow+0x70>
    5c3a:	ff 5f       	subi	r31, 0xFF	; 255
    5c3c:	70 f4       	brcc	.+28     	; 0x5c5a <pow+0x70>
    5c3e:	a6 95       	lsr	r26
    5c40:	e0 f7       	brcc	.-8      	; 0x5c3a <pow+0x50>
    5c42:	f7 39       	cpi	r31, 0x97	; 151
    5c44:	50 f0       	brcs	.+20     	; 0x5c5a <pow+0x70>
    5c46:	19 f0       	breq	.+6      	; 0x5c4e <pow+0x64>
    5c48:	ff 3a       	cpi	r31, 0xAF	; 175
    5c4a:	38 f4       	brcc	.+14     	; 0x5c5a <pow+0x70>
    5c4c:	9f 77       	andi	r25, 0x7F	; 127
    5c4e:	9f 93       	push	r25
    5c50:	0c d0       	rcall	.+24     	; 0x5c6a <pow+0x80>
    5c52:	0f 90       	pop	r0
    5c54:	07 fc       	sbrc	r0, 7
    5c56:	90 58       	subi	r25, 0x80	; 128
    5c58:	08 95       	ret
    5c5a:	3e f0       	brts	.+14     	; 0x5c6a <pow+0x80>
    5c5c:	9e ce       	rjmp	.-708    	; 0x599a <__fp_nan>
    5c5e:	60 e0       	ldi	r22, 0x00	; 0
    5c60:	70 e0       	ldi	r23, 0x00	; 0
    5c62:	80 e8       	ldi	r24, 0x80	; 128
    5c64:	9f e3       	ldi	r25, 0x3F	; 63
    5c66:	08 95       	ret
    5c68:	4f e7       	ldi	r20, 0x7F	; 127
    5c6a:	9f 77       	andi	r25, 0x7F	; 127
    5c6c:	5f 93       	push	r21
    5c6e:	4f 93       	push	r20
    5c70:	3f 93       	push	r19
    5c72:	2f 93       	push	r18
    5c74:	d2 d0       	rcall	.+420    	; 0x5e1a <log>
    5c76:	2f 91       	pop	r18
    5c78:	3f 91       	pop	r19
    5c7a:	4f 91       	pop	r20
    5c7c:	5f 91       	pop	r21
    5c7e:	52 df       	rcall	.-348    	; 0x5b24 <__mulsf3>
    5c80:	50 c0       	rjmp	.+160    	; 0x5d22 <exp>

00005c82 <sin>:
    5c82:	9f 93       	push	r25
    5c84:	d2 de       	rcall	.-604    	; 0x5a2a <__fp_rempio2>
    5c86:	0f 90       	pop	r0
    5c88:	07 fc       	sbrc	r0, 7
    5c8a:	ee 5f       	subi	r30, 0xFE	; 254
    5c8c:	06 cf       	rjmp	.-500    	; 0x5a9a <__fp_sinus>
    5c8e:	11 f4       	brne	.+4      	; 0x5c94 <sin+0x12>
    5c90:	0e f4       	brtc	.+2      	; 0x5c94 <sin+0x12>
    5c92:	83 ce       	rjmp	.-762    	; 0x599a <__fp_nan>
    5c94:	72 c0       	rjmp	.+228    	; 0x5d7a <__fp_mpack>

00005c96 <sqrt>:
    5c96:	1a df       	rcall	.-460    	; 0x5acc <__fp_splitA>
    5c98:	d0 f3       	brcs	.-12     	; 0x5c8e <sin+0xc>
    5c9a:	99 23       	and	r25, r25
    5c9c:	d9 f3       	breq	.-10     	; 0x5c94 <sin+0x12>
    5c9e:	ce f3       	brts	.-14     	; 0x5c92 <sin+0x10>
    5ca0:	9f 57       	subi	r25, 0x7F	; 127
    5ca2:	55 0b       	sbc	r21, r21
    5ca4:	87 ff       	sbrs	r24, 7
    5ca6:	77 d0       	rcall	.+238    	; 0x5d96 <__fp_norm2>
    5ca8:	00 24       	eor	r0, r0
    5caa:	a0 e6       	ldi	r26, 0x60	; 96
    5cac:	40 ea       	ldi	r20, 0xA0	; 160
    5cae:	90 01       	movw	r18, r0
    5cb0:	80 58       	subi	r24, 0x80	; 128
    5cb2:	56 95       	lsr	r21
    5cb4:	97 95       	ror	r25
    5cb6:	28 f4       	brcc	.+10     	; 0x5cc2 <sqrt+0x2c>
    5cb8:	80 5c       	subi	r24, 0xC0	; 192
    5cba:	66 0f       	add	r22, r22
    5cbc:	77 1f       	adc	r23, r23
    5cbe:	88 1f       	adc	r24, r24
    5cc0:	20 f0       	brcs	.+8      	; 0x5cca <sqrt+0x34>
    5cc2:	26 17       	cp	r18, r22
    5cc4:	37 07       	cpc	r19, r23
    5cc6:	48 07       	cpc	r20, r24
    5cc8:	30 f4       	brcc	.+12     	; 0x5cd6 <sqrt+0x40>
    5cca:	62 1b       	sub	r22, r18
    5ccc:	73 0b       	sbc	r23, r19
    5cce:	84 0b       	sbc	r24, r20
    5cd0:	20 29       	or	r18, r0
    5cd2:	31 29       	or	r19, r1
    5cd4:	4a 2b       	or	r20, r26
    5cd6:	a6 95       	lsr	r26
    5cd8:	17 94       	ror	r1
    5cda:	07 94       	ror	r0
    5cdc:	20 25       	eor	r18, r0
    5cde:	31 25       	eor	r19, r1
    5ce0:	4a 27       	eor	r20, r26
    5ce2:	58 f7       	brcc	.-42     	; 0x5cba <sqrt+0x24>
    5ce4:	66 0f       	add	r22, r22
    5ce6:	77 1f       	adc	r23, r23
    5ce8:	88 1f       	adc	r24, r24
    5cea:	20 f0       	brcs	.+8      	; 0x5cf4 <sqrt+0x5e>
    5cec:	26 17       	cp	r18, r22
    5cee:	37 07       	cpc	r19, r23
    5cf0:	48 07       	cpc	r20, r24
    5cf2:	30 f4       	brcc	.+12     	; 0x5d00 <sqrt+0x6a>
    5cf4:	62 0b       	sbc	r22, r18
    5cf6:	73 0b       	sbc	r23, r19
    5cf8:	84 0b       	sbc	r24, r20
    5cfa:	20 0d       	add	r18, r0
    5cfc:	31 1d       	adc	r19, r1
    5cfe:	41 1d       	adc	r20, r1
    5d00:	a0 95       	com	r26
    5d02:	81 f7       	brne	.-32     	; 0x5ce4 <sqrt+0x4e>
    5d04:	b9 01       	movw	r22, r18
    5d06:	84 2f       	mov	r24, r20
    5d08:	91 58       	subi	r25, 0x81	; 129
    5d0a:	88 0f       	add	r24, r24
    5d0c:	96 95       	lsr	r25
    5d0e:	87 95       	ror	r24
    5d10:	08 95       	ret

00005d12 <square>:
    5d12:	9b 01       	movw	r18, r22
    5d14:	ac 01       	movw	r20, r24
    5d16:	06 cf       	rjmp	.-500    	; 0x5b24 <__mulsf3>
    5d18:	19 f4       	brne	.+6      	; 0x5d20 <square+0xe>
    5d1a:	0e f0       	brts	.+2      	; 0x5d1e <square+0xc>
    5d1c:	38 ce       	rjmp	.-912    	; 0x598e <__fp_inf>
    5d1e:	f0 ce       	rjmp	.-544    	; 0x5b00 <__fp_zero>
    5d20:	3c ce       	rjmp	.-904    	; 0x599a <__fp_nan>

00005d22 <exp>:
    5d22:	d4 de       	rcall	.-600    	; 0x5acc <__fp_splitA>
    5d24:	c8 f3       	brcs	.-14     	; 0x5d18 <square+0x6>
    5d26:	96 38       	cpi	r25, 0x86	; 134
    5d28:	c0 f7       	brcc	.-16     	; 0x5d1a <square+0x8>
    5d2a:	07 f8       	bld	r0, 7
    5d2c:	0f 92       	push	r0
    5d2e:	e8 94       	clt
    5d30:	2b e3       	ldi	r18, 0x3B	; 59
    5d32:	3a ea       	ldi	r19, 0xAA	; 170
    5d34:	48 eb       	ldi	r20, 0xB8	; 184
    5d36:	5f e7       	ldi	r21, 0x7F	; 127
    5d38:	03 df       	rcall	.-506    	; 0x5b40 <__mulsf3_pse>
    5d3a:	0f 92       	push	r0
    5d3c:	0f 92       	push	r0
    5d3e:	0f 92       	push	r0
    5d40:	4d b7       	in	r20, 0x3d	; 61
    5d42:	5e b7       	in	r21, 0x3e	; 62
    5d44:	0f 92       	push	r0
    5d46:	a9 d0       	rcall	.+338    	; 0x5e9a <modf>
    5d48:	e3 e1       	ldi	r30, 0x13	; 19
    5d4a:	f1 e0       	ldi	r31, 0x01	; 1
    5d4c:	29 de       	rcall	.-942    	; 0x59a0 <__fp_powser>
    5d4e:	4f 91       	pop	r20
    5d50:	5f 91       	pop	r21
    5d52:	ef 91       	pop	r30
    5d54:	ff 91       	pop	r31
    5d56:	e5 95       	asr	r30
    5d58:	ee 1f       	adc	r30, r30
    5d5a:	ff 1f       	adc	r31, r31
    5d5c:	49 f0       	breq	.+18     	; 0x5d70 <exp+0x4e>
    5d5e:	fe 57       	subi	r31, 0x7E	; 126
    5d60:	e0 68       	ori	r30, 0x80	; 128
    5d62:	44 27       	eor	r20, r20
    5d64:	ee 0f       	add	r30, r30
    5d66:	44 1f       	adc	r20, r20
    5d68:	fa 95       	dec	r31
    5d6a:	e1 f7       	brne	.-8      	; 0x5d64 <exp+0x42>
    5d6c:	41 95       	neg	r20
    5d6e:	55 0b       	sbc	r21, r21
    5d70:	1b d0       	rcall	.+54     	; 0x5da8 <ldexp>
    5d72:	0f 90       	pop	r0
    5d74:	07 fe       	sbrs	r0, 7
    5d76:	cf ce       	rjmp	.-610    	; 0x5b16 <inverse>
    5d78:	08 95       	ret

00005d7a <__fp_mpack>:
    5d7a:	9f 3f       	cpi	r25, 0xFF	; 255
    5d7c:	31 f0       	breq	.+12     	; 0x5d8a <__fp_mpack_finite+0xc>

00005d7e <__fp_mpack_finite>:
    5d7e:	91 50       	subi	r25, 0x01	; 1
    5d80:	20 f4       	brcc	.+8      	; 0x5d8a <__fp_mpack_finite+0xc>
    5d82:	87 95       	ror	r24
    5d84:	77 95       	ror	r23
    5d86:	67 95       	ror	r22
    5d88:	b7 95       	ror	r27
    5d8a:	88 0f       	add	r24, r24
    5d8c:	91 1d       	adc	r25, r1
    5d8e:	96 95       	lsr	r25
    5d90:	87 95       	ror	r24
    5d92:	97 f9       	bld	r25, 7
    5d94:	08 95       	ret

00005d96 <__fp_norm2>:
    5d96:	91 50       	subi	r25, 0x01	; 1
    5d98:	50 40       	sbci	r21, 0x00	; 0
    5d9a:	66 0f       	add	r22, r22
    5d9c:	77 1f       	adc	r23, r23
    5d9e:	88 1f       	adc	r24, r24
    5da0:	d2 f7       	brpl	.-12     	; 0x5d96 <__fp_norm2>
    5da2:	08 95       	ret
    5da4:	f4 cd       	rjmp	.-1048   	; 0x598e <__fp_inf>
    5da6:	e9 cf       	rjmp	.-46     	; 0x5d7a <__fp_mpack>

00005da8 <ldexp>:
    5da8:	91 de       	rcall	.-734    	; 0x5acc <__fp_splitA>
    5daa:	e8 f3       	brcs	.-6      	; 0x5da6 <__fp_norm2+0x10>
    5dac:	99 23       	and	r25, r25
    5dae:	d9 f3       	breq	.-10     	; 0x5da6 <__fp_norm2+0x10>
    5db0:	94 0f       	add	r25, r20
    5db2:	51 1d       	adc	r21, r1
    5db4:	bb f3       	brvs	.-18     	; 0x5da4 <__fp_norm2+0xe>
    5db6:	91 50       	subi	r25, 0x01	; 1
    5db8:	50 40       	sbci	r21, 0x00	; 0
    5dba:	94 f0       	brlt	.+36     	; 0x5de0 <ldexp+0x38>
    5dbc:	59 f0       	breq	.+22     	; 0x5dd4 <ldexp+0x2c>
    5dbe:	88 23       	and	r24, r24
    5dc0:	32 f0       	brmi	.+12     	; 0x5dce <ldexp+0x26>
    5dc2:	66 0f       	add	r22, r22
    5dc4:	77 1f       	adc	r23, r23
    5dc6:	88 1f       	adc	r24, r24
    5dc8:	91 50       	subi	r25, 0x01	; 1
    5dca:	50 40       	sbci	r21, 0x00	; 0
    5dcc:	c1 f7       	brne	.-16     	; 0x5dbe <ldexp+0x16>
    5dce:	9e 3f       	cpi	r25, 0xFE	; 254
    5dd0:	51 05       	cpc	r21, r1
    5dd2:	44 f7       	brge	.-48     	; 0x5da4 <__fp_norm2+0xe>
    5dd4:	88 0f       	add	r24, r24
    5dd6:	91 1d       	adc	r25, r1
    5dd8:	96 95       	lsr	r25
    5dda:	87 95       	ror	r24
    5ddc:	97 f9       	bld	r25, 7
    5dde:	08 95       	ret
    5de0:	5f 3f       	cpi	r21, 0xFF	; 255
    5de2:	ac f0       	brlt	.+42     	; 0x5e0e <ldexp+0x66>
    5de4:	98 3e       	cpi	r25, 0xE8	; 232
    5de6:	9c f0       	brlt	.+38     	; 0x5e0e <ldexp+0x66>
    5de8:	bb 27       	eor	r27, r27
    5dea:	86 95       	lsr	r24
    5dec:	77 95       	ror	r23
    5dee:	67 95       	ror	r22
    5df0:	b7 95       	ror	r27
    5df2:	08 f4       	brcc	.+2      	; 0x5df6 <ldexp+0x4e>
    5df4:	b1 60       	ori	r27, 0x01	; 1
    5df6:	93 95       	inc	r25
    5df8:	c1 f7       	brne	.-16     	; 0x5dea <ldexp+0x42>
    5dfa:	bb 0f       	add	r27, r27
    5dfc:	58 f7       	brcc	.-42     	; 0x5dd4 <ldexp+0x2c>
    5dfe:	11 f4       	brne	.+4      	; 0x5e04 <ldexp+0x5c>
    5e00:	60 ff       	sbrs	r22, 0
    5e02:	e8 cf       	rjmp	.-48     	; 0x5dd4 <ldexp+0x2c>
    5e04:	6f 5f       	subi	r22, 0xFF	; 255
    5e06:	7f 4f       	sbci	r23, 0xFF	; 255
    5e08:	8f 4f       	sbci	r24, 0xFF	; 255
    5e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    5e0c:	e3 cf       	rjmp	.-58     	; 0x5dd4 <ldexp+0x2c>
    5e0e:	79 ce       	rjmp	.-782    	; 0x5b02 <__fp_szero>
    5e10:	0e f0       	brts	.+2      	; 0x5e14 <ldexp+0x6c>
    5e12:	b3 cf       	rjmp	.-154    	; 0x5d7a <__fp_mpack>
    5e14:	c2 cd       	rjmp	.-1148   	; 0x599a <__fp_nan>
    5e16:	68 94       	set
    5e18:	ba cd       	rjmp	.-1164   	; 0x598e <__fp_inf>

00005e1a <log>:
    5e1a:	58 de       	rcall	.-848    	; 0x5acc <__fp_splitA>
    5e1c:	c8 f3       	brcs	.-14     	; 0x5e10 <ldexp+0x68>
    5e1e:	99 23       	and	r25, r25
    5e20:	d1 f3       	breq	.-12     	; 0x5e16 <ldexp+0x6e>
    5e22:	c6 f3       	brts	.-16     	; 0x5e14 <ldexp+0x6c>
    5e24:	df 93       	push	r29
    5e26:	cf 93       	push	r28
    5e28:	1f 93       	push	r17
    5e2a:	0f 93       	push	r16
    5e2c:	ff 92       	push	r15
    5e2e:	c9 2f       	mov	r28, r25
    5e30:	dd 27       	eor	r29, r29
    5e32:	88 23       	and	r24, r24
    5e34:	2a f0       	brmi	.+10     	; 0x5e40 <log+0x26>
    5e36:	21 97       	sbiw	r28, 0x01	; 1
    5e38:	66 0f       	add	r22, r22
    5e3a:	77 1f       	adc	r23, r23
    5e3c:	88 1f       	adc	r24, r24
    5e3e:	da f7       	brpl	.-10     	; 0x5e36 <log+0x1c>
    5e40:	20 e0       	ldi	r18, 0x00	; 0
    5e42:	30 e0       	ldi	r19, 0x00	; 0
    5e44:	40 e8       	ldi	r20, 0x80	; 128
    5e46:	5f eb       	ldi	r21, 0xBF	; 191
    5e48:	9f e3       	ldi	r25, 0x3F	; 63
    5e4a:	88 39       	cpi	r24, 0x98	; 152
    5e4c:	20 f0       	brcs	.+8      	; 0x5e56 <log+0x3c>
    5e4e:	80 3e       	cpi	r24, 0xE0	; 224
    5e50:	30 f0       	brcs	.+12     	; 0x5e5e <log+0x44>
    5e52:	21 96       	adiw	r28, 0x01	; 1
    5e54:	8f 77       	andi	r24, 0x7F	; 127
    5e56:	64 db       	rcall	.-2360   	; 0x5520 <__addsf3>
    5e58:	eb e3       	ldi	r30, 0x3B	; 59
    5e5a:	f1 e0       	ldi	r31, 0x01	; 1
    5e5c:	03 c0       	rjmp	.+6      	; 0x5e64 <log+0x4a>
    5e5e:	60 db       	rcall	.-2368   	; 0x5520 <__addsf3>
    5e60:	e8 e6       	ldi	r30, 0x68	; 104
    5e62:	f1 e0       	ldi	r31, 0x01	; 1
    5e64:	9d dd       	rcall	.-1222   	; 0x59a0 <__fp_powser>
    5e66:	8b 01       	movw	r16, r22
    5e68:	be 01       	movw	r22, r28
    5e6a:	ec 01       	movw	r28, r24
    5e6c:	fb 2e       	mov	r15, r27
    5e6e:	6f 57       	subi	r22, 0x7F	; 127
    5e70:	71 09       	sbc	r23, r1
    5e72:	75 95       	asr	r23
    5e74:	77 1f       	adc	r23, r23
    5e76:	88 0b       	sbc	r24, r24
    5e78:	99 0b       	sbc	r25, r25
    5e7a:	d1 dc       	rcall	.-1630   	; 0x581e <__floatsisf>
    5e7c:	28 e1       	ldi	r18, 0x18	; 24
    5e7e:	32 e7       	ldi	r19, 0x72	; 114
    5e80:	41 e3       	ldi	r20, 0x31	; 49
    5e82:	5f e3       	ldi	r21, 0x3F	; 63
    5e84:	5b de       	rcall	.-842    	; 0x5b3c <__mulsf3x>
    5e86:	af 2d       	mov	r26, r15
    5e88:	98 01       	movw	r18, r16
    5e8a:	ae 01       	movw	r20, r28
    5e8c:	ff 90       	pop	r15
    5e8e:	0f 91       	pop	r16
    5e90:	1f 91       	pop	r17
    5e92:	cf 91       	pop	r28
    5e94:	df 91       	pop	r29
    5e96:	55 db       	rcall	.-2390   	; 0x5542 <__addsf3x>
    5e98:	ef cd       	rjmp	.-1058   	; 0x5a78 <__fp_round>

00005e9a <modf>:
    5e9a:	fa 01       	movw	r30, r20
    5e9c:	dc 01       	movw	r26, r24
    5e9e:	aa 0f       	add	r26, r26
    5ea0:	bb 1f       	adc	r27, r27
    5ea2:	9b 01       	movw	r18, r22
    5ea4:	ac 01       	movw	r20, r24
    5ea6:	bf 57       	subi	r27, 0x7F	; 127
    5ea8:	28 f4       	brcc	.+10     	; 0x5eb4 <modf+0x1a>
    5eaa:	22 27       	eor	r18, r18
    5eac:	33 27       	eor	r19, r19
    5eae:	44 27       	eor	r20, r20
    5eb0:	50 78       	andi	r21, 0x80	; 128
    5eb2:	1f c0       	rjmp	.+62     	; 0x5ef2 <modf+0x58>
    5eb4:	b7 51       	subi	r27, 0x17	; 23
    5eb6:	88 f4       	brcc	.+34     	; 0x5eda <modf+0x40>
    5eb8:	ab 2f       	mov	r26, r27
    5eba:	00 24       	eor	r0, r0
    5ebc:	46 95       	lsr	r20
    5ebe:	37 95       	ror	r19
    5ec0:	27 95       	ror	r18
    5ec2:	01 1c       	adc	r0, r1
    5ec4:	a3 95       	inc	r26
    5ec6:	d2 f3       	brmi	.-12     	; 0x5ebc <modf+0x22>
    5ec8:	00 20       	and	r0, r0
    5eca:	69 f0       	breq	.+26     	; 0x5ee6 <modf+0x4c>
    5ecc:	22 0f       	add	r18, r18
    5ece:	33 1f       	adc	r19, r19
    5ed0:	44 1f       	adc	r20, r20
    5ed2:	b3 95       	inc	r27
    5ed4:	da f3       	brmi	.-10     	; 0x5ecc <modf+0x32>
    5ed6:	0d d0       	rcall	.+26     	; 0x5ef2 <modf+0x58>
    5ed8:	22 cb       	rjmp	.-2492   	; 0x551e <__subsf3>
    5eda:	61 30       	cpi	r22, 0x01	; 1
    5edc:	71 05       	cpc	r23, r1
    5ede:	a0 e8       	ldi	r26, 0x80	; 128
    5ee0:	8a 07       	cpc	r24, r26
    5ee2:	b9 46       	sbci	r27, 0x69	; 105
    5ee4:	30 f4       	brcc	.+12     	; 0x5ef2 <modf+0x58>
    5ee6:	9b 01       	movw	r18, r22
    5ee8:	ac 01       	movw	r20, r24
    5eea:	66 27       	eor	r22, r22
    5eec:	77 27       	eor	r23, r23
    5eee:	88 27       	eor	r24, r24
    5ef0:	90 78       	andi	r25, 0x80	; 128
    5ef2:	30 96       	adiw	r30, 0x00	; 0
    5ef4:	21 f0       	breq	.+8      	; 0x5efe <modf+0x64>
    5ef6:	20 83       	st	Z, r18
    5ef8:	31 83       	std	Z+1, r19	; 0x01
    5efa:	42 83       	std	Z+2, r20	; 0x02
    5efc:	53 83       	std	Z+3, r21	; 0x03
    5efe:	08 95       	ret

00005f00 <__divmodhi4>:
    5f00:	97 fb       	bst	r25, 7
    5f02:	07 2e       	mov	r0, r23
    5f04:	16 f4       	brtc	.+4      	; 0x5f0a <__divmodhi4+0xa>
    5f06:	00 94       	com	r0
    5f08:	06 d0       	rcall	.+12     	; 0x5f16 <__divmodhi4_neg1>
    5f0a:	77 fd       	sbrc	r23, 7
    5f0c:	08 d0       	rcall	.+16     	; 0x5f1e <__divmodhi4_neg2>
    5f0e:	72 d0       	rcall	.+228    	; 0x5ff4 <__udivmodhi4>
    5f10:	07 fc       	sbrc	r0, 7
    5f12:	05 d0       	rcall	.+10     	; 0x5f1e <__divmodhi4_neg2>
    5f14:	3e f4       	brtc	.+14     	; 0x5f24 <__divmodhi4_exit>

00005f16 <__divmodhi4_neg1>:
    5f16:	90 95       	com	r25
    5f18:	81 95       	neg	r24
    5f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5f1c:	08 95       	ret

00005f1e <__divmodhi4_neg2>:
    5f1e:	70 95       	com	r23
    5f20:	61 95       	neg	r22
    5f22:	7f 4f       	sbci	r23, 0xFF	; 255

00005f24 <__divmodhi4_exit>:
    5f24:	08 95       	ret

00005f26 <__umulsidi3>:
    5f26:	e8 94       	clt

00005f28 <__umulsidi3_helper>:
    5f28:	df 93       	push	r29
    5f2a:	cf 93       	push	r28
    5f2c:	fc 01       	movw	r30, r24
    5f2e:	db 01       	movw	r26, r22
    5f30:	75 d0       	rcall	.+234    	; 0x601c <__umulhisi3>
    5f32:	7f 93       	push	r23
    5f34:	6f 93       	push	r22
    5f36:	e9 01       	movw	r28, r18
    5f38:	9a 01       	movw	r18, r20
    5f3a:	ac 01       	movw	r20, r24
    5f3c:	bf 93       	push	r27
    5f3e:	af 93       	push	r26
    5f40:	3f 93       	push	r19
    5f42:	2f 93       	push	r18
    5f44:	df 01       	movw	r26, r30
    5f46:	6a d0       	rcall	.+212    	; 0x601c <__umulhisi3>
    5f48:	26 f4       	brtc	.+8      	; 0x5f52 <__umulsidi3_helper+0x2a>
    5f4a:	6c 1b       	sub	r22, r28
    5f4c:	7d 0b       	sbc	r23, r29
    5f4e:	82 0b       	sbc	r24, r18
    5f50:	93 0b       	sbc	r25, r19
    5f52:	9e 01       	movw	r18, r28
    5f54:	eb 01       	movw	r28, r22
    5f56:	fc 01       	movw	r30, r24
    5f58:	70 d0       	rcall	.+224    	; 0x603a <__muldi3_6>
    5f5a:	af 91       	pop	r26
    5f5c:	bf 91       	pop	r27
    5f5e:	2f 91       	pop	r18
    5f60:	3f 91       	pop	r19
    5f62:	6b d0       	rcall	.+214    	; 0x603a <__muldi3_6>
    5f64:	be 01       	movw	r22, r28
    5f66:	cf 01       	movw	r24, r30
    5f68:	f9 01       	movw	r30, r18
    5f6a:	2f 91       	pop	r18
    5f6c:	3f 91       	pop	r19
    5f6e:	cf 91       	pop	r28
    5f70:	df 91       	pop	r29
    5f72:	08 95       	ret

00005f74 <__ashldi3>:
    5f74:	0f 93       	push	r16
    5f76:	08 30       	cpi	r16, 0x08	; 8
    5f78:	90 f0       	brcs	.+36     	; 0x5f9e <__ashldi3+0x2a>
    5f7a:	98 2f       	mov	r25, r24
    5f7c:	87 2f       	mov	r24, r23
    5f7e:	76 2f       	mov	r23, r22
    5f80:	65 2f       	mov	r22, r21
    5f82:	54 2f       	mov	r21, r20
    5f84:	43 2f       	mov	r20, r19
    5f86:	32 2f       	mov	r19, r18
    5f88:	22 27       	eor	r18, r18
    5f8a:	08 50       	subi	r16, 0x08	; 8
    5f8c:	f4 cf       	rjmp	.-24     	; 0x5f76 <__ashldi3+0x2>
    5f8e:	22 0f       	add	r18, r18
    5f90:	33 1f       	adc	r19, r19
    5f92:	44 1f       	adc	r20, r20
    5f94:	55 1f       	adc	r21, r21
    5f96:	66 1f       	adc	r22, r22
    5f98:	77 1f       	adc	r23, r23
    5f9a:	88 1f       	adc	r24, r24
    5f9c:	99 1f       	adc	r25, r25
    5f9e:	0a 95       	dec	r16
    5fa0:	b2 f7       	brpl	.-20     	; 0x5f8e <__ashldi3+0x1a>
    5fa2:	0f 91       	pop	r16
    5fa4:	08 95       	ret

00005fa6 <__adddi3>:
    5fa6:	2a 0d       	add	r18, r10
    5fa8:	3b 1d       	adc	r19, r11
    5faa:	4c 1d       	adc	r20, r12
    5fac:	5d 1d       	adc	r21, r13
    5fae:	6e 1d       	adc	r22, r14
    5fb0:	7f 1d       	adc	r23, r15
    5fb2:	80 1f       	adc	r24, r16
    5fb4:	91 1f       	adc	r25, r17
    5fb6:	08 95       	ret

00005fb8 <__adddi3_s8>:
    5fb8:	00 24       	eor	r0, r0
    5fba:	a7 fd       	sbrc	r26, 7
    5fbc:	00 94       	com	r0
    5fbe:	2a 0f       	add	r18, r26
    5fc0:	30 1d       	adc	r19, r0
    5fc2:	40 1d       	adc	r20, r0
    5fc4:	50 1d       	adc	r21, r0
    5fc6:	60 1d       	adc	r22, r0
    5fc8:	70 1d       	adc	r23, r0
    5fca:	80 1d       	adc	r24, r0
    5fcc:	90 1d       	adc	r25, r0
    5fce:	08 95       	ret

00005fd0 <__subdi3>:
    5fd0:	2a 19       	sub	r18, r10
    5fd2:	3b 09       	sbc	r19, r11
    5fd4:	4c 09       	sbc	r20, r12
    5fd6:	5d 09       	sbc	r21, r13
    5fd8:	6e 09       	sbc	r22, r14
    5fda:	7f 09       	sbc	r23, r15
    5fdc:	80 0b       	sbc	r24, r16
    5fde:	91 0b       	sbc	r25, r17
    5fe0:	08 95       	ret

00005fe2 <__cmpdi2>:
    5fe2:	2a 15       	cp	r18, r10
    5fe4:	3b 05       	cpc	r19, r11
    5fe6:	4c 05       	cpc	r20, r12
    5fe8:	5d 05       	cpc	r21, r13
    5fea:	6e 05       	cpc	r22, r14
    5fec:	7f 05       	cpc	r23, r15
    5fee:	80 07       	cpc	r24, r16
    5ff0:	91 07       	cpc	r25, r17
    5ff2:	08 95       	ret

00005ff4 <__udivmodhi4>:
    5ff4:	aa 1b       	sub	r26, r26
    5ff6:	bb 1b       	sub	r27, r27
    5ff8:	51 e1       	ldi	r21, 0x11	; 17
    5ffa:	07 c0       	rjmp	.+14     	; 0x600a <__udivmodhi4_ep>

00005ffc <__udivmodhi4_loop>:
    5ffc:	aa 1f       	adc	r26, r26
    5ffe:	bb 1f       	adc	r27, r27
    6000:	a6 17       	cp	r26, r22
    6002:	b7 07       	cpc	r27, r23
    6004:	10 f0       	brcs	.+4      	; 0x600a <__udivmodhi4_ep>
    6006:	a6 1b       	sub	r26, r22
    6008:	b7 0b       	sbc	r27, r23

0000600a <__udivmodhi4_ep>:
    600a:	88 1f       	adc	r24, r24
    600c:	99 1f       	adc	r25, r25
    600e:	5a 95       	dec	r21
    6010:	a9 f7       	brne	.-22     	; 0x5ffc <__udivmodhi4_loop>
    6012:	80 95       	com	r24
    6014:	90 95       	com	r25
    6016:	bc 01       	movw	r22, r24
    6018:	cd 01       	movw	r24, r26
    601a:	08 95       	ret

0000601c <__umulhisi3>:
    601c:	a2 9f       	mul	r26, r18
    601e:	b0 01       	movw	r22, r0
    6020:	b3 9f       	mul	r27, r19
    6022:	c0 01       	movw	r24, r0
    6024:	a3 9f       	mul	r26, r19
    6026:	70 0d       	add	r23, r0
    6028:	81 1d       	adc	r24, r1
    602a:	11 24       	eor	r1, r1
    602c:	91 1d       	adc	r25, r1
    602e:	b2 9f       	mul	r27, r18
    6030:	70 0d       	add	r23, r0
    6032:	81 1d       	adc	r24, r1
    6034:	11 24       	eor	r1, r1
    6036:	91 1d       	adc	r25, r1
    6038:	08 95       	ret

0000603a <__muldi3_6>:
    603a:	f0 df       	rcall	.-32     	; 0x601c <__umulhisi3>
    603c:	46 0f       	add	r20, r22
    603e:	57 1f       	adc	r21, r23
    6040:	c8 1f       	adc	r28, r24
    6042:	d9 1f       	adc	r29, r25
    6044:	08 f4       	brcc	.+2      	; 0x6048 <__muldi3_6+0xe>
    6046:	31 96       	adiw	r30, 0x01	; 1
    6048:	08 95       	ret

0000604a <_exit>:
    604a:	f8 94       	cli

0000604c <__stop_program>:
    604c:	ff cf       	rjmp	.-2      	; 0x604c <__stop_program>
